<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woodstock Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-09-04T23:55:47+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Google] Unsolved Mystery of UTF8 Encoding]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/unsolved-mystery-of-utf8/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/unsolved-mystery-of-utf8</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://algorithmguru.com/blog/?p=148">link</a></p>

<blockquote><p>UTF-8 is a variable-length encoding of letters or runes. If the most significant bit of the first byte is 0, the letter is 1 byte long. Otherwise, its length is the number of leading 1’s in the first byte. If a letter is more than one byte long, all subsequent runes start with 10. Here’s a chart:</p>

<p>UTF-8 encoding scheme is described below:</p></blockquote>

<pre><code>0XXXXXXX = this is the entire rune
10XXXXXX = this is a continuation of the rune from the previous byte
110XXXXX = this is the start of a 2-byte rune.
1110XXXX = this is the start of a 3-byte rune.
11110XXX = this is the start of a 4-byte rune.
111110XX = this is the start of a 5-byte rune.
1111110X = this is the start of a 6-byte rune.
11111110 = this is the start of a 7-byte rune.
11111111 = this is the start of a 8-byte rune.
</code></pre>

<blockquote><p>For example, a 3-byte rune would be 1110XXXX 10XXXXXX 10XXXXXX.</p>

<p>Write a function that decides whether a given byte array (or string) is valid UTF-8 encoded text.</p></blockquote>

<h3>Solution</h3>

<p>This is an easy question, just put here for reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Print Numbers Containing 5]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/print-numbers-containing-5/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/print-numbers-containing-5</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32651839.html">link</a></p>

<blockquote><p>写一个function，对于参数n，输出从0到n之间所有含5的数字。eg. func(30) 应该输出5，15，25</p>

<p>this is Groupon interview question</p></blockquote>

<h3>Solution</h3>

<p>Suggested by level 10 of <a href="http://www.mitbbs.com/article_t/JobHunting/32651839.html">this forum</a>. It&rsquo;s (surprisingly) a DFS question.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public void mySolution(int num) {
    if (num &gt;= 5) {
        String str = String.valueOf(num);
        helper(num, "", 0, str.length(), false);
    }
}

private void helper(int max, String prefix, int pos, int len, boolean have5) {
    if (pos == len) {
        int cur = Integer.parseInt(prefix);
        if (cur &lt;= max) {
            System.out.print(cur + ", ");
        }
        return;
    }
    for (int i = 0; i &lt; 10; i++) {
        if (pos == len - 1 &amp;&amp; !have5 &amp;&amp; i != 5) {
            continue;
        }
        helper(max, prefix + i, pos + 1, len, have5 || i == 5);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Find Second Shortest Path]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/Find-second-shortest-path/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/Find-second-shortest-path</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=16922663">link</a></p>

<blockquote><p>You are given a graph and an algorithm that can find the shortest path b/w any two nodes.</p>

<p>Now you have to find the second shortest path between same two nodes.</p></blockquote>

<h3>Solution</h3>

<p>From the top answer:</p>

<blockquote><p><strong>Find the shortest path</strong> between any two nodes. Let them be A and B.</p>

<p>Now to get second shortest path between the same nodes, <strong>remove any one edge that is involved in the shortest path</strong> between the same nodes and calculate the shortest path.</p>

<p>Do the above process for each of the node involved in shortest path and keep track of the minimum second shortest path found.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Code a HashMap]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/Code-a-hashmap/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/Code-a-hashmap</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.glassdoor.com/Interview/Code-a-hashmap-which-you-would-be-happy-to-place-into-a-production-environment-QTN_725885.htm">link</a></p>

<blockquote><p>Code a hashmap which you would be happy to place into a production environment.</p></blockquote>

<h3>Solution</h3>

<p>We already write 2 post before:</p>

<ol>
<li><p><strong>[Question] Implement a HashMap</strong></p></li>
<li><p><strong>[CC150v5] 8.10 Implement a Hashmap</strong></p></li>
</ol>


<p>But still, this is not an easy question when asked at an interview. It won&rsquo;t harm to do a little recap:</p>

<ol>
<li>The basic structure is an array. It can be:

<ol>
<li>An array of linked nodes (with a next pointer).</li>
<li>An array of linked list.</li>
</ol>
</li>
<li>There should be a hash function.</li>
<li>There should be a function to convert the hash value to corresponding array index.</li>
<li>Remember there&rsquo;s <strong>a concept of Load factor</strong>. It means to what percentage the hashmap is filled.</li>
<li>h &amp; (length – 1) means h % length, which maps a hashcode to an array index.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Weird Sort Array]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/weird-sort-array/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/weird-sort-array</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t0/JobHunting/32772813.html">link</a></p>

<blockquote><p>数组排序， 排成 a1<a2>a3<a4>a5。。。这种形式。</p></blockquote>

<h3>Solution</h3>

<p><strong>The are 2 solutions</strong>. The easy one is this:</p>

<blockquote><p>sort first, then 把临近的奇数换到偶数(index)上, O(nlog n).</p></blockquote>

<p><strong>There&rsquo;s a great O(n) solution however</strong>, not easy to think:</p>

<blockquote><p>两两比较相邻数字，把大的数字放到下标为奇数的位置。 O(n).</p></blockquote>

<h3>Code</h3>

<p><strong>O(nlgn) solution</strong></p>

<pre><code>public void solutionOnlgn(int[] A) {
    // this is a O(nlgn) solution
    Arrays.sort(A);
    for (int i = 2; i &lt; A.length; i += 2) {
        swap(A, i - 1, i);
    }
}

private void swap(int[] A, int a, int b) {
    A[a] ^= A[b];
    A[b] ^= A[a];
    A[a] ^= A[b];
}
</code></pre>

<p><strong>O(n) solution</strong></p>

<pre><code>public void solutionOn(int[] A) {
    // this is a O(n) solution
    for (int i = 1; i &lt; A.length; i++) {
        // compare (i)th with (i-1)th, and put the large value
        // at odd-indexed positions
        if ((A[i - 1] &lt; A[i] &amp;&amp; i % 2 == 0)
                || (A[i - 1] &gt; A[i] &amp;&amp; i % 2 == 1)) {
            swap(A, i - 1, i);
        }
    }
}

private void swap(int[] A, int a, int b) {
    A[a] ^= A[b];
    A[b] ^= A[a];
    A[a] ^= A[b];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] String Replacement Question]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/String-replacement-question/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/String-replacement-question</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32766461.html">link</a></p>

<blockquote><p>String replace, 给一个原string，一个target，一个替换的新str，把所有出现
target str的地方都换成新的str， 长度可以任意.</p></blockquote>

<h3>Solution</h3>

<p>If the question asks for an in-place algo, then we can refer to <strong>Question 1.5 in CC150v4</strong>.</p>

<h3>Question</h3>

<blockquote><p>1.5 Write a method to replace all spaces in a string with ‘%20’.</p></blockquote>

<h3>Solution</h3>

<ol>
<li><strong>pre-processing</strong>, count the number of spaces in string</li>
<li>parse the string from end to beginning.</li>
</ol>


<p>Need 2 pass.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>public static void ReplaceFun(char[] str, int length) {
    int spaceCount = 0, newLength, i = 0;
    for (i = 0; i &lt; length; i++) {
        if (str[i] == ' ') {
            spaceCount++;
        }
    }
    newLength = length + spaceCount * 2;
    str[newLength] = '\0';
    for (i = length - 1; i &gt;= 0; i--) {
        if (str[i] == ' ') {
            str[newLength - 1] = '0';
            str[newLength - 2] = '2';
            str[newLength - 3] = '%';
            newLength = newLength - 3;
        } else {
            str[newLength - 1] = str[i];
            newLength = newLength - 1;
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Leader Election]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/Leader-election/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/Leader-election</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p>(this question is from MIT handouts B)</p>

<blockquote><p>Describe a technique to identify a &ldquo;leader&rdquo; among a group of 10 identical servers that are all connected to every other server.</p>

<p>There are no prior distinguishing characteristics of any of them and the same program to identify the leader starts running on all of them at the same time. After an answer is given, ask how much network traffic it requires and, if &ldquo;ties&rdquo; are possible, ask how you can break ties.</p></blockquote>

<h3>Leader Election</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Leader_election">Leader Election</a></strong> is the process of designating a single process as the organizer of some task distributed among several computers. After running this algorithm, each node throughout the network recognizes a unique node as the task leader.</p>

<p>The good answer would be:</p>

<p>Have each server wait a random amount of time and then say &ldquo;I&rsquo;m it.&rdquo; The &ldquo;I&rsquo;m it&rdquo; <strong>announcement is time‐stamped</strong>, and the computer that <strong>time‐stamped its announcement first</strong> is elected the leader.</p>

<p>This approach requires sending out 9 messages. <strong>If there is a tie</strong>, the computers can repeat the procedure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Split an Integer or Coin]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Split-an-integer-or-coin/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Split-an-integer-or-coin</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/hackbuteer1/article/details/8035261">link</a></p>

<blockquote><p>整数的拆分问题</p>

<p>如，对于正整数n=6，可以拆分为：</p></blockquote>

<pre><code>6
5+1
4+2, 4+1+1
3+3, 3+2+1, 3+1+1+1
2+2+2, 2+2+1+1, 2+1+1+1+1
1+1+1+1+1+1+1
</code></pre>

<blockquote><p>现在的问题是，对于给定的正整数n，程序输出该整数的拆分种类数(HDOJ  1028)。</p></blockquote>

<h3>Solution</h3>

<p>This is very similar to another question I posted before: <strong>Coin Change Problem</strong>.</p>

<p><strong>The DP equation is</strong>:</p>

<blockquote><p>q(n,k) = q(n,k-1) + q(n-k,k)</p></blockquote>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>int main(void) {  
    int n,i,j,dp[121][121];  
    for(i = 1 ; i &lt; 121 ; ++i)  
    {  
        for(j = 1 ; j &lt; 121 ; ++j)  
        {  
            if(i == 1 ||  j == 1)  
                dp[i][j] = 1;  
            else if(i &gt; j)  
                dp[i][j] = dp[i][j-1] + dp[i-j][j];  
            else if(i == j)  
                dp[i][j] = dp[i][j-1] + 1;  
            else  
                dp[i][j] = dp[i][i];  
        }  
    }  

    while(scanf("%d",&amp;n)!=EOF)  
    {  
        cout&lt;&lt;dp[n][n]&lt;&lt;endl;  
    }  
    return 0;  
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v5] 17.6 Order an Array by Sorting Middle]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Order-array-by-sorting-middle/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Order-array-by-sorting-middle</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Given an array of integers, write a method to find indices m and n such that if you sorted elements m through n, the entire array would be sorted. Minimize n-m (that is, find the smallest such sequence).</p></blockquote>

<h3>Solution</h3>

<p>Referring to <a href="http://www.mitbbs.com/article_t/JobHunting/32772399.html">this guy</a>:</p>

<blockquote><ol>
<li><p>找到heading的最长递增序列</p></li>
<li><p>找到tailing的最长的递增序列</p></li>
</ol>
</blockquote>

<p>After that:</p>

<blockquote><ol>
<li><p>用中间部分的min去shrink左边 更新max</p></li>
<li><p>根据更新后的max shrink右边 更新min</p></li>
<li><p>再一次shrink左边</p></li>
</ol>
</blockquote>

<h3>Code</h3>

<pre><code>public static int findEndOfLeftSubsequence(int[] array) {
    for (int i = 1; i &lt; array.length; i++) {
        if (array[i] &lt; array[i - 1]) {
            return i - 1;
        }
    }
    return array.length - 1;
}

public static int findStartOfRightSubsequence(int[] array) {
    for (int i = array.length - 2; i &gt;= 0; i--) {
        if (array[i] &gt; array[i + 1]) {
            return i + 1;
        }
    }
    return 0;
}

public static int shrinkLeft(int[] array, int min_index, int start) {
    int comp = array[min_index];
    for (int i = start - 1; i &gt;= 0; i--) {
        if (array[i] &lt;= comp) {
            return i + 1;
        }
    }
    return 0;
}

public static int shrinkRight(int[] array, int max_index, int start) {
    int comp = array[max_index];
    for (int i = start; i &lt; array.length; i++) {
        if (array[i] &gt;= comp) {
            return i - 1;
        }
    }
    return array.length - 1;
}

public static void findUnsortedSequence(int[] array) {
    // find left subsequence
    int end_left = findEndOfLeftSubsequence(array);

    if (end_left &gt;= array.length - 1) {
        // System.out.println("The array is already sorted.");
        return; // Already sorted
    }

    // find right subsequence
    int start_right = findStartOfRightSubsequence(array);

    int max_index = end_left; // max of left side
    int min_index = start_right; // min of right side
    for (int i = end_left + 1; i &lt; start_right; i++) {
        if (array[i] &lt; array[min_index]) {
            min_index = i;
        }
        if (array[i] &gt; array[max_index]) {
            max_index = i;
        }
    }

    // slide left until less than array[min_index]
    int left_index = shrinkLeft(array, min_index, end_left);

    // slide right until greater than array[max_index]
    int right_index = shrinkRight(array, max_index, start_right);

    if (validate(array, left_index, right_index)) {
        System.out.println("TRUE: " + left_index + " " + right_index);
    } else {
        System.out.println("FALSE: " + left_index + " " + right_index);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Listener / Observer Pattern]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Listener-Observer-pattern/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Listener-Observer-pattern</id>
    <content type="html"><![CDATA[<h3>Observer pattern</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Observer_pattern">The observer pattern</a></strong> is a software design pattern in which an object(subject) maintains a list of dependents(observers), and notifies them automatically of any state changes (usually by calling one of their methods).</p>

<p>The Observer pattern is mainly used to implement distributed event handling systems. It&rsquo;s also a key part in MVC architectural.</p>

<h3>Example</h3>

<p>A mailing list example.</p>

<p>Each student in the mailing list would be a listener/observer, and teacher would be announcer/subject.</p>

<p>So in the code, there&rsquo;s a Listener Interface that all students implement. There&rsquo;s a update() method in the interface, where each student define their own implementation.</p>

<p>Teacher would keep a list of Listeners. When there&rsquo;s any news, teacher would call update() on each object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Find Anagrams in Dictionary]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Find-anagrams-in-dictionary/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Find-anagrams-in-dictionary</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=3088">link</a></p>

<blockquote><p>Imagine you had a dictionary. How would you print all anagrams of a word? What if you had to do this repeatedly? Could you optimize it?</p></blockquote>

<h3>Solution</h3>

<p>A very <a href="http://stackoverflow.com/a/12477976">nice solution</a>:</p>

<ol>
<li><p>Open dictionary</p></li>
<li><p>Create empty hashmap H</p></li>
<li><p>For each word in dictionary:</p>

<ol>
<li><p>Create a key that is the word&rsquo;s letters sorted alphabetically (and forced to one case)</p></li>
<li><p>Add the word to the list of words accessed by the hash key in H</p></li>
</ol>
</li>
</ol>


<p>There&rsquo;s another <a href="http://karmaandcoding.blogspot.sg/2012/02/print-all-anagrams-for-word-from.html">very interesting idea</a>, if the length of the word is not too long.</p>

<blockquote><p>Another approach could be we can assign each letters from a..z a prime numbers (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, .. so on)</p>

<p>and then for any word, we can calculate its key as the multiples of all the prime number corresponding to characters in the word.</p>

<p>The char &ndash;> int assignment may look like:</p></blockquote>

<pre><code>a=2, b=3, c=5, d=7, e=11, f=13, g=17, h=19, i=23, j=29, 
k=31, l=37, m=41, n=43, o=47, p=53, q=59, r=61, s=67, t=71, 
u=73, v=79, w=83, x=89, y=97, z=101
</code></pre>

<h3>Code</h3>

<p><strong>not written by me</strong>, <a href="http://karmaandcoding.blogspot.sg/2012/02/print-all-anagrams-for-word-from.html">link</a></p>

<pre><code>private static HashMap&lt;String, ArrayList&lt;String&gt;&gt; anagramMap = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();

public static void findAnagrams(String[] dictionary) {
    int len = dictionary.length;

    for (int i = 0; i &lt; len; i++) {
        String sortedWord = sortWordLexicographically(dictionary[i]);
        ArrayList&lt;String&gt; wordList = anagramMap.get(sortedWord);
        if (wordList == null) {
            wordList = new ArrayList&lt;String&gt;();
        }
        wordList.add(dictionary[i]);
        anagramMap.put(sortedWord, wordList);
    }
}

public ArrayList&lt;String&gt; getAnagrams(String word) {
    if (word == null) {
        return null;
    }

    String sortedWord = sortWordLexicographically(word);
    return anagramMap.get(sortedWord);
}

public void printAnagrams(String word) {
    if (word == null) {
        System.out.println("Input word is null!");
    } else {
        ArrayList&lt;String&gt; wordList = getAnagrams(word);
        if (wordList == null) {
            System.out.println("No anagrams exists for : " + word);
        } else {
            Iterator&lt;String&gt; iter = wordList.iterator();
            while (iter.hasNext()) {
                System.out.print(iter.next());
            }
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Axis Aligned Rectangles]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Axis-aligned-rectangle/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Axis-aligned-rectangle</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://ankitsambyal.blogspot.sg/2013/10/finding-overlapping-rectangles-in-given.html">link</a>, MIT handouts Person_A</p>

<blockquote><p>Describe an algorithm that takes an unsorted array of axis-aligned rectangles and returns <strong>any pair of</strong> rectangles that overlaps, if there is such a pair.</p>

<p>Axis-aligned means that all the rectangle sides are either parallel or perpendicular to the x- and y-axis.</p>

<p>Each rectangle object has two variables: the x-y coordinates of the upper-left corner and the bottom-right corner.</p></blockquote>

<h3>Analysis</h3>

<p>A lot of different solutions on the internet, <a href="http://www.quora.com/Algorithms/Given-a-set-of-n-axis-aligned-rectangles-in-the-plane-find-how-big-is-the-largest-subset-of-these-rectangles-that-contain-a-common-point-in-O-n-3-and-then-in-order-O-nlogn">eg</a> and <a href="http://ankitsambyal.blogspot.sg/2013/10/finding-overlapping-rectangles-in-given.html">eg</a>, and some questions asks you to return all overlapping pairs. For now, we just return <strong>any pair</strong> that overlaps.</p>

<h3>Solution</h3>

<p>I concluded some solution and come up with this (the idea of BST is covered in the end of <a href="http://www.cs.princeton.edu/~rs/AlgsDS07/17GeometricSearch.pdf">this pdf</a>):</p>

<ol>
<li>Sort the input by left edge.</li>
<li>One by one, get one rectangle from the sorted input, and make a pair (rect.top, rect.bottom).</li>
<li>Insert this pair into a <strong>Interval Search Tree</strong>.</li>
<li>This tree is a BST, and use first value of the pair as BST key.</li>
<li>Insert pair at the correct BST location. If conflicts, we&rsquo;ve found 1 overlapping pair.</li>
</ol>


<p>The code for searching a intersect, and insert a pair looks like this:</p>

<pre><code>Node x = root;
while (x != null) {
    if (x.interval.intersects(lo, hi)) 
        return x.interval;
    else if (x.left == null)  x = x.right;
    else if (x.left.max &lt; lo) x = x.right;
    else                      x = x.left;
}
return null;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Array Distance A(i)+A(j)+(j-i)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Array-distance-A(i)+A(j)+(j-i)/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Array-distance-A(i)+A(j)+(j-i)</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article/JobHunting/32772225_3.html">link</a></p>

<blockquote><p>Given an int array A[], define:</p>

<p>distance = A[i] + A[j] + (j-i), j >= i.</p>

<p>Find max distance in A[]</p></blockquote>

<h3>Solution</h3>

<p>Solution suggested on floor 8 of <a href="http://www.mitbbs.com/mitbbs_article_t.php?board=JobHunting&amp;gid=32772225&amp;ftype=0">this post</a>.</p>

<ol>
<li><p>distance = (A[i] &ndash; i) + (A[j] + j), so we do 2 iteration in the array and calculate (A[i] &ndash; i) and (A[j] + j) respectively.</p></li>
<li><p>save the max value of (A[i] &ndash; i) from left to right</p></li>
<li><p>save the max value of (A[j] + j) from right to left</p></li>
<li><p>last iteration, calculate result.</p></li>
</ol>


<p>Eg. input = {3, 3, 3, 5, 6, 4}</p>

<blockquote><p>max value of (A[i] &ndash; i) from left to right: {3, 3, 3, 3, 3, 3}</p>

<p>max value of (A[j] + j) from right to left: {10, 10, 10, 10, 10, 9}</p>

<p>final result: 13</p></blockquote>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public int distance(int[] A) {
    int len = A.length;
    int[] arrayI = new int[len];
    int[] arrayJ = new int[len];

    arrayI[0] = A[0] - 0;
    // arrayI stores max value of (A[i]-i) from left to right
    arrayJ[len - 1] = A[len - 1] + (len - 1);
    // arrayJ stores max value of (A[i]+i) from right to left

    for (int i = 1; i &lt; len; i++) {
        arrayI[i] = Math.max(arrayI[i - 1], A[i] - i);
    }

    for (int i = len - 2; i &gt;= 0; i--) {
        arrayJ[i] = Math.max(arrayJ[i + 1], A[i] + i);
    }

    Common.printArray(arrayI);
    Common.printArray(arrayJ);

    int max = Integer.MIN_VALUE;
    for (int i = 0; i &lt; len; i++) {
        max = Math.max(max, arrayI[i] + arrayJ[i]);
    }
    return max;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Multithreading - Deadlock Prevention]]></title>
    <link href="http://okckd.github.io/blog/2014/09/01/Multithreading-deadlock-prevention/"/>
    <updated>2014-09-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/01/Multithreading-deadlock-prevention</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>How to prevent deadlock? (question from MIT handouts 1)</p></blockquote>

<h3>Analysis</h3>

<p>Preventing one of the 4 conditions will prevent deadlock:</p>

<ol>
<li><p>Removing the <strong>mutual exclusion condition</strong>, but not very possible.</p></li>
<li><p>The <strong>hold and wait</strong> conditions may be removed by requiring processes to request all the resources they will need before starting up.</p></li>
<li><p>The <strong>no preemption condition</strong> may also be difficult or impossible to avoid as a process has to be able to have a resource for a certain amount of time, or the processing outcome may be inconsistent or thrashing may occur.</p></li>
<li><p>The final condition is the <strong>circular wait condition</strong>. Approaches that avoid circular waits include disabling interrupts during critical sections and using a hierarchy to determine a partial ordering of resources.</p></li>
</ol>


<h3>Answer</h3>

<p><strong>Assign an order to our locks</strong> (require that the locks always acquired in order).</p>

<p>This prevent 2 thread waiting to get the resource in each other&rsquo;s hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Hamming Distance of Array]]></title>
    <link href="http://okckd.github.io/blog/2014/09/01/Hamming-distance-of-array/"/>
    <updated>2014-09-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/01/Hamming-distance-of-array</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.glassdoor.com/Interview/-a-first-write-a-function-to-calculate-the-hamming-distance-between-two-binary-numbers-b-write-a-function-that-takes-QTN_450885.htm">link</a></p>

<blockquote><p><a href="http://en.wikipedia.org/wiki/Hamming_distance">Hamming distance</a> between two strings of equal length is the number of positions at which the corresponding symbols are different.</p>

<p>Write a function that takes a list of binary numbers and returns the sum of the hamming distances for each pair.</p>

<p>Do it in O(n) time.</p></blockquote>

<h3>Solution</h3>

<p>The naive solution is O(n<sup>2</sup>), so we simplify this question by using {0,0,0,1,1} as input. The output in this case would be 6. Why? Because 3 x 2 = 6.</p>

<p>So the equation for solution would be:</p>

<blockquote><p>distance (for a bit) = number of &lsquo;1&rsquo;s * number of &#8216;0&rsquo;s</p></blockquote>

<p>The final answer would be the sum of distances for all bits. The solution is from <a href="http://se7so.blogspot.sg/2014/02/how-to-prepare-for-interview-9.html">this blog</a>.</p>

<h3>Code</h3>

<p>Great solution, <strong>not written by me</strong></p>

<pre><code>int hammingDist(int[] nums) {

    int[] bits = new int[32];

    for (int i = 0; i &lt; nums.length; i++) {
        int one = 1;
        int j = 0;

        while (nums[i] != 0) {
            if ((nums[i] &amp; one) != 0)
                bits[j]++;
            j++;
            nums[i] = nums[i] &gt;&gt; 1;
        }
    }

    int ans = 0;
    for (int i = 0; i &lt; 32; i++) {
        ans += bits[i] * (nums.length - bits[i]);
    }

    return ans;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Row With Most 1s]]></title>
    <link href="http://okckd.github.io/blog/2014/09/01/Find-row-with-most-1s/"/>
    <updated>2014-09-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/01/Find-row-with-most-1s</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/find-the-row-with-maximum-number-1s/">link</a></p>

<blockquote><p>Given a 2D array with only 1s and 0s, where each row is sorted.</p>

<p>Find the row with the maximum number of 1s. Input matrix:</p></blockquote>

<pre><code>0 1 1 1
0 0 1 1
1 1 1 1  // this row has maximum 1s
0 0 0 0
</code></pre>

<blockquote><p>Output: 2</p></blockquote>

<h3>Analysis</h3>

<p>By using a modified version of binary search, we can achieve <strong><a href="http://www.geeksforgeeks.org/find-the-row-with-maximum-number-1s/">a O(mLogn) solution</a></strong> where m is number of rows and n is number of columns in matrix.</p>

<p><strong>However, there&rsquo;s better solution that works in linear time</strong>!</p>

<h3>Solution</h3>

<ol>
<li><p>Get the index of first (or leftmost) 1 in the first row.</p></li>
<li><p>Do following for every row after the first row:</p>

<ol>
<li><p>IF the element on left of previous leftmost 1 is 0, ignore this row.</p></li>
<li><p>ELSE Move left until a 0 is found. Update the leftmost index to this index and max_row_index to be the current row.</p></li>
</ol>
</li>
</ol>


<p>The time complexity is O(m+n).</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public int solution(int[][] matrix) {
    int m = matrix.length;
    int n = matrix[0].length;
    int p = n;
    int row = -1;
    for (int i = 0; i &lt; m; i++) {
        // now p is larger than 0, otherwise it's already terminated
        if (matrix[i][p - 1] == 0) {
            continue;
        }
        // p points to a 1, now search to the left direction
        for (int j = p - 1; j &gt;= 0; j--) {
            if (matrix[i][j] == 1) {
                p = j;
            } else {
                break;
            }
        }
        // p have a new value now
        if (p == 0) {
            return i;
        } else {
            row = i;
        }
    }
    return row;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Crosswod Solver]]></title>
    <link href="http://okckd.github.io/blog/2014/09/01/Crossword-solver/"/>
    <updated>2014-09-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/01/Crossword-solver</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/8585090/algorithm-for-crossword-puzzle-with-given-grid">link</a></p>

<blockquote><p>Given a wordlist like this:</p></blockquote>

<pre><code>1. ccaa
1. baca
1. baaa
1. bbbb
</code></pre>

<blockquote><p>and a Grid like this:</p></blockquote>

<pre><code>X X 
XXXX
X X 
XXXX
</code></pre>

<blockquote><p>Now solve this crossword. One possible solution:</p></blockquote>

<pre><code>b c 
baca
b a 
baaa
</code></pre>

<h3>Solution</h3>

<p><a href="http://stackoverflow.com/a/8586102">The corssword problem</a> is NP-Complete, so your best shot is brute force: just try all possibilities, and stop when a possibility is a valid. Return failure when you exhausted all possible solutions.</p>

<h3>Code</h3>

<p><strong>Pseudo code for brute force</strong>. (this just serve as a guide, not a complete/correct solution)</p>

<pre><code>solve(words,grid):
   if words is empty:
       if grid.isValudSol():
          return grid
       else:
          return None
   for each word in words:
       possibleSol &lt;- grid.fillFirst(word)
       ret &lt;- solve(words\{word},possibleSol)
       if (ret != None):
          return ret
   return None
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Multiples of 3 and 5]]></title>
    <link href="http://okckd.github.io/blog/2014/08/30/multiples-of-3-and-5/"/>
    <updated>2014-08-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/30/multiples-of-3-and-5</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://projecteuler.net/problem=1">link</a></p>

<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>

<p>Find the sum of all the multiples of 3 or 5 below 1000.</p></blockquote>

<h3>Solution</h3>

<blockquote><p>The multiples of 3 are 3,6,9,12,15,18,21,24,27,30,&hellip;.</p>

<p>The multiples of 5 are 5,10,15,20,25,30,35,40,45,&hellip;.</p>

<p>The intersection of these two sequences is 15,30,45,&hellip;</p></blockquote>

<p><img class="middle" src="http://okckd.github.io/assets/images/multiples-of-3-5.png"></p>

<p><a href="http://math.stackexchange.com/a/9260">source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Classic] Travelling Salesman Problem]]></title>
    <link href="http://okckd.github.io/blog/2014/08/30/Travelling-salesman-problem/"/>
    <updated>2014-08-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/30/Travelling-salesman-problem</id>
    <content type="html"><![CDATA[<h3>TSP problem</h3>

<p><a href="http://en.wikipedia.org/wiki/Travelling_salesman_problem">Given a list of cities</a> and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?</p>

<p>It is an NP-hard problem in combinatorial optimization. We will discuss 2 category of solutions:</p>

<ol>
<li>Exact algorithms</li>
<li>Heuristic and approximation algorithms</li>
</ol>


<h3>Exact algorithms</h3>

<ol>
<li><p><strong>Brute force search</strong>, which the run time is O(n!), which is impossible for 20 cities.</p></li>
<li><p><strong>DP</strong> Held–Karp algorithm. O(n<sup>2</sup> x 2<sup>n</sup>).</p></li>
<li><p><strong>Branch-and-bound</strong> algorithm. This can process 40-60 cities.</p></li>
</ol>


<h3>Heuristic and approximation algorithms</h3>

<ol>
<li><p><strong>Greedy</strong>, or Nearest Neighbour algorithm. (an improved version is called Nearest Fragment algorithm, which connect NN in groups)</p></li>
<li><p><strong>Minimum Spanning Tree (MST)</strong>, build the <a href="http://en.m.wikipedia.org/wiki/Minimum_spanning_tree">MST</a> using <a href="http://en.wikipedia.org/wiki/Kruskal's_algorithm">Kruskal&rsquo;s algorithm</a> and then do a <strong>Depth-first Tree Tour</strong>. <a href="http://www.youtube.com/watch?v=HWHZAtQl1vI">link</a> to video.</p>

<ol>
<li><p>Sort all edges from small to large, then add edges into MST as long as no cycle is created. In the end, a MST is achieved.</p></li>
<li><p>Do Depth-first Tree Tour(DFTT)</p></li>
<li><p>Length of DFTT is 2 x weight of MST.</p></li>
<li><p>Skip some nodes that&rsquo;s only visited once.</p></li>
<li><p>We get an legitimate solution.</p></li>
</ol>
</li>
</ol>


<h3>Iterative improvement</h3>

<p>Now these are the solutions. However we can improve it by doing <strong>2-opt Swap</strong>.</p>

<p>It means selecting 2 edges at random. If swapping results in an improvement, then keep it. Keep doing this. <a href="http://www.youtube.com/watch?v=SC5CX8drAtU">link</a> to video.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Classic] MinMax Algorithm]]></title>
    <link href="http://okckd.github.io/blog/2014/08/30/Man-max-algorithm/"/>
    <updated>2014-08-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/30/Man-max-algorithm</id>
    <content type="html"><![CDATA[<h3>Definition</h3>

<p>For every two-person, zero-sum game with finitely many strategies, there exists a value V and a mixed strategy for each player, such that</p>

<ol>
<li>Given player 2&rsquo;s strategy, the best payoff possible for player 1 is V, and</li>
<li>Given player 1&rsquo;s strategy, the best payoff possible for player 2 is −V.</li>
</ol>


<p>Equivalently, Player 1&rsquo;s strategy guarantees him a payoff of V regardless of Player 2&rsquo;s strategy.</p>

<p>Put it in a simple way: MAX tries to <strong>max the utility</strong>, and MIN try to <strong>min it</strong>.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-1.png"></p>

<h3>Steps</h3>

<ol>
<li>Have a <strong>heuristic evaluation function</strong>, which gives a value to non-final game states.</li>
<li>Generate the values down to terminal states.</li>
<li>Min-max calculate the utility, like this:</li>
</ol>


<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-2.png"></p>

<h3>An example</h3>

<p>Othello game:</p>

<blockquote><p>A player can place a new piece in a position if there exists at least one straight (horizontal, vertical, or diagonal) occupied line between the new piece and another piece of the same kind, with one or more contiguous pieces from the opponent player between them.</p>

<p>After placing the new piece, the pieces from the opponent player will be captured and become the pieces from the same player.</p>

<p>The player with the most pieces on the board wins.</p></blockquote>

<p>First, the <strong>heuristic evaluation function</strong>:</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-2.png"></p>

<p>Now, generate terminal level utility values:</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-3.png"></p>

<p>Now, do min-max algorithm:</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-4.png"></p>

<h3>Pruning</h3>

<p>The performance of the naïve minimax algorithm may be improved dramatically, without affecting the result, <a href="http://en.wikipedia.org/wiki/Minimax#Minimax_algorithm_with_alternate_moves">by the use of</a> <strong>alpha-beta pruning</strong>.</p>

<p><a href="http://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning">Alpha–beta pruning</a> is a search algorithm that seeks to decrease the number of nodes that are evaluated by the minimax algorithm in its search tree.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-ab-pruning.png"></p>
]]></content>
  </entry>
  
</feed>
