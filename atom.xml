<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-07-29T23:23:05+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Which Loop Is Faster]]></title>
    <link href="http://okckd.github.io/blog/2014/07/29/Which-is-faster/"/>
    <updated>2014-07-29T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/29/Which-is-faster</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2010/09/which-loop-is-faster.html">link</a></p>

<blockquote><p>A very basic programming puzzle is being asked in programming interviews since last few years. Which of the below two loops will run faster?</p></blockquote>

<pre><code>/* First */  
for(i=0;i&lt;100;i++)  
 for(j=0;j&lt;10;j++)  
     //do somthing

/* Second */  
for(i=0;i&lt;10;i++)  
 for(j=0;j&lt;100;j++)  
     //do somthing  
</code></pre>

<h3>Solution</h3>

<ol>
<li>The First executes assignment operations 101 times, while Second executes only 11 times.</li>
<li>The First does 101 + 1100 = 1201 comparisons, while the Second does 11 + 1010 = 1021 comparisons.</li>
<li>The First executes 1100 increments, while the Second executes 1010 increments.</li>
</ol>


<h3>Code</h3>

<p>The following code proves why First is faster.</p>

<pre><code>public static void solution() {
    int i, j, k, l;
    k = 0;
    l = 0;
    /* FIRST */
    for (i = 0, l++; i &lt; 10; i++, k++)
        for (j = 0, l++; j &lt; 100; j++, k++)
            ;
    // printf("First Loop: %d\t%d\n", k, l);
    System.out.println(k);
    System.out.println(l);

    k = 0;
    l = 0;
    /* SECOND */
    for (i = 0, l++; i &lt; 100; i++, k++)
        for (j = 0, l++; j &lt; 10; j++, k++)
            ;
    // printf("Second Loop: %d\t%d\n", k, l);
    System.out.println(k);
    System.out.println(l);
}
</code></pre>

<p>output is : 1010, 11, 1100, 101</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Min & Max in an Array Using Minimum Comparisons]]></title>
    <link href="http://okckd.github.io/blog/2014/07/29/Find-Min-Max-in-Array/"/>
    <updated>2014-07-29T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/29/Find-Min-Max-in-Array</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.programcreek.com/2014/02/find-min-max-in-an-array-using-minimum-comparisons/">link</a></p>

<blockquote><p>Given an array of integers find the maximum and minimum elements by using minimum comparisons.</p></blockquote>

<h3>Solution</h3>

<p><strong><a href="http://www.geeksforgeeks.org/maximum-and-minimum-in-an-array/">Compare in Pairs</a></strong>.</p>

<ol>
<li>If n is odd then initialize min and max as first element.</li>
<li>If n is even then initialize min and max as minimum and maximum of the first two elements respectively.</li>
<li>For rest of the elements, pick them in pairs and compare their maximum and minimum with max and min respectively.</li>
</ol>


<p>Number of comparison is 1.5*n.</p>

<p>There&rsquo;s also a <strong>Tournament Method</strong> from G4G, but the implementation is a bit difficult.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>public static void minmax2(int[] a) {
    if (a == null || a.length &lt; 1)
        return;

    int min, max;

    // if only one element
    if (a.length == 1) {
        max = a[0];
        min = a[0];
        System.out.println("min: " + min + "\nmax: " + max);
        return;
    }

    if (a[0] &gt; a[1]) {
        max = a[0];
        min = a[1];
    } else {
        max = a[1];
        min = a[0];
    }

    for (int i = 2; i &lt;= a.length - 2;) {
        if (a[i] &gt; a[i + 1]) {
            min = Math.min(min, a[i + 1]);
            max = Math.max(max, a[i]);
        } else {
            min = Math.min(min, a[i]);
            max = Math.max(max, a[i + 1]);
        }

        i = i + 2;
    }

    if (a.length % 2 == 1) {
        min = Math.min(min, a[a.length - 1]);
        max = Math.max(max, a[a.length - 1]);
    }

    System.out.println("min: " + min + "\nmax: " + max);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Construct a BST From Preorder Traversal]]></title>
    <link href="http://okckd.github.io/blog/2014/07/29/Construct-BST-from-preorder/"/>
    <updated>2014-07-29T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/29/Construct-BST-from-preorder</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/g-fact-17/">link</a></p>

<blockquote><p>Given preorder, construct the BST.</p></blockquote>

<h3>Solution</h3>

<p>We can get <strong>Inorder traversal</strong> by sorting the given Preorder traversal. So we have the required two traversals to construct the Binary Search Tree.</p>

<p>A very similar approach would be <strong>always spliting the array</strong> by the head value. Time complexity is O(nlgn) for a balanced BST, or O(n<sup>2</sup>) for a screwed tree.</p>

<p><strong>Howver, there&rsquo;s <a href="http://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/">O(n) solutions</a></strong>.</p>

<blockquote><p>The trick is to set a range {min .. max} for every node. Initialize the range as {INT_MIN .. INT_MAX}. The first node will definitely be in range, so create root node. To construct the left subtree, set the range as {INT_MIN …root->data}. If a values is in the range {INT_MIN .. root->data}, the values is part part of left subtree. To construct the right subtree, set the range as {root->data..max .. INT_MAX}.</p></blockquote>

<p>There&rsquo;s another <strong><a href="http://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversal-set-2/">O(n) solution</a> using stack</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Matching Nuts and Bolts]]></title>
    <link href="http://okckd.github.io/blog/2014/07/28/Matching-Nuts-And-Bolts/"/>
    <updated>2014-07-28T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/28/Matching-Nuts-And-Bolts</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2011/01/nuts-and-bolts-algorithm.html">link</a></p>

<blockquote><p>You are given a collection of nuts of different size and corresponding bolts. You can choose any nut &amp; any bolt together, from which you can determine whether the nut is larger than bolt, smaller than bolt or matches the bolt exactly. However there is no way to compare two nuts together or two bolts together. Suggest an algorithm to match each bolt to its matching nut.</p></blockquote>

<h3>Analysis</h3>

<p>Use the idea of quicksort. Find pivot and divide.</p>

<h3>Solution</h3>

<ol>
<li>Take a nut from the nuts pile</li>
<li>Divide bolts around it in 2 parts, which are smaller and larger than this.</li>
<li>Find a matching bolt to this nut.</li>
<li>Divide nuts in 2 parts, which are smaller and larger than matching bolt.</li>
</ol>


<p>Now we have 2 subsets of Nuts and Bolts.</p>

<p>At every step, we will be able to divide these piles in 2 halves and reduce complexity by a factor of 2.</p>

<p><strong>Average case time complexity will be O(nlogn)</strong>, but O(n<sup>2</sup>) when pivot is selection poor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Check if Number Exists]]></title>
    <link href="http://okckd.github.io/blog/2014/07/28/Check-Number-Exists/"/>
    <updated>2014-07-28T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/28/Check-Number-Exists</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2011/02/check-if-number-exist.html">link</a></p>

<blockquote><p>There is long list of natural numbers. Remove every 2nd no from list in 1st pass. Remove every 3rd no from list in 2nd pass. Find whether Nth natural no will exist after P passes. N and P are inputs.</p></blockquote>

<pre><code>Example: N is 15 and p is 3.
Initial: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
After 1st pass: 1 3 5 7 9 11 13 15 17 19
After 2nd pass: 1 3 7 9 13 15 19
After 3rd pass: 1 3 7 13 15 19
After 4th pass: 1 3 7 13 19
</code></pre>

<blockquote><p>So we see that 15 exists after 3 passes but vanishes after 4th pass.</p></blockquote>

<h3>Analysis</h3>

<p>We see that in any of the pass <strong>new position will be decreased by no of elements deleted</strong> between 1 and current position.</p>

<p>Example: originally number is 15. After 1st pass, it becomes 8th element. After 2nd pass, it becomes 8 &ndash; (8 / 3) = 6th element.</p>

<p>We stop when either P(i-1)/(i+1) is an integer, or when number is smaller than pass.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>bool check_posiiton(int n, int p)  
{  
 int cur = n;  
 int i = 0;  
 while (i &lt;= p)  
 {  
     i++;  
     if (cur%(i+1) == 0)  
     {  
         //Vanishes in this pass  
         return false;  
     }  
     else if (cur &lt; (i+1))  
     {  
         //Number exist denominator is greater than numerator  
         return true;  
     }  
     cur = cur - cur/(i+1);  
 }  
 return true;  
}  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Breaking Chocolate Bars]]></title>
    <link href="http://okckd.github.io/blog/2014/07/28/Breaking-Chocolate-Bars/"/>
    <updated>2014-07-28T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/28/Breaking-Chocolate-Bars</id>
    <content type="html"><![CDATA[<h3>Game #1</h3>

<p><a href="http://www.cut-the-knot.org/proofs/chocolad.shtml">link</a></p>

<blockquote><p>Two players take turns breaking a chacolate bar (rectangle-shaped consist of squares). The last to break a piece wins the game.</p>

<p>Design the strategy.</p></blockquote>

<h4>Solution</h4>

<p>Each time the bar is broken, <strong>total number of pieces increase by 1</strong>. Suppose there&rsquo;re even number of squares, 1st player wins regardless of breaking strategy. And vice versa.</p>

<h3>Problem #2</h3>

<p><a href="http://www.cut-the-knot.org/proofs/chocolad.shtml">link</a></p>

<blockquote><p>75 teams took part in a competition where teams met 1-on-1. Each time the defeated team drops out.</p>

<p>How many meets are needed to before one team is declared a winner?</p></blockquote>

<h4>Solution</h4>

<p>Each game will eliminate 1 game, so it needs 74 games.</p>

<h3>Splitting Piles</h3>

<p><a href="http://www.cut-the-knot.org/arithmetic/rapid/piles.shtml">link</a></p>

<blockquote><p>Given a random number of items in a pile. Ask an audience to split a pile into two piles, multiply the numbers of items in the two new piles and keep adding the results. The process stops when there is no pile with more than 1 chip.</p>

<p>For example, let start with 9 chips:</p></blockquote>

<table cellpadding="10">
<tbody><tr><td align="center">Piles</td><td align="center">Which is broken</td><td align="center">What&#8217;s added</td><td align="center">Total</td></tr>
<tr><td colspan="4"><hr></td></tr>
<tr><td align="center">9</td><td align="center">9</td><td align="center">3*6</td><td align="center">18</td></tr>
<tr><td align="center">3,6</td><td align="center">3</td><td align="center">1*2</td><td align="center">20</td></tr>
<tr><td align="center">1,2,6</td><td align="center">6</td><td align="center">3*3</td><td align="center">29</td></tr>
<tr><td align="center">1,2,3,3</td><td align="center">3</td><td align="center">1*2</td><td align="center">31</td></tr>
<tr><td align="center">1,2,1,2,3</td><td align="center">2</td><td align="center">1*1</td><td align="center">32</td></tr>
<tr><td align="center">1,1,1,1,2,3</td><td align="center">2</td><td align="center">1*1</td><td align="center">33</td></tr>
<tr><td align="center">1,1,1,1,1,1,3</td><td align="center">3</td><td align="center">1*2</td><td align="center">35</td></tr>
<tr><td align="center">1,1,1,1,1,1,1,2</td><td align="center">2</td><td align="center">1*1</td><td align="center"><b>36</b></td></tr>
<tr><td align="center">1,1,1,1,1,1,1,1,1</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr>
</tbody></table>


<blockquote><p>Before the audience told the final number, you immediately guess it&rsquo;s 36. How did you do it?</p></blockquote>

<h4>Solution</h4>

<p>The result does not depend on how the piles are split; but only on the initial size of the very first pile. <strong>Answer is always N(N &ndash; 1)/2</strong>.</p>

<p>This can be proved by <a href="http://www.cut-the-knot.org/arithmetic/rapid/piles.shtml">mathematical induction</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode Plus] Sliding Window Maximum]]></title>
    <link href="http://okckd.github.io/blog/2014/07/27/Sliding-Window-Maximum/"/>
    <updated>2014-07-27T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/27/Sliding-Window-Maximum</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://leetcode.com/2011/01/sliding-window-maximum.html">link</a></p>

<blockquote><p>A long array A[] is given to you. There is a sliding window of size w which is moving from the very left of the array to the very right. You can only see the w numbers in the window. Each time the sliding window moves rightwards by one position. Following is an example:
The array is [1 3 -1 -3 5 3 6 7], and w is 3.</p></blockquote>

<pre><code>Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
</code></pre>

<blockquote><p>Input: A long array A[], and a window width w</p>

<p>Output: An array B[], B[i] is the maximum value of from A[i] to A[i+w-1]</p></blockquote>

<h3>Analysis</h3>

<p><strong>The  naive approach is using a Heap</strong>. This time complexity is O(n*logn). However, there is a better way using a (double-ended) queue.</p>

<p><strong>We do not need to <a href="http://n00tc0d3r.blogspot.sg/2013/04/sliding-window-maximum.html">keep all numbers</a></strong>. For example, suppose numbers in a window of size 4 are (1, 3, -1, 2). Obviously, no matter what next numbers are, 1 and -1 are never going to be a maximal as the window moving. The queue should look like (3, 2) in this case.</p>

<h3>Solution</h3>

<ol>
<li>When moves to a new number, iterate through back of the queue, removes all numbers that are not greater than the new one, and then insert the new one to the back.</li>
<li>FindMax only need to take the first one of the queue.</li>
<li>To remove a number outside the window, only compare whether the current index is greater than the front of queue. If so, remove it.</li>
</ol>


<p><a href="http://leetcode.com/2011/01/sliding-window-maximum.html">A natural way</a> most people would think is to try to maintain the queue size the same as the window’s size. Try to break away from this thought and think out of the box.</p>

<h3>Code</h3>

<p>Code by N00tc0d3r.</p>

<pre><code>public int[] windowMax(int[] nums, int window) {
    int w = (nums.length &lt; window) ? nums.length : window;
    // A deque allows insertion/deletion on both ends.
    // Maintain the first as the index of maximal of the window
    // and elements after it are all smaller and came later than the first.
    Deque&lt;Integer&gt; que = new ArrayDeque&lt;Integer&gt;();

    // initialize window
    int i = 0;
    while (i &lt; w) {
        while (!que.isEmpty() &amp;&amp; nums[que.getLast()] &lt;= nums[i]) {
            que.removeLast();
        }
        que.addLast(i++);
    }

    // sliding window
    int[] max = new int[nums.length - w + 1];
    max[i - w] = que.getFirst();
    while (i &lt; nums.length) {
        // add new element
        while (!que.isEmpty() &amp;&amp; nums[que.getLast()] &lt;= nums[i]) {
            que.removeLast();
        }
        que.addLast(i);
        // remove old element if still in que
        if (!que.isEmpty() &amp;&amp; i - w &gt;= que.getFirst()) {
            que.removeFirst();
        }
        // get maximal
        ++i;
        max[i - w] = que.getFirst();
    }

    return max;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Reconstruct Tree From Pre-Order Traversal]]></title>
    <link href="http://okckd.github.io/blog/2014/07/27/Reconstruct-Tree-From-PreOrder-Traversal/"/>
    <updated>2014-07-27T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/27/Reconstruct-Tree-From-PreOrder-Traversal</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2011/06/reconstruct-tree-from-pre-order.html">link</a></p>

<blockquote><p>A tree has a special property where leaves are represented with ‘2’ and non-leaf with ‘1’. Each node has either 0 or 2 children. If given preorder traversal of this tree, construct the tree.</p>

<p>Example: Given Pre Order string => 12122, output:</p></blockquote>

<pre><code>       1
      / \
     2   1
        / \
       2   2
</code></pre>

<h3>Analysis</h3>

<blockquote><p><a href="http://tech-queries.blogspot.sg/2011/06/reconstruct-tree-from-pre-order.html">In normal scenario</a>, it’s not possible to detect where left subtree ends and right subtree starts using only pre-order traversal. But here, we are given a special property. Since every node has either 2 children or no child, we can surely say that if a node exists then its sibling also exists.</p></blockquote>

<p>Keep a public variable and build the tree recursively until the list finishes.</p>

<h3>Code</h3>

<pre><code>ListNode list = null; // this is the input list public variable

public TreeNode main(ListNode input) {
    list = input;
    return constructTree();
}

private TreeNode constructTree() {
    if (list == null) {
        return null;
    }
    TreeNode root = new TreeNode(list.val);
    list = list.next;

    if (root.val == 1) {
        root.left = constructTree();
        root.right = constructTree();
    }
    return root;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Knapsack Problem With Duplications]]></title>
    <link href="http://okckd.github.io/blog/2014/07/27/Knapsack-problem-with-duplication/"/>
    <updated>2014-07-27T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/27/Knapsack-problem-with-duplication</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2011/04/integer-knapsack-problem-duplicate.html">link</a></p>

<blockquote><p>You have n types of items, where the ith item type has an integer size si and a real value vi. You need to ﬁll a knapsack of total capacity C with a selection of items of maximum value. You can add multiple items of the same type to the knapsack.</p>

<p>This is similar to &ldquo;0-1 Knapsack Problem&rdquo;, but duplication is allowed for this question.</p></blockquote>

<h3>Analysis</h3>

<p>Of course this is DP, and it&rsquo;s 1-D DP. However, <strong>there is one very tricky special case</strong>.</p>

<h3>Solution</h3>

<p>Using &rsquo;M(j)&lsquo; to denote the max value for total weight j, &#8216;w&rsquo; to denote weight, and &lsquo;v&rsquo; to denote value, the equation is:</p>

<blockquote><p>M(j) = max{M(j − 1), max(i=1&hellip;n) M(j − wi) + vi}</p></blockquote>

<p><strong>Note the 2 cases are</strong>:</p>

<ol>
<li>when (j)th spot is not filled, the max value is <strong>M(j-1)</strong></li>
<li>when (j)th spot is filled, the max value is <strong>max(i=1&hellip;n) M(j − wi) + vi</strong></li>
</ol>


<p>This question is trickier than &ldquo;0-1 Knapsack Problem&rdquo;, if not more difficult. <strong>Study the 2 question together</strong>.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>int knapsack(int value[], int weight[], int n, int C, vector&lt;int&gt; backtrack) {
 int *M = new int[C+1];  
 int i, j, tmp, pos;  
 for(i=1; i&lt;= C; i++) {  
     M[i] = M[i-1];  
     pos = i-1;               
     for(j=0; j&lt; n; j++)  
     {  
         if (i &gt;= weight[j])  
             tmp = M[i-weight[j]] + value[j];  
         if (tmp &gt; M[i]){  
             M[i] = tmp;  
             pos = i - weight[j];  
         }  
     }  
     backtrack.push_back(pos);  
 }   
 int ans = M[C];  
 delete[] M;        
 return ans;  
}  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Fit 1*2 Dominos in 2*N Strip]]></title>
    <link href="http://okckd.github.io/blog/2014/07/27/Fit-dominos-in-strip/"/>
    <updated>2014-07-27T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/27/Fit-dominos-in-strip</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2011/07/fit-12-dominos-in-2n-strip.html">link</a></p>

<blockquote><p>In how many ways can one tile a 2 X N strip of square cells with 1 X 2 dominos?</p></blockquote>

<p><img class="left" src="http://okckd.github.io/assets/images/Dominos.png"></p>

<h3>Solution</h3>

<p><strong>X(n+1) = X(n) + X(n-1)</strong></p>

<p>It&rsquo;s a Fibonacci Series with X(1) = 1 and X(2) = 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Elephant and Bananas]]></title>
    <link href="http://okckd.github.io/blog/2014/07/27/Elephant-And-Bananas/"/>
    <updated>2014-07-27T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/27/Elephant-And-Bananas</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2011/04/elephant-and-banana.html">link</a></p>

<blockquote><p>There&rsquo;s a elephant, which can carry max 1000 bananas. The elephant eats a banana every 1 Km (both forward and back).</p>

<p>Now we want to transfer 3000 bananas to a place 1000 Km away. How many bananas can be left?</p>

<p>Also solved to generalized problem (write code for solution).</p></blockquote>

<h3>Analysis</h3>

<p><strong>If we subdivide distances for each kilometer</strong>. Notice if elephant wants to shift all the bananas 1 km, <strong>you will loose 5 bananas every km</strong>.</p>

<p>So we transferred 2995 (998+998+999) to one km distance. This process continues until after 200 km, we have only 2000 bananas left with remaining distance of 800 km.</p>

<p><strong>Start from here, we only loose 3 bananas every km</strong>. This goes on for another 334 km, we will have 998 bananas left, and the rest of the bananas can be transfered in a single journey.</p>

<h3>Solution</h3>

<p><strong>532 bananas</strong>.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>double transferBananas(double N, double D, double C, double F) {  
    // base case: remaining bananas &lt;= C,  
    // so carry all the bananas in one trip  
    // at this point if distance is more than N/F,  
    // elephant can never reach destination, return 0  
    if (N &lt;= C) {
        double bananasAtDestination = N - D*F;  
        return (bananasAtDestination &gt;= 0.0) ?  
            bananasAtDestination :  0.0;    // out of bananas!  
    }  

    // # trips you would travel back and forth  
    int numTrips = 2*(ceil(N/C) - 1) + 1;  

    // how many bananas you consume per km  
    double costPerKm = numTrips * F;  

    // remaining number of bananas after consumption, we want it  
    // as an integer multiple of C.  
    double remainingBananas = C*(ceil(N/C) - 1.0);  

    // this is the distance you are able to travel before you  
    // reach ONE LESS round trip fetching bananas  
    // derived from eq: N - costPerKm * traveled = remaining bananas  

    double traveled = (N - remainingBananas) / costPerKm;  

    // we are able to travel greater (or equal) than the remaining  
    // distance, so fetch the bananas right to the destination  
    if (traveled &gt;= D)
        return N - D*costPerKm;  

    // calculate recursively as we travel ONE less round trip now.  
    return transferBananas(remainingBananas, D-traveled, C, F);  
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode Plus] Coins in a Line]]></title>
    <link href="http://okckd.github.io/blog/2014/07/27/Coins-in-Line/"/>
    <updated>2014-07-27T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/27/Coins-in-Line</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://leetcode.com/2011/02/coins-in-line.html">link</a></p>

<blockquote><p>There are n coins in a line. Two players take turns to take a coin from one of the ends of the line until there are no more coins left. The player with the larger amount of money wins. Assume that you go first, describe an algorithm to compute the maximum amount of money you can win.</p></blockquote>

<h3>Analysis</h3>

<p><strong>There&rsquo;s a guaranteed &lsquo;win strategy&rsquo;</strong>, if the input array is even size. Find the sum of coins at even and odd positions respectively. Then, make sure you always take coin from even (or odd, whichever sum is bigger) position.</p>

<p>This strategy is clever and simple, but <strong>DOES NOT maximize your total sum</strong>.</p>

<h3>Solution</h3>

<p><strong>The optimized solution is to use <a href="http://tech-queries.blogspot.sg/2011/06/get-maximum-sum-from-coins-in-line.html">2-D DP</a></strong>. Now we have array A and C(i, j) which is the maximum sum possible when remaining coins are from i to j.</p>

<p>You can take either i or j. Since the opponent is as smart as you, he would have chosen the choice that yields the minimum amount to you.</p>

<p>So, the final equation is:</p>

<blockquote><p>C(i, j) = max { Ai + min{C(i+2, j), C(i+1, j-1)}, Aj + min{C(i+1, j-1), C(i, j-2)} }</p></blockquote>

<h3>Code</h3>

<p>C++ code</p>

<pre><code>#define MAX 100  
int maxMoney(int A[], int N) {
    int C[MAX][MAX] = {0};  
    int x, y, z; //x = C[m+2][n], y = C[m+1][n-1], z = C[m][n-2]  
    for (int i = 0; i &lt; N; i++) {
        for (int m = 0, n = i; n &lt; N; m++, n++) {
          //calculate x, y, z  
          x = (m+2 &lt; N)                         ? C[m+2][n] : 0;  
          y = (m+1 &lt; N &amp;&amp; n-1 &gt;= 0)    ? C[m+1][n-1] : 0;  
          z = (n-1 &gt; 0)                            ? C[m][n-2] : 0;  
          C[m][n] = max(A[m] + min(x,y),  
                                 A[n] + min(y,z));  
          //For Debugging        
          cout &lt;&lt; x &lt;&lt; ", " &lt;&lt; y &lt;&lt; ", " &lt;&lt; z &lt;&lt; endl;  
          cout &lt;&lt; m &lt;&lt; ", " &lt;&lt; n &lt;&lt; ", " &lt;&lt; C[m][n] &lt;&lt; endl;  
        }
    }
    return C[0][N-1];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Truth Tell Brain Teaser]]></title>
    <link href="http://okckd.github.io/blog/2014/07/26/True-tell-brain-teaser/"/>
    <updated>2014-07-26T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/26/True-tell-brain-teaser</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2011/07/truth-or-lie.html">link</a></p>

<blockquote><p>There are 100 people in a room. A person always speaks either lie or truth.</p>

<p>When asked:</p></blockquote>

<pre><code>1st person says =&gt; all are liars
2nd person says =&gt; at most 1 speaks truth
3rd person says =&gt; at most 2 speak truth
4th person says =&gt; at most 3 speak truth
.
.
.
100th person says =&gt; at most 99 speak truth
</code></pre>

<blockquote><p>&ldquo;At most N&rdquo; means &ldquo;there&rsquo;re N or less than N&rdquo;.</p>

<p>How many people speak only truth?</p></blockquote>

<h3>Solution</h3>

<ol>
<li></li>
<li><p>Assume 1st person speaks truth, then all including him should be liar. It means he doesn’t speak truth.</p></li>
<li><p>Assume 2nd person speaks truth, then he is the only person who speaks truth. But if this statement is true then statements by all others are also true. I.e. if “at most 1 person speaks truth” is true then “at most N speak truth” is also true. So person 2 is also a liar.</p></li>
<li><p>Assume 3rd person is speaking truth. But then the statements of person 4-100 are also true, which contradicts his own statement. It means that person 3 is also a liar.</p></li>
<li><p>This process will continue since 50th person. So 1-50 people are liars.</p></li>
<li><p>51st person says “at most 50 speak truth”. Lets say he is speaking truth. “at most 50” means any number from 0-50. It means that statements like “at most 51 speak truth” and “at most 70 speak truth” are also true. It means that people from 51 to 100 are speaking truth.</p></li>
</ol>


<p><strong>Hence, 50 people speak truth</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[General] Test Number Divisibility]]></title>
    <link href="http://okckd.github.io/blog/2014/07/26/Test-Number-Divisibility/"/>
    <updated>2014-07-26T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/26/Test-Number-Divisibility</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mathsisfun.com/divisibility-rules.html">link</a></p>

<blockquote><p>Pay attention on Number 3, 7, 9 and 11.</p></blockquote>

<h3>The Divisibility Rules</h3>

<table border="0" align="center" style='border:1px solid black'>
                                <tbody><tr align="center">
                                    <th width="100" class="bg-color bg-img font-color">Divisible by:</th>
                                    <th width="300" class="bg-color bg-img font-color">If:</th>
                                    <th width="300" class="bg-color bg-img font-color">Examples:</th>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">2</td>
                                    <td class="bg-color bg-img font-color">The last digit is even (0,2,4,6,8)</td>
                                    <td class="bg-color bg-img font-color">12<b>8</b> is<br>
                                    12<b>9</b> is not                               </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">3</td>
                                    <td class="bg-color bg-img font-color">The sum of the digits is divisible by 3</td>
                                    <td class="bg-color bg-img font-color">
                                        <p class="font-color">381 (3+8+1=12, and 12÷3 = 4) <b>Yes</b><br>
                                    </p>
                                        <p class="font-color">217 (2+1+7=10, and 10÷3 = 3&nbsp;<span class="frac font-color"><sup>1</sup>/<sub>3</sub></span>) <b>No</b></p>                                   </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">4</td>
                                    <td class="bg-color bg-img font-color">The last 2 digits are divisible by 4</td>
                                    <td class="bg-color bg-img font-color">
                                        <p class="font-color">13<b>12</b> is<b></b> (12÷4=3)<br>
                                    70<b>19</b> is not </p>                               </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">5</td>
                                    <td class="bg-color bg-img font-color">The last digit is 0 or 5</td>
                                    <td class="bg-color bg-img font-color">17<b>5</b> is<br>
                                    80<b>9</b> is not                               </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">6</td>
                                    <td class="bg-color bg-img font-color">The number is divisible by both 2 <i>and</i> 3</td>
                                    <td class="bg-color bg-img font-color">
                                        114 (it is even, and 1+1+4=6 and 6÷3 = 2) <b>Yes</b><br>
                                        <br>
                                        308 (it is even, but 3+0+8=11 and 11÷3 = 3&nbsp;<span class="frac font-color"><sup>2</sup>/<sub>3</sub></span>) <b>No</b>                                  </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">7</td>
                                    <td class="bg-color bg-img font-color">If you double the last digit and subtract it from the rest of the number and 
                                      the answer  is:
                                      <ul class="bg-color bg-img font-color">
                                        <li><b>0</b>, or </li>
                                        <li><b>divisible by 7</b></li>
                                  </ul>
                                      (Note: you can apply this rule to that answer again if you want)</td>
                                    <td class="bg-color bg-img font-color">
                                        <p class="font-color">672 (Double 2 is 4, 67-4=63, and 63÷7=9) <b>Yes</b></p>
                                        <p class="font-color">905 (Double 5 is 10, 90-10=80, and 80÷7=11&nbsp;<span class="frac font-color"><sup>3</sup>/<sub>7</sub></span>) <b>No<br>
                                      </b></p>                                  </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">8</td>
                                    <td class="bg-color bg-img font-color">The last three digits are divisible by 8</td>
                                    <td class="bg-color bg-img font-color">
                                        <p class="font-color">109<b>816</b> (816÷8=102) <b>Yes</b></p>
                                        <p class="font-color">216<b>302</b> (302÷8=37&nbsp;<span class="frac font-color"><sup>3</sup>/<sub>4</sub></span>) <b>No</b></p>                                   </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">9</td>
                                    <td class="bg-color bg-img font-color">The sum of the digits is divisible by 9<br>
                                      <br>
                                  (Note: you can apply this rule to that answer again if you want)</td>
                                    <td class="bg-color bg-img font-color">
                                        <p class="font-color">1629 (1+6+2+9=18, and again, 1+8=9) <b>Yes</b></p>
                                        <p class="font-color">2013 (2+0+1+3=6) <b>No</b></p>                                  </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">10</td>
                                    <td class="bg-color bg-img font-color">The number ends in 0</td>
                                    <td class="bg-color bg-img font-color">
                                        <p class="font-color">22<b>0</b> is<br>
                                            22<b>1</b> is not                                     </p>                                </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center">11</td>
                                    <td class="bg-color bg-img font-color"><p class="font-color">If you sum every second digit and then subtract all other digits and the answer  is:</p>
                                      <ul class="bg-color bg-img font-color">
                                        <li><b>0</b>, or </li>
                                        <li><b>divisible by 11</b></li>
                      </ul>                                 </td>
                                    <td class="bg-color bg-img font-color">
                                        <p class="font-color">1<b>3</b>6<b>4</b> ((3+4) - (1+6) = <b>0</b>) <b>Yes</b></p>
                                        <p class="font-color">3<b>7</b>2<b>9</b> ((7+9) - (3+2) = <b>11</b>) <b>Yes</b></p>
                                      <p class="font-color">2<b>5</b>1<b>7</b>6 ((5+7) - (2+1+6) = <b>3</b>) <b>No</b></p>                                </td>
                                </tr>
                                <tr>
                                    <td class="large bg-color bg-img font-color" align="center" height="16">12</td>
                                    <td height="16" class="bg-color bg-img font-color">The number is divisible by both 3 <i><b>and</b></i> 4</td>
                                    <td height="16" class="bg-color bg-img font-color">
                                        <p class="font-color">648 <br>
                                        (<i>By 3?</i> 6+4+8=18 and 18÷3=6 Yes. <br>
                                        <i>By 4?</i> 48÷4=12 Yes) <b>Yes</b></p>
                                        <p class="font-color">524 <br>
                                        (<i>By 3?</i> 5+2+4=11, 11÷3= 3&nbsp;<span class="frac font-color"><sup>2</sup>/<sub>3</sub></span> No. <br>
                                        Don&#8217;t need to check by 4.) <b>No</b></p>
</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Random Number Generate Question]]></title>
    <link href="http://okckd.github.io/blog/2014/07/26/Random-number-generate-question/"/>
    <updated>2014-07-26T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/26/Random-number-generate-question</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=12426697">link</a></p>

<blockquote><p>Given a RNG r(5) which generates number between 1-5 uniformly, make r(7) which generates random number between 1-7.</p></blockquote>

<h3>Solution</h3>

<pre><code>int rand7() {
    int r = 0;
    do {
        int a = rand(5) - 1;    //uniformly at random from 0 to 4
        int b = rand(5) - 1;
        r = 5 * b + a;            //uniformly at random from 0 to 24
    }
    while (r &gt;= 21);            // in this event, we have to roll again
    return r % 7 + 1; 
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[General] Multithreading Q&A]]></title>
    <link href="http://okckd.github.io/blog/2014/07/26/Multithreading-Q-and-A/"/>
    <updated>2014-07-26T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/26/Multithreading-Q-and-A</id>
    <content type="html"><![CDATA[<h2>General Q &amp; A</h2>

<p><a href="http://www.geeksforgeeks.org/mutex-vs-semaphore/">source</a></p>

<h4>Can a thread acquire more than one lock (Mutex)?</h4>

<p>Yes, if they need more resource.</p>

<h4>Can a mutex be locked more than once?</h4>

<p>Unless it&rsquo;s a recursive mutex, no.</p>

<p>A mutex is a lock.</p>

<h4>What happens if a non-recursive mutex is locked more than once?</h4>

<p>Deadlock.</p>

<p>Trying to lock the mutex again, it will enter into the waiting queue. But no other thread can unlock that mutex.</p>

<h4>Are binary semaphore and mutex same?</h4>

<p>No. One is <strong>signalling</strong>, another is <strong>locking mechanism</strong>.</p>

<p>A semaphore is <a href="http://stackoverflow.com/a/2350628">more general concept</a> than mutex. A mutex is (almost) a special case of a semaphore.</p>

<h4>Why use mutex and critical section?</h4>

<p>Critical section is group of instructions that need to be executed atomically.</p>

<p>The objective of mutex is atomic access of critical section.</p>

<h4>Can we acquire mutex/semaphore in an Interrupt Service Routine?</h4>

<p>Yes, but very bad practise.</p>

<p>The ISR are meant be short, the call to mutex/semaphore may block the current running thread. However, an ISR can signal a semaphore or unlock a mutex.</p>

<h4>What is thread blocking on mutex/semaphore?</h4>

<p>When the resource is not available, the requesting thread will be moved from the running list of processor to the waiting list of the synchronization primitive.</p>

<p>When the resource is available, the higher priority thread on the waiting list will get resource (more precisely, it depends on the scheduling policies).</p>

<h4>Is it necessary that a thread must block when resource is not available?</h4>

<p>No.</p>

<p>If the design is sure ‘what has to be done when resource is not available‘, the thread can take up that work (a different code branch). To support, application requirements the OS provides non-blocking API.</p>

<h2>Google interview questions</h2>

<p><a href="http://www.chiefdelphi.com/forums/showthread.php?p=983786">source</a></p>

<h4>What is the difference between a mutex and a semaphore? Which one would you use to protect access to an increment operation?</h4>

<p><a href="http://www.jacopretorius.net/2010/12/google-interview-questions-and-answers.html">A mutex</a> is used when only one thread or process is allowed to access a resource and a semaphore is used when only a certain set limit of threads or processes can access the shared resource.</p>

<p>It looks like a mutex is a binary semaphore. <strong>But the expected answer is mutex</strong>.</p>

<p><strong><a href="http://www.chiefdelphi.com/forums/showthread.php?p=983786">A big differences</a> is that mutexes have the concept of &ldquo;ownership&rdquo;</strong>. Only the thread that owns the mutex (i.e. was the thread that originally claimed the mutex) can give it up. If another thread tries to free the mutex, this will cause an error. With semaphores, basically any thread is allowed to manipulate them.</p>

<h4>What is multithreaded programming? What is a deadlock?</h4>

<p><a href="http://www.programsquare.com/2011/05/what-is-multithreaded-programming-what.html">Multithreading</a> as a widespread programming and execution model allows multiple threads to exist within the context of a single process.</p>

<p>These threads share the process&#8217; resources but are able to execute independently.</p>

<p><strong>Deadlock refers to a specific condition when two or more processes are each waiting for the other to release a resource</strong>, or more than two processes are waiting for resources in a circular chain</p>

<p>In an operating system, a <a href="http://en.wikipedia.org/wiki/Deadlock">deadlock is a situation</a> which occurs when a process or thread enters a waiting state because a resource requested is being held by another waiting process, which in turn is waiting for another resource.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Top K Smallest Element]]></title>
    <link href="http://okckd.github.io/blog/2014/07/25/Top-k-Smallest-Element/"/>
    <updated>2014-07-25T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/25/Top-k-Smallest-Element</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/">link</a></p>

<blockquote><p>Find Top k smallest element in an array.</p></blockquote>

<h3>Analysis</h3>

<p>There&rsquo;re 2 solutions.</p>

<p>First solution, <strong>use a max-heap</strong>. O(nlgk) time complexity.</p>

<p>Second solution is called <strong><a href="http://www.geekviewpoint.com/java/search/quickselect">quick select</a></strong>, a type of <a href="http://en.wikipedia.org/wiki/Selection_algorithm">selection algorithm</a> that&rsquo;s based on quicksort. It&rsquo;s averaging O(n) time, but O(n<sup>2</sup>) if pivot selection is poor. The code is posted below. There&rsquo;s also a similar <a href="http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html">iterative solution</a>.</p>

<p>To <a href="http://www.isnowfy.com/top-k-number/">further optimize this</a>, we can change the pivot selection method by dividing into k group and find median of each. This is called <a href="http://en.wikipedia.org/wiki/Median_of_medians">Median of medians algorithm</a>. The worst case is O(n) time. And this is the best solution for &ldquo;Top k&rdquo; questions.</p>

<h3>Code</h3>

<p><strong>quick select</strong></p>

<pre><code>public static void quickSelect1(int[] list, int k) {
    selectHelper1(list, 0, list.length - 1, k);
}

public static void selectHelper1(int[] list, int left, int right, int k) {
    int pivotIndex = partition(list, left, right);
    if (pivotIndex == k) {
        return;
    } else if (k &lt; pivotIndex) {
        selectHelper1(list, left, pivotIndex - 1, k);
    } else {
        selectHelper1(list, pivotIndex + 1, right, k);
    }
}

private static int partition(int[] list, int left, int right) {
    int pivot = left + (right - left) / 2;
    swap(list, right, pivot);
    for (int i = left; i &lt; right; i++) {
        if (list[i] &lt; list[right]) {
            swap(list, i, left);
            left++;
        }
    }
    swap(list, left, right);
    return left;
}
</code></pre>

<p><strong>quick select, iteratively</strong></p>

<pre><code>public static int quickSelect2(int[] arr, int k) {
    if (arr == null || arr.length &lt;= k)
        throw new Error();
    int from = 0, to = arr.length - 1;
    // if from == to we reached the kth element
    while (from &lt; to) {
        int r = from, w = to;
        int mid = arr[(r + w) / 2];
        // stop if the reader and writer meets
        while (r &lt; w) {
            if (arr[r] &gt;= mid) { // put the large values at the end
                swap(arr, w, r);
                w--;
            } else { // the value is smaller than the pivot, skip
                r++;
            }
        }
        // if we stepped up (r++) we need to step one down
        if (arr[r] &gt; mid)
            r--;
        // the r pointer is on the end of the first k elements
        if (k &lt;= r) {
            to = r;
        } else {
            from = r + 1;
        }
    }
    return arr[k];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Top K Queries]]></title>
    <link href="http://okckd.github.io/blog/2014/07/25/Top-k-Queries/"/>
    <updated>2014-07-25T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/25/Top-k-Queries</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/v_JULY_v/article/details/6256463">link</a></p>

<blockquote><p>搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。</p>

<p>假设目前有一千万个记录（这些查询串的重复度比较高，虽然总数是1千万，但如果除去重复后，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就是越热门。），请你统计最热门的10个查询串，要求使用的内存不能超过1G。</p></blockquote>

<h3>Analysis</h3>

<p>第一步：Query统计</p>

<p>第二步：根据统计结果，找Top 10</p>

<p>Be careful: 内存不能超过1G，10 million 条记录，每条记录是255Byte，很显然要占据2.375G内存.</p>

<h3>Query统计</h3>

<p><strong>HashMap</strong>.</p>

<p>虽然有一千万个Query，但是由于重复度比较高，因此事实上只有300万的Query，每个Query 255Byte，因此我们可以考虑把他们都放进内存中去。</p>

<p>Hash Table绝对是我们优先的选择，因为Hash Table的查询速度非常的快，几乎是O(1)的时间复杂度。我们在O(N)的时间复杂度内完成了对该海量数据的处理。</p>

<h3>找Top 10</h3>

<p><strong>Heap</strong>.</p>

<p>借助堆结构，我们可以在log量级的时间内查找和调整/移动。因此到这里，我们的算法可以改进为这样，维护一个K(该题目中是10)大小的小根堆，然后遍历300万的Query，分别和根元素进行对比。</p>

<p>查找目标元素的时间复杂度为 O(logK)。</p>

<h3>Conclusion</h3>

<p>至此，算法就完全结束了，经过上述第一步、先用Hash表统计每个Query出现的次数，O（N）；然后第二步、采用堆数据结构找出Top 10，N<em>O（logK）。所以，我们最终的时间复杂度是：O（N） + N&#8217;</em>O（logK）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[General] Semaphore Mutex Toilet Example]]></title>
    <link href="http://okckd.github.io/blog/2014/07/25/Semaphore-mutex-toilet-example/"/>
    <updated>2014-07-25T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/25/Semaphore-mutex-toilet-example</id>
    <content type="html"><![CDATA[<h2>Mutex vs. Semaphore</h2>

<p><strong>Mutex is a <a href="http://koti.mbnet.fi/niclasw/MutexSemaphore.html">key to a toilet</a></strong>. One person can have the key &ndash; occupy the toilet. When finished, the person gives (frees) the key to the next person in queue.</p>

<p>A mutex is really a semaphore with value 1.</p>

<p><strong>Semaphore is the number of free identical toilet keys</strong>. Example, say we have four toilets with identical locks and keys. The semaphore count is set to 4 at beginning, then the count decrease as people are coming in, etc.</p>

<h3>A mutex is not a binary semaphore</h3>

<p><strong>A mutex is <a href="http://www.geeksforgeeks.org/mutex-vs-semaphore/">locking mechanism</a></strong> used to synchronize access to a resource. Only one task can acquire the mutex.</p>

<p>It means there will be ownership associated with mutex, and only the owner can release the lock.</p>

<p><strong>Semaphore is signaling mechanism</strong> (&ldquo;I am done, you can carry on&rdquo; kind of signal).</p>

<p>For example, if you are listening songs (assume it as one task) on your mobile and at the same time your friend called you, an interrupt will be triggered upon which an interrupt service routine (ISR) will signal the call processing task to wakeup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find 10001st Prime Number]]></title>
    <link href="http://okckd.github.io/blog/2014/07/25/Find-10001st-prime/"/>
    <updated>2014-07-25T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/25/Find-10001st-prime</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/a/2493059">link</a></p>

<blockquote><p>Find 10001st Prime Number</p></blockquote>

<h3>Analysis</h3>

<p>Use <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a>, or 埃氏筛.</p>

<h3>Code</h3>

<pre><code>private static int get10001stPrime() {
    boolean[] sieveArray = new boolean[LIMIT];
    int primeCount = 0;
    int currentNum = 2;
    while (primeCount &lt; INDEX) {
        if (!sieveArray[currentNum]) {
            primeCount++;
            for (int i = currentNum; i &lt; LIMIT; i += currentNum) {
                sieveArray[i] = true;
            }
        }
        currentNum++;
    }
    return currentNum - 1;
}

// output: 10001th prime: 104743
</code></pre>
]]></content>
  </entry>
  
</feed>
