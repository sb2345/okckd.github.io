<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shuatiblog.com]]></title>
  <link href="www.shuatiblog.com/atom.xml" rel="self"/>
  <link href="www.shuatiblog.com/"/>
  <updated>2015-04-15T21:59:37+08:00</updated>
  <id>www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Minesweeper Algorithm ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/15/Minesweeper-algorithm/"/>
    <updated>2015-04-15T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/15/Minesweeper-algorithm</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>write a minesweeper algorithm with O(1) space usage</p>

<p>Input matrix is represented with 1 (mine) and 0(vacant space). Return true if all 0s are connected.</p></blockquote>

<p>  // 0 0 1
  // 0 1 0 ==> true
  // 0 0 0</p>

<p>  // 0 0 1
  // 0 1 0 => false
  // 1 0 0</p>

<h3>Solution</h3>

<p>We essentially will travel through the entire 0s-connected area. The first time we visit a node, we mark the node as &ldquo;2&rdquo;. The second time we visit, we mark it as &ldquo;3&rdquo;. If the end, check if all &ldquo;0&rdquo; are marked as 2.</p>

<h4>Example</h4>

<p>Given this input:</p>

<pre><code>0 0 0 1 0
0 1 1 1 1
0 0 0 0 1
0 1 1 0 1
0 0 1 0 1
</code></pre>

<p>The step by step illustration:</p>

<pre><code>Step #1
2 0 0 1 0
0 1 1 1 1
0 0 0 0 1
0 1 1 0 1
0 0 1 0 1

Step #2
2 0 0 1 0
2 1 1 1 1
0 0 0 0 1
0 1 1 0 1
0 0 1 0 1

Step #3
2 0 0 1 0
2 1 1 1 1
2 0 0 0 1
0 1 1 0 1
0 0 1 0 1

Step #4
2 0 0 1 0
2 1 1 1 1
2 0 0 0 1
2 1 1 0 1
0 0 1 0 1

Step #5
2 0 0 1 0
2 1 1 1 1
2 0 0 0 1
2 1 1 0 1
2 0 1 0 1

Step #6
2 0 0 1 0
2 1 1 1 1
2 0 0 0 1
2 1 1 0 1
2 2 1 0 1

Step #7
2 0 0 1 0
2 1 1 1 1
2 0 0 0 1
2 1 1 0 1
2 3 1 0 1

Step #8
2 0 0 1 0
2 1 1 1 1
2 0 0 0 1
2 1 1 0 1
3 3 1 0 1

Step #9
2 0 0 1 0
2 1 1 1 1
2 0 0 0 1
3 1 1 0 1
3 3 1 0 1

Step #10
2 0 0 1 0
2 1 1 1 1
2 2 0 0 1
3 1 1 0 1
3 3 1 0 1

Step #11
2 0 0 1 0
2 1 1 1 1
2 2 2 0 1
3 1 1 0 1
3 3 1 0 1

Step #12
2 0 0 1 0
2 1 1 1 1
2 2 2 2 1
3 1 1 0 1
3 3 1 0 1

Step #13
2 0 0 1 0
2 1 1 1 1
2 2 2 2 1
3 1 1 2 1
3 3 1 0 1

Step #14
2 0 0 1 0
2 1 1 1 1
2 2 2 2 1
3 1 1 2 1
3 3 1 2 1

Step #15
2 0 0 1 0
2 1 1 1 1
2 2 2 2 1
3 1 1 2 1
3 3 1 3 1

Step #16
2 0 0 1 0
2 1 1 1 1
2 2 2 2 1
3 1 1 3 1
3 3 1 3 1

Step #17
2 0 0 1 0
2 1 1 1 1
2 2 2 3 1
3 1 1 3 1
3 3 1 3 1

Step #18
2 0 0 1 0
2 1 1 1 1
2 2 3 3 1
3 1 1 3 1
3 3 1 3 1

Step #19
2 0 0 1 0
2 1 1 1 1
2 3 3 3 1
3 1 1 3 1
3 3 1 3 1

Step #20
2 0 0 1 0
2 1 1 1 1
3 3 3 3 1
3 1 1 3 1
3 3 1 3 1

Step #21
2 0 0 1 0
3 1 1 1 1
3 3 3 3 1
3 1 1 3 1
3 3 1 3 1

Step #22
2 2 0 1 0
3 1 1 1 1
3 3 3 3 1
3 1 1 3 1
3 3 1 3 1

Step #23
2 2 2 1 0
3 1 1 1 1
3 3 3 3 1
3 1 1 3 1
3 3 1 3 1

Step #24
2 2 3 1 0
3 1 1 1 1
3 3 3 3 1
3 1 1 3 1
3 3 1 3 1

Step #25
2 3 3 1 0
3 1 1 1 1
3 3 3 3 1
3 1 1 3 1
3 3 1 3 1
</code></pre>

<p>  Result is false</p>

<h3>Code</h3>

<p>The following code is very-well commented, so just reading the code would give you a good idea of what I meant.</p>

<pre><code>public boolean validate(int[][] matrix, int m, int n) {
    Pos nextStep = findZero(matrix, m, n);
    if (nextStep == null) {
        // the matrix deos not contain 0
        return false;
    }

    // visit the first position, and go from there
    matrix[nextStep.x][nextStep.y] = 2;
    while (nextStep != null) {
        nextStep = step(matrix, nextStep, m, n);
    }

    // after visiting all positions, check if there is remaining 0s
    return findZero(matrix, m, n) == null;
}

Pos step(int[][] matrix, Pos cur, int m, int n) {
    // Now cur is located at a pos with value = 2
    // print matrix in "verbose" mode
    if (verbose) {
        System.out.println("Step #" + stepCount++);
        for (int[] array : matrix) {
            for (int num : array) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // make a list of valid neighbors, for the convenience of checking
    List&lt;Pos&gt; neighbors = new ArrayList&lt;Pos&gt;();
    neighbors.add(new Pos(cur.x - 1, cur.y));
    neighbors.add(new Pos(cur.x + 1, cur.y));
    neighbors.add(new Pos(cur.x, cur.y - 1));
    neighbors.add(new Pos(cur.x, cur.y + 1));
    for (int i = neighbors.size() - 1; i &gt;= 0; i--) {
        if (!isValidPos(neighbors.get(i), m, n)) {
            neighbors.remove(i);
        }
    }

    // check if there is adjacent 0,
    // if there is, mark 0 as 2 and return that position
    for (Pos neighbor : neighbors) {
        if (matrix[neighbor.x][neighbor.y] == 0) {
            matrix[neighbor.x][neighbor.y] = 2;
            return neighbor;
        }
    }

    // if no adjacent 0, then check if there is adjacent 2.
    // if there is, mark current as 3 and then return that position
    for (Pos neighbor : neighbors) {
        if (matrix[neighbor.x][neighbor.y] == 2) {
            matrix[cur.x][cur.y] = 3;
            return neighbor;
        }
    }

    //if no adjacent 0 and no adjacent 2, mark current as 3 and return null
    matrix[cur.x][cur.y] = 3;
    return null;
}

boolean isValidPos(Pos p, int m, int n) {
    return p.x &gt;= 0 &amp;&amp; p.x &lt; m &amp;&amp; p.y &gt;= 0 &amp;&amp; p.y &lt; n;
}

Pos findZero(int[][] matrix, int m, int n) {
    for (int i = 0; i &lt; m; i++) {
        for (int j = 0; j &lt; n; j++) {
            if (matrix[i][j] == 0) {
                return new Pos(i, j);
            }
        }
    }
    return null;
}

class Pos {
    int x;
    int y;

    public Pos(int a, int b) {
        x = a;
        y = b;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 179] Largest Number ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/15/Largest-Number/"/>
    <updated>2015-04-15T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/15/Largest-Number</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/largest-number/">link</a></p>

<div class="question-content">
              <p></p><p>Given a list of non negative integers, arrange them such that they form the largest number.</p>

<p>For example, given <code>[3, 30, 34, 5, 9]</code>, the largest formed number is <code>9534330</code>.</p>

<p>Note: The result may be very large, so you need to return a string instead of an integer.</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>

                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">

                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/sort/">Sort</a>

                </span>

            </div>


<h3>Analysis</h3>

<p>Please refer to [[ItInt5] Numbers Concatenation Max (Largest Number)(/blog/2014/08/17/Numbers-Concatenation-Max/).</p>

<h3>Solution</h3>

<p>Note that we <strong>can not override Comparator(Integer)</strong>. So we must first convert int to string then sort.</p>

<h3>Code</h3>

<pre><code>public class Solution {

    // this code should pass
    public String largestNumber(int[] num) {
        if (num == null || num.length == 0) {
            return "0";
        }
        String[] strs = new String[num.length];
        for (int i = 0; i &lt; num.length; i++) {
            strs[i] = String.valueOf(num[i]);
        }
        Arrays.sort(strs, new LargerComparator());

        String res = "";
        for (String str : strs) {
            res = res + str;
        }
        return res;
    }

    class LargerComparator implements Comparator&lt;String&gt; {

        public int compare(String a, String b) {
            String first = a + b;
            String second = b + a;
            return second.compareTo(first);
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 174] Dungeon Game ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/15/Dungeon-Game/"/>
    <updated>2015-04-15T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/15/Dungeon-Game</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/dungeon-game/">link</a></p>

<div class="question-content">
              <p><style>
table.dungeon, .dungeon th, .dungeon td {
  border:3px solid black;
}

 .dungeon th, .dungeon td {
    text-align: center;
    height: 70px;
    width: 70px;
}
</style>

</p><p>The demons had captured the princess (<b>P</b>) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (<b>K</b>) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess. </p>
<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately. </p>
<p>Some of the rooms are guarded by demons, so the knight loses health (<i>negative</i> integers) upon entering these rooms;
other rooms are either empty (<i>0&#8217;s</i>) or contain magic orbs that increase the knight&#8217;s health (<i>positive</i> integers).</p>
<p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. </p>

<br>
<p><b>Write a function to determine the knight&#8217;s minimum initial health so that he is able to rescue the princess.</b></p>
<p>For example, given the dungeon below, the initial health of the knight must be at least <b>7</b> if he follows the optimal path <code>RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN</code>.</p>

<table class="dungeon">
<tbody><tr>
<td>-2 (K)</td>
<td>-3</td>
<td>3</td>
</tr>
<tr>
<td>-5</td>
<td>-10</td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td>30</td>
<td>-5 (P)</td>
</tr>
</tbody></table>
<!---2K   -3  3
-5   -10   1
10 30   5P-->

<br>
<p><b>Notes:</b>
</p><ul>
<li>The knight&#8217;s health has no upper bound.</li>
<li>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.  </li>
</ul>
<p></p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/stellari">@stellari</a> for adding this problem and creating all test cases.</p><p></p>

                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">

                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/dynamic-programming/">Dynamic Programming</a>

                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/binary-search/">Binary Search</a>

                </span>

            </div>


<h3>Analysis</h3>

<p>The key of solving this problem is to <strong>do DP from bottom right to top left</strong>.</p>

<h3>Solution</h3>

<p>dp[i][j] means the minimum initial value of each position. As suggested by<a href="http://www.cnblogs.com/grandyang/p/4233035.html"></a>, the DP equation is:</p>

<blockquote><p>dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) &ndash; dungeon[i][j]).</p></blockquote>

<h3>Code</h3>

<pre><code>public class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        if (dungeon == null) return 1;
        int m = dungeon.length;
        int n = dungeon[0].length;

        int[][] dp = new int[m][n];
        for (int i = m - 1; i &gt;= 0; i--) {
            for (int j = n - 1; j &gt;= 0; j--) {
                if (i == m - 1 &amp;&amp; j == n - 1) {
                    dp[i][j] = Math.max(1, 1 - dungeon[i][j]);
                } else if (i == m - 1) {
                    dp[i][j] = Math.max(1, dp[i][j + 1] - dungeon[i][j]);
                } else if (j == n - 1) {
                    dp[i][j] = Math.max(1, dp[i + 1][j] - dungeon[i][j]);
                } else {
                    dp[i][j] = Math.max(1,
                        Math.min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j]);
                }
            }
        }
        return dp[0][0];
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 173] Binary Search Tree Iterator ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/15/Binary-Search-Tree-Iterator/"/>
    <updated>2015-04-15T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/15/Binary-Search-Tree-Iterator</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/binary-search-tree-iterator/">link</a></p>

<div class="question-content">
              <p></p><p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>

<p>Calling <code>next()</code> will return the next smallest number in the BST.</p>

<p><b>Note: </b><code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<i>h</i>) memory, where <i>h</i> is the height of the tree. </p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/tree/">Tree</a>
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/stack/">Stack</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p>This is an extremely important question, if you are going for an interview. I repeat: <strong>this is an extremely important question, if you are going for an interview</strong>. If you do not remember it by heart, I will repeat again.</p>

<p>The solution of the iterator applies to a lot of related questions. So make sure you practise this question until you are perfect. You WILL BE ASKED this question at times.</p>

<p>You could read my other post <a href="www.shuatiblog.com/blog/2014/06/14/Iterator-of-Tree/">[Question] Iterator of Binary Search Tree</a>.</p>

<h3>Solution</h3>

<p>We only need to keep 1 variable in RAM, that is a stack.</p>

<h3>Code</h3>

<pre><code>public class BSTIterator {

    Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();

    public BSTIterator(TreeNode root) {
        while (root != null) {
            stack.push(root);
            root = root.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        if (!hasNext()) {
            return 0;
        }
        TreeNode next = stack.pop();
        TreeNode node = next.right;
        while (node != null) {
            stack.push(node);
            node = node.left;
        }
        return next.val;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[UVa] Wooden Sticks ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/14/wooden-stick/"/>
    <updated>2015-04-14T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/14/wooden-stick</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=323">link</a></p>

<p><body>There is a pile of <i>n </i>wooden sticks. The length and weight of
each stick are known in advance. The sticks are
to be processed by a woodworking machine in one by one fashion. It
needs some time, called setup time, for
the machine to prepare processing a stick. The setup times are
associated with cleaning operations and
changing tools and shapes in the machine. The setup times of the
woodworking machine are given as follows:</p>

<ul>
<li>The setup time for the first wooden
stick is 1 minute.</li>
<li>
Right after processing a stick of length <i>l </i>and weight <i>w
</i>, the machine will need no setup time for a stick
of length <i>l</i>&#8217; and weight <i>w</i>&#8217; if <i>l </i>&lt;=<i>l</i>&#8217;
and <i>w </i>&lt;=<i>w</i>&#8217; . </li>
</ul>


<p>Otherwise, it will need 1 minute for setup.<br>
You are to find the minimum setup time to process a given pile of <i>n
</i>wooden sticks. For example, if you have
five sticks whose pairs of length and weight are (4,9), (5,2), (2,1), (3,5),
and (1,4) then the minimum setup
time should be 2 minutes since there is a sequence of pairs (1,4),
(3,5), (4,9), (2,1), (5,2).</p>

<h2><font size="4" color="#ff0000"><a name="SECTION0001001000000000000000">Input</a> <br>
</font></h2>


<p>The input consists of <i>T</i> test cases. The number of test cases (<i>T</i>) is given in the first line of the input file. Each
test case consists of two lines: The first line has an integer <i>n</i>,
1&lt;=<i>n&lt;=</i>5000, that represents the number of
wooden sticks in the test case, and the second line contains 2<i>n </i>positive
integers <i>l<sub>1</sub></i>, <i>w<sub>1</sub></i>, <i>l<sub>2</sub></i>,
<i>w<sub>2</sub></i>, &hellip;, <i>l<sub>n</sub></i>, <i>w<sub>n</sub></i>,
each of magnitude at most 10000, where <i>l<sub>i</sub> </i>and <i>w<sub>i</sub>
</i>are the length and weight of the <i>i </i>th wooden stick,
respectively. The 2<i>n </i>integers are delimited by one or
more spaces.</p>

<h2><font size="4" color="#ff0000"><a name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>


<p>The output should contain the minimum setup time in minutes, one per
line.</p>

<h2><font size="4" color="#ff0000"><a name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>




<pre>3
5
4 9 5 2 2 1 3 5 1 4
3
2 2 1 1 2 2
3
1 3 2 2 3 1
</pre>




<h2><font size="4" color="#ff0000"><a name="SECTION000
1004000000000000000">Sample Output</a>&nbsp;</font>
</h2>




<pre>2
1
3
</pre>


<p></body></p>

<h3>Analysis</h3>

<p>This question is a little similar to <a href="www.shuatiblog.com/blog/2014/09/17/stack-up-boxes/">[CC150v5] 9.10 Stack Up the Boxes</a>, yet different.</p>

<h3>Solution</h3>

<p>Solution quoted from <a href="http://www.csdn123.com/html/blogs/20130823/58042.htm">脚本百事通</a>:</p>

<blockquote><p>按长度从小到大排序, 若长度相同, 则按重量从小到大排序(先按重量再按长度也行)</p>

<p>然后, 我们针对当前木棍, 与剩下的木棍比较, 满足 w1 &lt;= w2 &amp;&amp; l1 &lt;= l2 的, 就更新一下当前棍, 并标记~</p>

<p>当所有木棍都被编组后 输出到底设置了几次~</p></blockquote>

<p><a href="http://www.android100.org/html/201502/03/109926.html">ref1</a>, <a href="http://blog.csdn.net/keshuai19940722/article/details/10735689">ref2</a></p>

<h3>Code</h3>

<p>The following Java code is written by me</p>

<pre><code>public int count(Pair[] points) {
    Arrays.sort(points, new PointComparator());
    // now the array is sorted with Point.x
    int total = 0;
    int p = 0;
    int len = points.length;

    while (p &lt; len) {
        // find the next non-null point
        while (p &lt; len &amp;&amp; points[p] == null) {
            p++;
        }
        if (p == len) {
            break;
        }
        // use points[p] as the first elements in the queue
        Pair temp = copy(points[p]);
        points[p] = null;
        total++;

        // then mark all elements that follow points[p]
        for (int k = p + 1; k &lt; len; k++) {
            if (points[k] == null || points[k].y &lt; temp.y) {
                continue;
            }
            temp = copy(points[k]);
            points[k] = null;
        }
        p++;
    }
    return total;
}

Pair copy(Pair p) {
    Pair newP = new Pair(p.x, p.y);
    return newP;
}

class PointComparator implements Comparator&lt;Pair&gt; {

    @Override
    public int compare(Pair p1, Pair p2) {
        return p1.x - p2.x;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] 编程之美 NIM 一排石头的游戏 ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/14/NIM-stone-game/"/>
    <updated>2015-04-14T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/14/NIM-stone-game</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/starcuan/article/details/20546993">link</a></p>

<blockquote><p>N块石头排成一行，两个玩家依次取石头，每个玩家可以取其中任意一块或者相邻的两块，最后能将剩下的石头一次取光的玩家获胜。</p></blockquote>

<h3>Solution</h3>

<ol>
<li>when n = 1, first move wins</li>
<li>when n = 2, first move wins</li>
<li>when n = 3, first move removes middle stone, wins</li>
<li>when n = 4, first move removes 2 stones from middle, wins</li>
<li>when n = 5, first move removes middle stone, which leaves 2 piles of stones of count 2. First move wins.</li>
</ol>


<p>So to conclude the above, we will have:</p>

<blockquote><p>先取者只要取中间的元素，N为奇数取中间一个，偶数取中间两个，将石头分为两部分，然后无论第二个人怎么取，先取者只要在另一部分的同样位置取走同样多的石头，则最后先取者必胜</p></blockquote>

<p>Quoted from <a href="http://blog.csdn.net/starcuan/article/details/20546993">王川的私房菜
</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 169] Majority Element ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/14/Majority-Element/"/>
    <updated>2015-04-14T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/14/Majority-Element</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/majority-element/">link</a></p>

<h3>Solution</h3>

<div class="question-content">
              <p></p><p>Given an array of size <i>n</i>, find the majority element. The majority element is the element that appears more than <code>? n/2 ?</code> times.</p>

<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/divide-and-conquer/">Divide and Conquer</a>
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/array/">Array</a>
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/bit-manipulation/">Bit Manipulation</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p>I have already covered this question in <a href="www.shuatiblog.com/blog/2014/06/28/Majority-Number/">[LintCode] Majority Number</a>. However, I have also discovered <strong>a few other very interesting solution</strong>. Check below.</p>

<h3>Solution</h3>

<p>The best solution is of course the voting algorithm. Read code below.</p>

<p>Second solution presented by offical answer, is to do sorting:</p>

<pre><code>public int majorityElement(int[] num) {
    if (num.length == 1) {
        return num[0];
    }

    Arrays.sort(num);
    return num[num.length / 2];
}
</code></pre>

<p>Third interesting solution is doing bit manipulation. Read <a href="http://www.yanyulin.info/pages/2014/12/851338983752.html">Yanyulin&rsquo;s blog</a> for more.</p>

<h3>Code</h3>

<pre><code>public class Solution {
    public int majorityElement(int[] num) {
        if (num == null || num.length == 0) {
            return 0;
        }
        int major = num[0];
        long count = 1;

        for (int i = 1; i &lt; num.length; i++) {
            if (major == num[i]) {
                count++;
            } else if (count == 0) {
                major = num[i];
                count = 1;
            } else {
                count--;
            }
        }

        return major;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 168] Excel Sheet Column Title ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/14/Excel-Sheet-Column-Title/"/>
    <updated>2015-04-14T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/14/Excel-Sheet-Column-Title</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/excel-sheet-column-title/">link</a></p>

<div class="question-content">
              <pExcel Sheet Column Number></p><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>

<p>For example:</p>
<pre>    1 -&gt; A
    2 -&gt; B
    3 -&gt; C
    ...
    26 -&gt; Z
    27 -&gt; AA
    28 -&gt; AB </pre>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ifanchu">@ifanchu</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/math/">Math</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p>This is pretty much a similar question. It&rsquo;s pretty easy.</p>

<h3>Code</h3>

<pre><code>public class Solution {
    public int titleToNumber(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int sum = 0;
        for (char ch: s.toCharArray()) {
            sum *= 26;
            sum += (int) (ch - 'A' + 1);
        }
        return sum;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 164] Maximum Gap ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/13/Maximum-Gap/"/>
    <updated>2015-04-13T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/13/Maximum-Gap</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/maximum-gap/">link</a></p>

<div class="question-content">
              <p></p><p>Given an unsorted array, find the maximum difference between the successive elements in its sorted form.</p>

<p>Try to solve it in linear time/space.</p>

<p>Return 0 if the array contains less than 2 elements.</p>

<p>You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/porker2008">@porker2008</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/sort/">Sort</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p><strong>This is an extremely difficult question</strong> of bucket sort. I refered to <a href="http://www.programcreek.com/2014/03/leetcode-maximum-gap-java/">programcreek</a> and <a href="http://leetcode.tgic.me/maximum-gap/index.html">tgic&rsquo;s blog</a> for reference.</p>

<h3>Solution</h3>

<p><strong>Basic idea is to put elements into buckets</strong>. The number of bucket is (almost) same as the number of elements in the input. In this way, each bucket <strong>ideally</strong> will contain 1 element.</p>

<p>We then know that <strong>the max gap must be cross-bucket instead of within bucket</strong>. So we simply keep track of max and min value within each bucket for the purpose of calculating gap.</p>

<p><strong>Why did I say &ldquo;number of bucket is (almost) same as the number of elements in the input&rdquo;</strong>? Well, consider this case: 3 values and (maxVal &ndash; minVal) == 100. We can make 3 bucket with size = 34. How about 5 values and (maxVal &ndash; minVal) == 6? Bucket size shall be either 1 or 2. So we&rsquo;ll have either 3 or 6 bucket.</p>

<p>So, in the code below, you can see I make bucket size &ldquo;larger by 1&rdquo;:</p>

<pre><code>// bSize is size of bucket (should be larger by 1)
int bSize = (maxVal - minVal + 1) / num.length + 1;

// calcualte number of buckets needed
int bCount = (maxVal - minVal) / bSize + 1;
Bucket[] buckets = new Bucket[bCount];
</code></pre>

<p>Note that simply use <strong>input.length</strong> as bucket count is wrong.</p>

<h3>Code</h3>

<p>My code written in Java:</p>

<pre><code>public class Solution {
    public int maximumGap(int[] num) {
        if (num == null || num.length &lt; 2) {
            return 0;
        }

        // find out max and min values of input
        int minVal = num[0];
        int maxVal = num[0];
        for (int n: num) {
            minVal = Math.min(minVal, n);
            maxVal = Math.max(maxVal, n);
        }
        // bSize is size of bucket (should be larger by 1)
        int bSize = (maxVal - minVal + 1) / num.length + 1;

        // calcualte number of buckets needed
        int bCount = (maxVal - minVal) / bSize + 1;
        Bucket[] buckets = new Bucket[bCount];

        // match every value into a bucket
        // bucket maintains the max/min within the bucket
        for (int n: num) {
            int bIndex = (n - minVal) / bSize;
            if (buckets[bIndex] == null) {
                buckets[bIndex] = new Bucket(n, n);
            } else {
                buckets[bIndex].updateVal(n);
            }
        }

        // for every bucket, check in sequence and get max gap
        int gap = 0;
        int pre = 0;
        int cur = 1;
        while (cur &lt; bCount) {
            // skip all empty buckets
            while (cur &lt; bCount &amp;&amp; buckets[cur] == null) {
                cur++;
            }
            if (cur == bCount) break;
            // update gap, pre and cur
            gap = Math.max(gap, buckets[cur].min - buckets[pre].max);
            pre = cur;
            cur++;
        }

        return gap;
    }

    class Bucket {
        int min;
        int max;

        public Bucket(int a, int b) {
            min = a;
            max = b;
        }

        public void updateVal(int val) {
            min = Math.min(min, val);
            max = Math.max(max, val);
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 172] Factorial Trailing Zeroes ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/13/Factorial-Trailing-Zeroes/"/>
    <updated>2015-04-13T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/13/Factorial-Trailing-Zeroes</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/factorial-trailing-zeroes/">link</a></p>

<div class="question-content">
              <p></p><p>Given an integer <i>n</i>, return the number of trailing zeroes in <i>n</i>!.</p>

<p><b>Note: </b>Your solution should be in logarithmic time complexity.</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>

                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">

                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/math/">Math</a>

                </span>

            </div>


<h3>Analysis</h3>

<p>This question I&rsquo;ve seen it quite a few time, also. We&rsquo;re basically count the number of factor 5s.</p>

<p>Eg.</p>

<blockquote><p>n = 5, count = 1</p>

<p>n = 6, count = 1</p>

<p>n = 10, count = 2</p>

<p>n = 24, count = 4</p>

<p>n = 25, count = 6</p>

<p>n = 26, count = 6</p></blockquote>

<h3>Solution</h3>

<p>Please read this post <strong><a href="www.shuatiblog.com/blog/2014/07/02/Trailing-Zero-of-Factorial/">[LintCode] Trailing Zeros of Factorial</a></strong>.</p>

<h3>Code</h3>

<pre><code>public class Solution {
    public int trailingZeroes(int n) {
        if (n &lt; 5) {
            return 0;
        }
        int res = 0;
        long base = 5;
        while (n &gt;= base) {
            res += n / base;
            base *= 5;
        }
        return res;
    }
}
</code></pre>

<p>another pretty good solution:</p>

<pre><code>public class Solution {
    public int trailingZeroes(int n) {
        int count = 0;
        for (int i = n / 5; i &gt; 0; i = i / 5) {
            count = count + i;
        }
        return count;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 171] Excel Sheet Column Number ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/13/Excel-Sheet-Column-Number/"/>
    <updated>2015-04-13T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/13/Excel-Sheet-Column-Number</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/excel-sheet-column-number/">link</a></p>

<div class="question-content">
              <p></p><p>Related to question <a href="https://oj.leetcode.com/problems/excel-sheet-column-title/">Excel Sheet Column Title</a></p>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>

<p>For example:</p>
<pre>    A -&gt; 1
    B -&gt; 2
    C -&gt; 3
    ...
    Z -&gt; 26
    AA -&gt; 27
    AB -&gt; 28 </pre>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/math/">Math</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p>This question I&rsquo;ve seen it quite a few time. It&rsquo;s very standard integer conversion question.</p>

<h3>Solution</h3>

<p>Please read this post <strong><a href="www.shuatiblog.com/blog/2014/08/16/Excel-decimal-conversion/">[ItInt5] Excel Decimal Conversion</a></strong>.</p>

<h3>Code</h3>

<p>recursively:</p>

<pre><code>public class Solution {
    public String convertToTitle(int n) {
        if (n &lt; 1) {
            return "";
        }
        n--;
        char ch = (char) ((n % 26) + 'A');
        return convertToTitle(n / 26) + ch;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Palantir] MultiMap in Java without using Collections ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/12/multi-map-java/"/>
    <updated>2015-04-12T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/12/multi-map-java</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=18479662">link</a></p>

<blockquote><p>Explain how you would implement a multi-map in Java without using any collections?</p></blockquote>

<h3>Solution</h3>

<p>This question is pretty strange in a tech interview. But still, if you are asked, I think the most obvious solution is pointed out by <a href="http://www.careercup.com/question?id=18479662">careercup user Abhi</a>.</p>

<p>The basic idea is to build a nested list structure ourselves, without considering the time complexity. See code below.</p>

<h3>Code</h3>

<pre><code>public class Node {
    Object key;
    Node next;
    ValueNode vnode;
}
public class ValueNode {
    Object Value;
    ValueNode next;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Palantir] Find Duplicate within K Distance ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/12/duplicate-within-k-distance/"/>
    <updated>2015-04-12T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/12/duplicate-within-k-distance</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=18517665">link</a></p>

<blockquote><p>Given an array of values, design and code an algorithm that returns whether there are two duplicates within k indices of each other?</p></blockquote>

<h3>Solution</h3>

<p>We can keep a HashMap for storing the previous occuring position of a number.</p>

<h3>Code</h3>

<pre><code>public boolean dupWithinK(int k, int[] arr) {
    Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();
    for (int i = 0; i &lt; arr.length; i++) {
        if (set.contains(arr[i])) {
            return true;
        }
        if (i &lt; k) {
            // the first k numbers
            set.add(arr[i]);
        } else {
            // the (k+1) th number and onwards
            set.add(arr[i]);
            set.remove(arr[i - k]);
        }
    }
    return false;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 162] Find Peak Element ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/12/Find-Peak-Element/"/>
    <updated>2015-04-12T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/12/Find-Peak-Element</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/find-peak-element/">link</a></p>

<div class="question-content">
              <p></p><p>A peak element is an element that is greater than its neighbors.</p>

<p>Given an input array where <code>num[i] ? num[i+1]</code>, find a peak element and return its index.</p>

<p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p>

<p>You may imagine that <code>num[-1] = num[n] = -8</code>.</p>

<p>For example, in array <code>[1, 2, 3, 1]</code>, 3 is a peak element and your function should return the index number 2.</p>

<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show spoilers.</a></p>

<div class="spoilers" style="display: none;"><b>Note:</b>
<p>Your solution should be in logarithmic complexity.</p>
</div>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/array/">Array</a>
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/binary-search/">Binary Search</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p>This basically is a binary search question. Instead of checking the values, we check the slope (upgoing or downslope).</p>

<p><strong>The important point</strong> is the special cases like [1, 2, 3] or [3, 2, 1], we need to return the corner values. Well there&rsquo;re 2 ways to handle these corner cases.</p>

<h3>Solution</h3>

<p>First, referring to <a href="http://www.geeksforgeeks.org/find-a-peak-in-a-given-array/">G4G</a>, the corner case is handled in this way:</p>

<pre><code>if ((mid == 0 || arr[mid-1] &lt;= arr[mid]) &amp;&amp;
        (mid == n-1 || arr[mid+1] &lt;= arr[mid]))
    return mid;
</code></pre>

<p>The code 1 below is doing similar things. That code is readable and easy to come up with. I recommend this solution during a interview.</p>

<p>For those who are interested, there is a extremely concise solution thanks to <a href="http://blog.csdn.net/u010367506/article/details/41943309">Duplan</a>. I have the Java version posted below as code 2.</p>

<h3>Code</h3>

<p>Code 1</p>

<pre><code>public class Solution {
    public int findPeakElement(int[] num) {
        if (num == null || num.length == 0) {
            return 0;
        } else if (num.length == 1) {
            return 0;
        } else if (num[0] &gt; num[1]) {
            return 0;
        } else if (num[num.length - 2] &lt; num[num.length - 1]) {
            return num.length - 1;
        }
        // now the leftmost edge is increasing
        // and the rightmost edge is also increasing backwards
        return helper(num, 0, num.length - 1);
    }

    public int helper(int[] num, int left, int right) {
        int mid = left + (right - left) / 2;
        if (left + 2 == right) {
            return mid;
        } else if (num[mid] &gt; num[mid + 1]) {
            // middle is decreasing, so peak on the left side
            return helper(num, left, mid + 1);
        } else {
            return helper(num, mid, right);
        }
    }
}
</code></pre>

<p>Code 2</p>

<pre><code>public class Solution {
    public int findPeakElement(int[] num) {
        if (num == null || num.length == 0) {
            return 0;
        }
        return helper(num, 0, num.length - 1);
    }

    public int helper(int[] num, int left, int right) {
        int mid = left + (right - left) / 2;
        if (left == right) {
            return left;
        } else if (num[mid] &gt; num[mid + 1]) {
            // middle is decreasing, so peak on the left side
            return helper(num, left, mid);
        } else {
            return helper(num, mid + 1, right);
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 165] Compare Version Numbers ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/12/Compare-Version-Numbers/"/>
    <updated>2015-04-12T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/12/Compare-Version-Numbers</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/compare-version-numbers/">link</a></p>

<div class="question-content">
              <p></p><p>Compare two version numbers <i>version1</i> and <i>version2</i>.<br>
If <i>version1</i> &gt; <i>version2</i> return 1, if <i>version1</i> &lt; <i>version2</i> return -1, otherwise return 0.</p>

<p>You may assume that the version strings are non-empty and contain only digits and the <code>.</code> character.<br>
The <code>.</code> character does not represent a decimal point and is used to separate number sequences.<br>
For instance, <code>2.5</code> is not &#8220;two and a half&#8221; or &#8220;half way to version three&#8221;, it is the fifth second-level revision of the second first-level revision.</p>

<p>Here is an example of version numbers ordering:</p>
<pre>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</pre>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/string/">String</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p>I&rsquo;ve seen a couple of interesting ideas on other people&rsquo;s blogs, including <a href="http://www.programcreek.com/2014/03/leetcode-compare-version-numbers-java/">one</a> that uses String.split() to convert input to an array, and <a href="http://www.meetqun.com/thread-3331-1-1.html">this one</a> which uses 2 pointers to compare.</p>

<p>My solution might seem more intuitive for some. See below for my solution.</p>

<h3>Solution</h3>

<p>The idea is to identify what the current number is (before end of string, or before the next &lsquo;.&rsquo;). If there&rsquo;s no more string, value = 0, so the case of (1.0, 1) essentially equals. Without further ado, let&rsquo;s look at the code.</p>

<h3>Code</h3>

<pre><code>public class Solution {
    public int compareVersion(String version1, String version2) {
        if (version1 == null || version2 == null) {
            return 0;
        }
        return helper(version1, version2);
    }

    private int helper(String v1, String v2) {
        if (v1.length() == 0 &amp;&amp; v2.length() == 0) {
            return 0;
        }

        int num1 = 0;
        int num2 = 0;

        if (v1.length() != 0) {
            int p1 = 0;
            while (p1 &lt; v1.length() &amp;&amp; v1.charAt(p1) != '.') {
                p1++;
            }
            num1 = Integer.parseInt(v1.substring(0, p1));
            if (p1 &lt; v1.length()) p1++;
            v1 = v1.substring(p1);
        }

        if (v2.length() != 0) {
            int p2 = 0;
            while (p2 &lt; v2.length() &amp;&amp; v2.charAt(p2) != '.') {
                p2++;
            }
            num2 = Integer.parseInt(v2.substring(0, p2));
            if (p2 &lt; v2.length()) p2++;
            v2 = v2.substring(p2);
        }

        if (num1 != num2) {
            return (num1 - num2) / Math.abs(num1 - num2);
        } else {
            return helper(v1, v2);
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 166] Fraction to Recurring Decimal ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/11/Fraction-to-Recurring-Decimal/"/>
    <updated>2015-04-11T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/11/Fraction-to-Recurring-Decimal</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/fraction-to-recurring-decimal/">link</a></p>

<div class="question-content">
              <p></p><p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>

<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>
<p>
For example,
</p><ul>
<li>Given numerator = 1, denominator = 2, return &#8220;0.5&#8221;.</li>
<li>Given numerator = 2, denominator = 1, return &#8220;2&#8221;.</li>
<li>Given numerator = 2, denominator = 3, return &#8220;0.(6)&#8221;.</li>
</ul>
<p></p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/Shangrila">@Shangrila</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/hash-table/">Hash Table</a>
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/math/">Math</a>
                  
                </span>
</div>


<h3>Analysis</h3>

<p>Wow, this is just another incredible question on Leetcode. Quite a few difficult corner cases in the OJ.</p>

<p>Current AC rate is first lowest at 12.4%.</p>

<h3>Solution</h3>

<p>There&rsquo;re 3 things that we must take note:</p>

<ol>
<li>Handle positive/nagetive cases well. Note that both numerator and denominator can be negative number. And there&rsquo;re also case like:</li>
</ol>


<blockquote><p>1 / -3 = -0.(3)</p></blockquote>

<ol>
<li>Note that we have to match the repetation of the actual numerator. Not the quotient. What do I mean by that?</li>
</ol>


<blockquote><p>1 / 6 = 0.1(6)</p>

<p>1 / 333 = 0.(003)</p></blockquote>

<ol>
<li><p>Note below is <strong>how to override the equals() method</strong> (first one is wrong and second is right):</p>

<p> public boolean equals(Pair p) {</p>

<p> }</p>

<p> public boolean equals(Object obj) {</p>

<p> }</p></li>
</ol>


<p><strong>One more thing</strong>: Most other guys&#8217; solutions like <a href="http://www.programcreek.com/2014/03/leetcode-fraction-to-recurring-decimal-java/">this</a>, <a href="http://blog.csdn.net/ljiabin/article/details/42025037">this</a> and <a href="http://yuanhsh.iteye.com/blog/2176178">this</a> are using Hashing. It&rsquo;s fine and definitely good. I used linearly search though, which is a small time compromise. I am presenting my code below and please just consider it as something different. Keep in mind it&rsquo;s not the optimized solution.</p>

<h3>Code</h3>

<pre><code>public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        long quotient = (long) numerator / denominator;
        long reminder = (long) numerator % denominator;
        if (reminder == 0) {
            return String.valueOf(quotient);
        }

        // The result has 3 parts: sign, integer part, and fraction part
        // eg. -4 / 3 = -1 and the result of (1/3) = (3)
        String sign = ((long) numerator * denominator &gt;= 0) ? "" : "-";
        long integer = Math.abs(quotient);
        String fraction = fraction(Math.abs((long)reminder), Math.abs((long)denominator));

        // why do we have to seperate sign from integer?
        // cuz 1 / -3 = -0.(3), while quotient is 0. 
        // So, we can't simply concatenate quotient with fraction
        return sign + integer + "." + fraction;
    }

    String fraction(long num, long denum) {
        // eg. num = 1, denum = 4, should return "25"

        List&lt;Pair&gt; list = new ArrayList&lt;Pair&gt;();
        String result = "";
        while (num != 0) {
            num *= 10;
            long digit = num / denum;

            // eg. 1 / 333 = (003), so the pairs would be like this:
            // {10, 0}, {100, 0}, {1000, 3}, {10, 0}...
            Pair cur = new Pair(num, digit);
            num %= denum;

            // now add cur Pair to the list
            if (list.indexOf(cur) == -1) {
                list.add(cur);
            } else {
                // found a recurring dicimal in the previous output stream
                int pos = list.indexOf(cur);
                for (int i = 0; i &lt; pos; i++) {
                    result += list.get(i).digit;
                }
                result += "(";
                for (int i = pos; i &lt; list.size(); i++) {
                    result += list.get(i).digit;
                }
                result += ")";
                break;
            }
        }

        // if there is recurring digit, the result should have already been generated
        if (result.length() == 0) {
            for (Pair p: list) {
                result += p.digit;
            }
        }
        return result;
    }

    class Pair {
        long num;
        long digit;

        public Pair(long a, long b) {
            num = a;
            digit = b;
        }

        public boolean equals(Object obj) {
            // note the equals interface passes in (Object obj)
            // instead of a Pair object
            Pair p = (Pair) obj;
            return this.num == p.num &amp;&amp; this.digit == p.digit;
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 160] Intersection of Two Linked Lists ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/08/Intersection-of-Two-Linked-Lists/"/>
    <updated>2015-04-08T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/08/Intersection-of-Two-Linked-Lists</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">link</a></p>

<div class="question-content">
              <p></p><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<br>
<p>For example, the following two linked lists: </p>
<pre>A:          a1 ? a2
                   ?
                     c1 ? c2 ? c3
                   ?            
B:     b1 ? b2 ? b3
</pre>
<p>begin to intersect at node c1.</p>
<br>
<p><b>Notes:</b>
</p><ul>
<li>If the two linked lists have no intersection at all, return <code>null</code>.</li>
<li>The linked lists must retain their original structure after the function returns. </li>
<li>You may assume there are no cycles anywhere in the entire linked structure.</li>
<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>
</ul>
<p></p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/stellari">@stellari</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/linked-list/">Linked List</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p>This question is very similar to <strong>[LeetCode Plus] Lowest Common Ancestor of Binary Tree (II)</strong>.</p>

<h3>Solution</h3>

<p><a href="http://stackoverflow.com/a/2216683/909524">This</a> is a pretty nice answer. The following explanation is quoted from <a href="http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/">g4g</a>:</p>

<blockquote><ol>
<li><p>Get count of the nodes in first list, let count be c1.</p></li>
<li><p>Get count of the nodes in second list, let count be c2.</p></li>
<li><p>Get the difference of counts d = abs(c1 – c2)</p></li>
<li><p>Now traverse the bigger list from the first node till d nodes so that from here onwards both the lists have equal no of nodes.</p></li>
<li><p>Then we can traverse both the lists in parallel till we come across a common node.</p></li>
</ol>
</blockquote>

<h3>Code</h3>

<pre><code>/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        return helper(headA, headB, length(headA) - length(headB));
    }

    public ListNode helper(ListNode n1, ListNode n2, int offset) {
        if (offset &lt; 0) {
            return helper(n2, n1, 0 - offset);
        }
        // move n1 to the distance of offset
        while (offset != 0) {
            n1 = n1.next;
            offset--;
        }
        while (n1 != null &amp;&amp; n1 != n2) {
            n1 = n1.next;
            n2 = n2.next;
        }
        return n1;
    }

    int length(ListNode node) {
        int len = 0;
        while (node != null) {
            node = node.next;
            len++;
        }
        return len;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Octopress] Add Google AdSense to Octopress ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/07/add-adsense-octopress/"/>
    <updated>2015-04-07T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/07/add-adsense-octopress</id>
    <content type="html"><![CDATA[<h2>Apply for Google AdSense</h2>

<p>My first request of AdSense is rejected because of &ldquo;<strong>Site does not comply with Google policies</strong>&rdquo;. I do not know the exact reason, but I did the following things to get it through:</p>

<ol>
<li><p>I registered a top-level .COM domain name to replace the original github page&rsquo;s domain.</p></li>
<li><p>I added &ldquo;Privacy Policy&rdquo; page, and added the link to the bottom of each blog post.</p></li>
<li><p>I re-wrote the &ldquo;About Me&rdquo; page, and added in administrator email address.</p></li>
<li><p>I updated a few more posts, making it more than 580 posts in total.</p></li>
<li><p>I set up Google Webmaster Tools, and updated sitemap.xml in the configurations.</p></li>
<li><p>I resubmitted my request of AdSense again.</p></li>
</ol>


<h2>Put AdSense in your blog</h2>

<ol>
<li><p>Create a new file: source/_includes/asides/advertise.html</p></li>
<li><p>Copy and paste the code from AdSense, eg.</p>

<pre><code> &lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;
 &lt;!-- ad-name --&gt;
 &lt;ins class="adsbygoogle"
      ...............
 &lt;script&gt;
 (adsbygoogle = window.adsbygoogle || []).push({});
 &lt;/script&gt;
</code></pre></li>
<li><p>Go to _config.yml, and look for &ldquo;default_asides&rdquo;, then add &ldquo;asides/advertise.html, &rdquo; in the beginning of the array</p>

<p> default_asides: [asides/advertise.html, asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</p></li>
<li><p>Now you&rsquo;ve added advertisement in your side menu.</p></li>
<li><p>Go to source/_layouts/post.html and look for:</p>

<p> &lt;h1>Comments&lt;/h1></p></li>
<li><p>Below the h1 tag, add your AdSense code, again.</p></li>
<li><p>Now you&rsquo;ve added advertisement above your comment area.</p></li>
</ol>


<p>Thanks for the effort from <a href="https://www.hi29.net/post/2013/11/30/octopresszen-mo-fang-adsense/">this reference</a>.</p>

<h2>Updates</h2>

<p>Apr 9th update: my re-submission of Google AdSense is not approached, because of &ldquo;not enough content&rdquo;. I don&rsquo;t know what else to do, so I switched to another ad platform.</p>

<p>Apr 11th update: For the first time ever, my blog has more than 1,000 visit per day.</p>

<p><img class="middle" src="www.shuatiblog.com/assets/images/google-analytics-20150411.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 155] Min Stack ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/07/Min-Stack/"/>
    <updated>2015-04-07T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/07/Min-Stack</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/min-stack/">link</a></p>

<div class="question-content">
              <p></p><p>
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
</p><ul>
<li>
push(x) &#8211; Push element x onto stack.
</li>
<li>
pop() &#8211; Removes the element on top of the stack.
</li>
<li>
top() &#8211; Get the top element.
</li>
<li>
getMin() &#8211; Retrieve the minimum element in the stack.
</li>
</ul>
<p></p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/stack/">Stack</a>
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/data-structure/">Data Structure</a>
                  
               sn’t look possible to go to left half or right half by doing constant number of comparisons at the mSolution </span>
</div>


<h3>Analysis</h3>

<p>I&rsquo;ve already cover this question in another post <strong>[Question] Min Stack</strong>.</p>

<h3>My Code</h3>

<pre><code>class MinStack {

    Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();
    Stack&lt;Integer&gt; min = new Stack&lt;Integer&gt;();

    public void push(int x) {
        stack.push(x);
        if (min.isEmpty() || min.peek() &gt;= x) {
            min.push(x);
        }
    }

    public void pop() {
        if (stack.isEmpty()) {
            return;
        }
        int topNum = stack.pop();
        if (topNum == min.peek()) {
            min.pop();
        }
    }

    public int top() {
        if (stack.isEmpty()) {
            return 0;
        }
        return stack.peek();
    }

    public int getMin() {
        if (min.isEmpty()) {
            return 0;
        }
        return min.peek();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 152] Maximum Product Subarray ]]></title>
    <link href="www.shuatiblog.com/blog/2015/04/07/Maximum-Product-Subarray/"/>
    <updated>2015-04-07T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/04/07/Maximum-Product-Subarray</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/maximum-product-subarray/">link</a></p>

<div class="question-content">
              <p></p><p>
Find the contiguous subarray within an array (containing at least one number) which has the largest product.
</p>

<p>
For example, given the array <code>[2,3,-2,4]</code>,<br>
the contiguous subarray <code>[2,3]</code> has the largest product = <code>6</code>.
</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/array/">Array</a>
                  
                  <a class="btn btn-xs btn-primary" href="www.shuatiblog.com/tag/dynamic-programming/">Dynamic Programming</a>
                  
                </span>
              
            </div>


<h3>Analysis</h3>

<p><strong>This is a pretty difficult question</strong>. It&rsquo;s hard to write bug-free solution if you have never practised before.</p>

<p>So the first idea that comes to me is the case of array element = 0. Why this case? cuz the maximum subarray MUST NOT CONTAIN 0 unless the input is like {-1, 0, -1}. So we could divide array from 0s and calculate max sum seperately. This idea is good, though a little difficult in coding. Read it <a href="http://www.geeksforgeeks.org/maximum-product-subarray/">here</a> or <a href="https://shepherdyuan.wordpress.com/2014/07/23/linkedin-maximum-sumproduct-subarray/">here</a>.</p>

<h3>Solution</h3>

<p>After a bit exploration, I found a must easier apporach, thanks to <a href="http://blog.csdn.net/linhuanmars/article/details/39537283">code ganker</a> and <a href="http://yucoding.blogspot.sg/2014/10/leetcode-quesion-maximum-product.html">Yu</a>. The idea is to simply ALWAYS CALCULATE preMax and preMin by using MAX/MIN(Val1, Val2, Val3) method.</p>

<h3>My Code</h3>

<pre><code>public class Solution {
    public int maxProduct(int[] A) {
        if (A == null || A.length == 0) {
            return 0;
        } else if (A.length == 1) {
            return A[0];
        }

        int preMax = A[0];
        int preMin = A[0];
        int max = A[0];

        for (int i = 1; i &lt; A.length; i++) {
            int temp = preMin;
            preMin = Math.min(Math.min(preMin * A[i], preMax * A[i]), A[i]);
            preMax = Math.max(Math.max(temp * A[i], preMax * A[i]), A[i]);
            max = Math.max(max, preMax);
        }

        return max;
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
