<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woodstock Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-09-08T17:34:26+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 11.4 Test Webpage Without Tools]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/test-webpage-without-tool/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/test-webpage-without-tool</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>How would you load test a webpage without using any test tools?</p></blockquote>

<h3>Solution</h3>

<h4>Load testing</h4>

<p><strong><a href="http://en.wikipedia.org/wiki/Load_testing">Load testing</a></strong> is testing under normal and peak load condition. It&rsquo;s also called software performance testing, reliability testing, and volume testing.</p>

<h4>Steps</h4>

<p><strong>First identify the performance-critical scenarios</strong>, which might include:</p>

<ol>
<li>response time</li>
<li>throughput</li>
<li>resource utilization</li>
<li>max load that system can bear</li>
</ol>


<p><strong>Then, design tests to simulate the load</strong>: we can create virtual users by a multi-threaded program with 1000 thread, each acting as a user loading the page. We measure response time of each user.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 11.2 Random Error Debugging 2]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/random-error-debugging-2/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/random-error-debugging-2</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>You are given the source to an application which crashes when it is run After running it ten times in a debugger, you find it never crashes in the same place The application is single threaded, and uses only the C standard library What programming errors could be causing this crash? How would you test each one?</p></blockquote>

<h3>Solution</h3>

<p>This question is from CC150v4, but my previous post <strong>[Testing] Random error debugging 1</strong> already covered this question.</p>

<p>Again, the answer is very similar:</p>

<ol>
<li>Depends on random variable

<ol>
<li>RNG</li>
<li>depends on user input</li>
<li>depends on system date/time</li>
</ol>
</li>
<li>Memory Leak

<ol>
<li>out of RAM</li>
<li>heap overflow</li>
<li>stack data corruption</li>
</ol>
</li>
<li>System Dependency

<ol>
<li>depends on external module</li>
<li>depends on some system attributed that&rsquo;s being modified by another application (this is especially for hardware-facing applications)</li>
</ol>
</li>
</ol>


<p>In general, <strong>Web server is more prone to Memory Leak</strong>, and program that runs <strong>close to system level</strong> is more prone to system dependency errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.5 Java Reflection]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-reflection/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-reflection</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Explain what object reflection is in Java and why it is useful.</p></blockquote>

<h3>Solution</h3>

<p><strong><a href="http://tutorials.jenkov.com/java-reflection/index.html">Java Reflection</a> makes it possible to inspect classes, interfaces, fields and methods at runtime</strong>, without knowing the names of the classes, methods etc. at compile time. It is also possible to instantiate new objects, invoke methods and get/set field values using reflection.</p>

<p>For example, say you have an object of <a href="http://stackoverflow.com/a/37632">an unknown type in Java</a>, and <strong>you would like to call a &lsquo;doSomething&rsquo; method on it if one exists</strong>. Java&rsquo;s static typing system isn&rsquo;t really designed to support this unless the object conforms to a known interface, <strong>but using reflection</strong>, your code can look at the object and find out if it has a method called &lsquo;doSomething&rsquo; and then call it if you want to. Like this:</p>

<pre><code>Method method = foo.getClass().getMethod("doSomething", null);
method.invoke(foo, null);
</code></pre>

<h4>Usage in Junit</h4>

<p>One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to <strong>look through your classes for methods tagged with the @Test annotation</strong>, and will then call them when running the unit test.</p>

<h3>Code</h3>

<p>The following example code is covered in <a href="http://tutorials.jenkov.com/java-reflection/index.html">this post</a>:</p>

<pre><code>public class JavaReflection {

    public static void main(String[] args) {
        Method[] methods;

        methods = ListNode.class.getMethods();

        for (Method method : methods) {
            System.out.println(formatMethodName(method.getName() + "()")
                    + method.getDeclaringClass());
        }
    }

    private static String formatMethodName(String methodName) {
        for (int i = methodName.length(); i &lt; 30; i++) {
            methodName += ".";
        }
        return methodName;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.1 Java Private Constructor]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-private-constructor/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-private-constructor</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>In terms of inheritance, what is the effect of keeping a constructor private?</p></blockquote>

<h3>Solution</h3>

<p><a href="http://www.javapractices.com/topic/TopicAction.do?Id=40">If the programmer</a> does not provide a constructor for a class, <strong>the system will always provide a default, public no-argument constructor</strong>.</p>

<p>To disable this default constructor, simply add a private no-argument constructor to the class.</p>

<p>Two categories of usage:</p>

<ol>
<li><p>Object construction is entirely forbidden</p>

<ol>
<li>class offers only static members (sometimes called <strong><a href="http://stackoverflow.com/a/17342889">utility class</a></strong>)</li>
</ol>
</li>
<li><p>Object construction is private only</p>

<ol>
<li>a class needs to prevent the caller from creating objects, like Singleton</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.6 Java HashMap Counter]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-hashmap-counter/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-hashmap-counter</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Suppose you are using a map in your program, how would you count the number of times the program calls the put() and get() functions?</p></blockquote>

<h3>Solution</h3>

<p><strong>Write a wrapper class upon the HashMap Class</strong>, and override the ger() and put() methods.</p>

<p>However, what if we have multiple instance of hashmap? <strong>Solution is to use a static variable to count</strong>. Some answers are found <a href="http://stackoverflow.com/a/20027116">here</a>.</p>

<p>Good question this is!</p>

<h3>Code</h3>

<pre><code>public static class MyHashMap&lt;K, V&gt; extends HashMap&lt;K, V&gt; {

    private static final long serialVersionUID = 1L;
    private static int count = 0;

    public V put(K key, V value) {
        count++;
        return super.put(key, value);
    }

    public V get(Object key) {
        count++;
        return super.get(key);
    }

    public static int getCount() {
        return count;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.2 Java Finally Statement]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-finally-statement/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-finally-statement</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>In Java, does the finally block gets executed if we insert a return statement inside the try block of a try-catch-finally?</p></blockquote>

<h3>Solution</h3>

<p>Yes, it will.</p>

<p>Even when we attempt to exit within the try block (normal exit, return, continue, break or any exception), <strong>the finally block will still be executed</strong>.</p>

<p>The only time finally <a href="http://stackoverflow.com/a/65049">won&rsquo;t be called</a> is if you call System.exit() or if the JVM crashes first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.3 Java Final, Finally and Finalize]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-final-finally-finalize/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-final-finally-finalize</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>What is the difference between Final, Finally, and finalize?</p></blockquote>

<h3>final</h3>

<p><strong>is a keyword</strong>.</p>

<ol>
<li><strong>Variable</strong> decleared as final should be initialized only once and cannot be changed.</li>
<li><strong>Classes</strong> declared as final cannot be extended.</li>
<li><p><strong>Methods</strong> declared as final cannot be overridden.</p>

<p> private final String name = &ldquo;foo&rdquo;;</p>

<p> public final String toString() {  return &ldquo;NULL&rdquo;; }</p>

<p> // final can also make a class not &ldquo;inheritable&rdquo;
 public final class finalClass {&hellip;}
 public class classNotAllowed extends finalClass {&hellip;}
 // Not allowed</p></li>
</ol>


<h3>finally</h3>

<p><strong>is a block</strong>.</p>

<p>The finally block <strong>always executes</strong> when the try block exits (even if an unexpected exception occurs).</p>

<pre><code>lock.lock();
try {
    //do stuff
} catch (SomeException se) {
    //handle se
} finally {
    lock.unlock(); //always executed, even if Exception or Error or se
}
</code></pre>

<h3>finalize</h3>

<p><strong>is a method</strong>.</p>

<p><strong>It&rsquo;s called by Garbage Collector</strong> before reclaiming GC eligible objects.</p>

<pre><code>public void finalize() {
    //free resources (e.g. unallocate memory)
    super.finalize();
}
</code></pre>

<p><a href="http://www.java2novice.com/java_interview_questions/final-finally-finalize/">source1</a></p>

<p><a href="http://javarevisited.blogspot.sg/2012/11/difference-between-final-finally-and-finalize-java.html">source2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 10.4 Implement Mathematical Operators]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/implement-math-operators/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/implement-math-operators</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write a method to implement *, &ndash; , / operations You should use only the + operator.</p></blockquote>

<h3>Solution</h3>

<p><strong>First it&rsquo;s important to write a &lsquo;negate&rsquo; operator</strong>. This is used in all other operations.</p>

<pre><code>public static int FnNegate(int a) {
    int neg = 0;
    int d = a &lt; 0 ? 1 : -1;
    while (a != 0) {
        neg += d;
        a += d;
    }
    return neg;
}
</code></pre>

<p>Although we can only use +, the author also used > and &lt; comparison operators.</p>

<p>This is a borning question, I did not write code myself.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>/* Flip a positive sign to negative, or a negative sign to pos */
public static int FnNegate(int a) {
    int neg = 0;
    int d = a &lt; 0 ? 1 : -1;
    while (a != 0) {
        neg += d;
        a += d;
    }
    return neg;
}

/* Subtract two numbers by negating b and adding them */
public static int FnMinus(int a, int b) {
    return a + FnNegate(b);
}

/* Check if a and b are different signs */
public static boolean DifferentSigns(int a, int b) {
    return ((a &lt; 0 &amp;&amp; b &gt; 0) || (a &gt; 0 &amp;&amp; b &lt; 0)) ? true : false;
}

/* Return absolute value */
public static int abs(int a) {
    if (a &lt; 0)
        return FnNegate(a);
    else
        return a;
}

/* Multiply a by b by adding a to itself b times */
public static int FnTimes(int a, int b) {
    if (a &lt; b)
        return FnTimes(b, a); // algo is faster if b &lt; a
    int sum = 0;
    for (int iter = abs(b); iter &gt; 0; --iter)
        sum += a;
    if (b &lt; 0)
        sum = FnNegate(sum);
    return sum;
}

// returns 1, if a/b &gt;= 0.5, and 0 otherwise
public static int DefineAndRoundFraction(int a, int b) {
    if (FnTimes(abs(a), 2) &gt;= abs(b))
        return 1;
    else
        return 0;
}

/*
 * Divide a by b by literally counting how many times does b go into a. That
 * is, count how many times you can subtract b from a until you hit 0.
 */
public static int FnDivide(int a, int b)
        throws java.lang.ArithmeticException {
    if (b == 0) {
        throw new java.lang.ArithmeticException("ERROR: Divide by zero.");
    }
    int quotient = 0;
    int divisor = FnNegate(abs(b));
    int divend; /* dividend */
    for (divend = abs(a); divend &gt;= abs(divisor); divend += divisor) {
        ++quotient;
    }
    if (DifferentSigns(a, b))
        quotient = FnNegate(quotient);
    return quotient;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 10.6 Find Collinear in 2D Plane]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/find-coliner-in-2d-plane/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/find-coliner-in-2d-plane</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Given a two dimensional graph with points on it, find a line which passes the most number of points.</p></blockquote>

<h3>Solution</h3>

<p>For this question, we used to use HashMap(Double, Integer) to do. However, the answer suggested in the book define its own Line Class, and uses HashMap(Line, Intger).</p>

<p>This is a much better solution, however, I failed to write it, don&rsquo;t know why.</p>

<p><strong>The key is to override the 2 methods</strong>:</p>

<pre><code>@override
public int hashCode() {}

@override
public boolean equals(Object o) {}
</code></pre>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<p>Line.java</p>

<pre><code>public class Line {

    private static double epsilon = .0001;

    public double slope;
    public double intercept;
    private boolean infinite_slope = false;

    public Line(GraphPoint p, GraphPoint q) {
        if (Math.abs(p.x - q.x) &gt; epsilon) { // if x痴 are different
            slope = (p.y - q.y) / (p.x - q.x); // compute slope
            intercept = p.y - slope * p.x; // y intercept from y=mx+b
        } else {
            infinite_slope = true;
            intercept = p.x; // x-intercept, since slope is infinite
        }
    }

    public boolean isEqual(double a, double b) {
        return (Math.abs(a - b) &lt; epsilon);
    }

    public void Print() {
        System.out.println("slope = " + slope + "\nintercept = " + intercept);
    }

    @Override
    public int hashCode() {
        int sl = (int) (slope * 1000);
        int in = (int) (intercept * 1000);
        return sl | in;
    }

    @Override
    public boolean equals(Object o) {
        Line l = (Line) o;
        if (isEqual(l.slope, slope) &amp;&amp; isEqual(l.intercept, intercept)
                &amp;&amp; (infinite_slope == l.infinite_slope)) {
            return true;
        }
        return false;
    }
}
</code></pre>

<p>Main method:</p>

<pre><code>public static Line findBestLine(GraphPoint[] points) {

    Line bestLine = null;
    HashMap&lt;Line, Integer&gt; line_count = new HashMap&lt;Line, Integer&gt;();

    for (int i = 0; i &lt; points.length; i++) {
        for (int j = i + 1; j &lt; points.length; j++) {
            Line line = new Line(points[i], points[j]);
            if (!line_count.containsKey(line)) {
                line_count.put(line, 0);
            }
            line_count.put(line, line_count.get(line) + 1);
            if (bestLine == null
                    || line_count.get(line) &gt; line_count.get(bestLine)) {
                bestLine = line;
                System.out.println("bestLine upodated! count = "
                        + line_count.get(line));
            }
        }
    }
    return bestLine;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] Chap9 Example - Sort Persons]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/sort-persons/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/sort-persons</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>You have a very large array of ‘Person’ objects. Sort the people in increasing order of age.</p></blockquote>

<h3>Solution</h3>

<p>First we look at the nature of this question:</p>

<ol>
<li>large input array</li>
<li>sort based on age (<strong>which is between 1 and 100</strong>, this is important)</li>
</ol>


<p><strong>This exactly matches the charasteristics of Bucket Sort</strong>. Time complexity in average case is O(n + k) where k is the number of buckets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 9.5 Search Array Containing Empty String]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/search-array-containing-empty-string/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/search-array-containing-empty-string</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Given a sorted array of strings which is interspersed with empty strings, write a method to find the location of a given string.</p>

<p>Example: find “ball” in [“at”, “”, “”, “”, “ball”, “”, “”, “car”, “”, “”, “dad”, “”, “”] will return 4</p>

<p>Example: find “ballcar” in [“at”, “”, “”, “”, “”, “ball”, “car”, “”, “”, “dad”, “”, “”] will return -1</p></blockquote>

<h3>Solution</h3>

<p>The solution is binary search, but when reads empty, <strong>advance to the next non-empty string</strong>.</p>

<p>But wait, <strong>there can be a very big problem that causes looping forever</strong>. Eg.</p>

<blockquote><p>&ldquo;a&rdquo;, &ldquo;&rdquo;, &ldquo;&rdquo;, &ldquo;&rdquo;, &ldquo;c&rdquo; (5 items), look for &ldquo;b&rdquo;</p>

<p>Now &lsquo;left&rsquo; points to 1st string(&ldquo;a&rdquo;) and &lsquo;right&rsquo; points to 4th(&ldquo;&rdquo;). If we read read &lsquo;mid&rsquo; value and advance to the next non-empty string, it&rsquo;ll be &ldquo;c&rdquo;.</p>

<p>since &ldquo;c&rdquo; is large than &ldquo;b&rdquo;, &lsquo;right&rsquo; is set to the 4th index. It&rsquo;s a endless loop!</p></blockquote>

<p>There&rsquo;re various ways to solve this. The book suggests <strong>locate &lsquo;right&rsquo; pointer at non-empty string</strong> by moving left, and then <strong>locate &lsquo;mid&rsquo; pointer at non-empty</strong> by moving right. This avoids endless loop.</p>

<p>My approach is to use 2 instances of &lsquo;mid&rsquo;:</p>

<ol>
<li>calculatedMid</li>
<li>comparisonMid</li>
</ol>


<p>Both ways are fine.</p>

<h3>Code</h3>

<pre><code>public static int search(String[] input, String target) {
    if (target == null || target.length() == 0) {
        return -1;
    }
    int len = input.length;
    int left = 0, right = len - 1;
    while (left &lt; right) {
        int calculatedMid = left + (right - left) / 2;
        int comparisonMid = calculatedMid;
        while (comparisonMid &lt; len &amp;&amp; input[comparisonMid].length() == 0) {
            comparisonMid++;
        }
        if (input[comparisonMid].equals(target)) {
            return comparisonMid;
        } else if (input[comparisonMid].compareTo(target) &lt; 0) {
            left = comparisonMid + 1;
        } else {
            right = calculatedMid - 1;
        }
    }
    if (left &lt; len &amp;&amp; input[left].equals(target)) {
        return left;
    } else {
        return -1;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 8.4 Generate Permutation Recursively]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/generate-permutation-recursively/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/generate-permutation-recursively</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write a method to compute all permutations of a string.</p>

<p>Do it recursively.</p></blockquote>

<h3>Solution</h3>

<ol>
<li><p>Get first char.</p></li>
<li><p>Permute the reminder of the string.</p></li>
<li><p>Insert that char into all possible positions.</p></li>
</ol>


<p>The code is more concise that doing it iteratively, <strong>and no visited array needed</strong>!</p>

<h3>Code</h3>

<pre><code>public static ArrayList&lt;String&gt; getPerms(String s) {
    ArrayList&lt;String&gt; ans = new ArrayList&lt;String&gt;();
    if (s.length() == 1) {
        ans.add(s);
        return ans;
    }
    char single = s.charAt(0);
    ArrayList&lt;String&gt; partialPerms = getPerms(s.substring(1));
    for (String part : partialPerms) {
        for (int i = 0; i &lt;= part.length(); i++) {
            ans.add(part.substring(0, i) + single + part.substring(i));
        }
    }
    return ans;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 5.7 Find Missing Number]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/find-missing-number/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/find-missing-number</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>An array A[1&hellip;n] contains all the integers from 0 to n except for one number which is missing. In this problem, we cannot access an entire integer in A with a single operation.</p>

<p>The elements of A are represented in binary, and the only operation we can use to access them is “fetch the jth bit of A[i]”, which takes constant time. Write code to find the missing integer. Can you do it in O(n) time?</p></blockquote>

<h3>Solution</h3>

<p><strong>This is a difficult bit operation question</strong>.</p>

<p>The main thing to understand is, for a particular bit:</p>

<blockquote><p>if the bit value of the removed number is 0, then count(0) &lt;= count(1)</p>

<p>if the bit value of the removed number is 1, then count(0) > count(1)</p></blockquote>

<p>By using this principle, we can easily find the missing value for each bit.</p>

<p><strong>However, we must know when to stop checking</strong>. For example:</p>

<blockquote><p>input: 000, 001, 011</p></blockquote>

<p>We know that the last bit is 0, second last is 1. We shall stop here and return the result &ldquo;010&rdquo;. If we did not stop, the result value would be &ldquo;110&rdquo;, which is wrong. How this is handled is by <strong>passing only half of the input list each time</strong>, and we also add one condition at the beginning:</p>

<pre><code>if (list.size() == 0)
    return 0;
</code></pre>

<p>By doing this, we always limit the input list to a smaller range, until we finish finding all bits.</p>

<h3>Code</h3>

<p><strong>hard to write</strong></p>

<pre><code>public static int findMissing(List&lt;BitInteger&gt; list) {
    return helper(list, BitInteger.INTEGER_SIZE - 1);
}

private static int helper(List&lt;BitInteger&gt; list, int col) {
    if (list.size() == 0)
        return 0;
    List&lt;BitInteger&gt; zeroList = new ArrayList&lt;BitInteger&gt;();
    List&lt;BitInteger&gt; oneList = new ArrayList&lt;BitInteger&gt;();
    for (BitInteger bit : list) {
        if (bit.fetch(col) == 0) {
            zeroList.add(bit);
        } else {
            oneList.add(bit);
        }
    }
    if (zeroList.size() &lt;= oneList.size()) {
        // this means the missing value contains a 0
        return helper(zeroList, col - 1) &lt;&lt; 1;
    } else {
        // the missing value contains 1
        return helper(oneList, col - 1) &lt;&lt; 1 | 1;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 6.2 Cover the Chess Board]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/cover-the-chess-board/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/cover-the-chess-board</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>There is an 8x8 chess board in which two diagonally opposite squares have been cut off. You are given 31 dominos, and a single domino can cover exactly two squares.</p>

<p>Can you use the 31 dominos to cover the entire board? Prove your answer (by providing an example, or showing why it’s impossible).</p></blockquote>

<h3>Solution</h3>

<p>The chess board initially has 32 black and 32 white squares. By removing opposite corners, we&rsquo;re left with 30 of one color and 32 of the other color.</p>

<p>31 dominos must cover 31 of one color and 31 of the other color.</p>

<p>So, impossible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 5.2 Convert Integer to Binary Form]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/convert-integer-to-binary/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/convert-integer-to-binary</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Given a (decimal &ndash; e.g. 3.72) number that is passed in as a string, print the binary representation.</p>

<p>If the number can not be represented accurately in binary, print “ERROR”</p></blockquote>

<h3>Solution</h3>

<p>Convert the integer part is easy.</p>

<p><strong>The difficulty is how to convert a floating point (the decimal part) to binary form</strong>. The idea suggested in the book is to keep x2, and subtract 1 when necessary. Eg.</p>

<blockquote><p>0.625 x 2 = 1.25, append 1</p>

<p>0.25 x 2 = 0.5, append 0</p>

<p>0.5 x 2 = 1, append 1</p>

<p>the binary form of 0.625 would be 0.101.</p></blockquote>

<p>We must declarify the max number of digits in the decimal part. In the book, <strong>the answer assumes a maximum digits of 32 bits</strong> (i.e. when binary length grows more than 32 bits, return &ldquo;Error&rdquo;).</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static String printBinary(String n) {
    String[] num = n.split("\\.");
    int integer = Integer.parseInt(num[0]);
    double decimal = Double.parseDouble("0." + num[1]);

    // now convert decimal part, if can't convert, return ERROR
    StringBuilder sb = new StringBuilder();
    while (decimal != 0) {
        if (sb.length() &gt; 32) {
            return "ERROR";
        }
        double newDoub = 2 * decimal;
        sb.append(newDoub &gt;= 1 ? "1" : "0");
        decimal = newDoub % 1;
    }

    // now convert integer part
    String intStr = "";
    while (integer != 0) {
        intStr = ((integer &amp; 1) == 1 ? "1" : "0") + intStr;
        integer = integer &gt;&gt; 1;
    }

    // return the 2 parts connected with a dot
    return intStr + "." + sb.toString();
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 3.6 Sort Stack]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/sort-stack/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/sort-stack</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write a program to sort a stack in ascending order. You should not make any assumptions about how the stack is implemented.</p>

<p>The following are the only functions that should be used to write this program: push | pop | peek | isEmpty.</p></blockquote>

<h3>Solution</h3>

<p>This is a very good question that tests stack operations.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static Stack&lt;Integer&gt; sort(Stack&lt;Integer&gt; s) {
    Stack&lt;Integer&gt; result = new Stack&lt;Integer&gt;();
    while (!s.isEmpty()) {
        Integer nextNum = s.pop();
        while (!result.isEmpty() &amp;&amp; result.peek() &lt; nextNum) {
            s.push(result.pop());
        }
        result.push(nextNum);
    }
    return result;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 4.8 Print Path Sum to Value]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/print-path-sum-to-value/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/print-path-sum-to-value</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>You are given a binary tree in which each node contains a value. Design an algorithm to print all paths which sum up to that value. Note that it can be any path in the tree &ndash; it does not have to start at the root.</p></blockquote>

<h3>Solution</h3>

<p><strong>Keep a list of items as buffer</strong>, and check the following condition:</p>

<blockquote><p>“does this node complete a path with the sum?”</p></blockquote>

<p>There&rsquo;re n nodes in total, and the max size of buffer is lg(n), so the time complexity is O(nlgn).</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static void find(TreeNode head, int target) {
    findSum(head, target, new ArrayList&lt;Integer&gt;());
}

private static void findSum(TreeNode node, int target, List&lt;Integer&gt; buffer) {
    if (node == null)
        return;

    buffer.add(node.data);
    int sum = 0;
    for (int i = buffer.size() - 1; i &gt;= 0; i--) {
        sum += buffer.get(i);
        if (sum == target) {
            // from (i)th element until the last element is a valid path
            printPath(buffer, i);
        }
    }

    List&lt;Integer&gt; clone1 = new ArrayList&lt;Integer&gt;(buffer);
    findSum(node.left, target, clone1);

    List&lt;Integer&gt; clone2 = new ArrayList&lt;Integer&gt;(buffer);
    findSum(node.right, target, clone2);
}

private static void printPath(List&lt;Integer&gt; buffer, int start) {
    System.out.print("Path: ");
    for (int i = start; i &lt; buffer.size(); i++) {
        System.out.print(buffer.get(i) + " ");
    }
    System.out.println();
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 3.4 Towers of Hanoi]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/hanoi-tower/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/hanoi-tower</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>In the classic problem of the Towers of Hanoi, you have 3 rods and N disks of di!erent sizes which can slide onto any tower. The puzzle starts with disks sorted in ascending order of size from top to bottom (e.g., each disk sits on top of an even larger one). You have the following constraints:</p></blockquote>

<ol>
<li>Only one disk can be moved at a time.</li>
<li>A disk is slid o! the top of one rod onto the next rod.</li>
<li>A disk can only be placed on top of a larger disk.</li>
</ol>


<blockquote><p>Write a program to move the disks from the &ldquo;rst rod to the last using Stacks.</p></blockquote>

<h3>Solution</h3>

<p>This is a <strong>classic recursive question</strong>. The solution code is supposed to be very concise.</p>

<h3>Code</h3>

<p><strong>written by me</strong>, slightly different from the answer in the book, but good.</p>

<p>Main class:</p>

<pre><code>public class HanoiMyAnswer {

    private static Rod r0, r1, r2;
    private static final int NUM_DISKS = 5;

    public static void main(String[] args) {
        // Hanoi Tower always have 3 rods
        r0 = new Rod(0);
        r1 = new Rod(1);
        r2 = new Rod(2);

        // Put some disks on the 1st rod, leaving 2nd and 3rd rod empty
        r0.setDisks(NUM_DISKS);

        // start main algorithm
        System.out.println("My answer: ");
        moveDisks(NUM_DISKS, r0, r2, r1);
    }

    private static void moveDisks(int number, Rod from, Rod to, Rod buffer) {
        if (number == 1) {
            int topValue = from.disks.pop();
            to.disks.push(topValue);
            displayMessage(topValue, from.name, to.name);
        } else {
            moveDisks(number - 1, from, buffer, to);
            int bottomValue = from.disks.pop();
            to.disks.push(bottomValue);
            displayMessage(bottomValue, from.name, to.name);
            moveDisks(number - 1, buffer, to, from);
        }
    }

    private static void displayMessage(int disk, int from, int to) {
        System.out.println("Disk[" + disk + "]: Rod" + from + "--&gt;" + to);
    }
}
</code></pre>

<p>Rod.java</p>

<pre><code>class Rod {

    int name;
    Stack&lt;Integer&gt; disks = new Stack&lt;Integer&gt;();

    public Rod(int rodIndex) {
        this.name = rodIndex;
    }

    public void setDisks(int n) {
        // this method will insert n disks on this Rod
        // the bottom disk is indexed as (n-1) and top one is 0
        disks.clear();
        for (int i = n - 1; i &gt;= 0; i--) {
            disks.push(i);
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 4.5 Find Next Node in BST]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/find-next-node-bst/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/find-next-node-bst</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write an algorithm to find the ‘next’ node (i.e., in-order successor) of a given node in a binary search tree where each node has a link to its parent.</p></blockquote>

<h3>Solution</h3>

<ol>
<li><p><strong>If current node have a right child</strong>, return the leftmost leaf of right child.</p></li>
<li><p><strong>If current node have no right child</strong>:</p>

<ol>
<li><p>If current is parent&rsquo;s left child, then return parent node.</p></li>
<li><p>If current is parent&rsquo;s right child, look all the way up until find a right-turning parent.</p></li>
<li><p>If all parent is not right-turning. Return null.</p></li>
</ol>
</li>
</ol>


<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static TreeNode inorderSucc(TreeNode e) {
    if (e == null)
        return null;
    if (e.right != null) {
        TreeNode p = e.right;
        while (p.left != null) {
            p = p.left;
        }
        return p;
    } else {
        TreeNode p = e.parent;
        while (p != null &amp;&amp; p.right == e) {
            e = p;
            p = e.parent;
        }
        return p;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 4.7 Check Subtree]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/check-subtree/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/check-subtree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>You have two very large binary trees: T1, with millions of nodes, and T2, with hundreds of nodes. Create an algorithm to decide if T2 is a subtree of T1.</p></blockquote>

<h3>Solution</h3>

<p><strong>The best solution is to print inorder and preorder traversal</strong> of both trees. Find whether the 2 traversal string of T2 <strong>is substring of the traversal of T1</strong>.</p>

<p>This is a very good idea of checking subtree of a Binary Tree. However, this solution is very <strong>memory intensive</strong>.</p>

<p><strong>The alternative solution</strong> simply checks the tree similarity for each and every node.</p>

<p>Time complexity:</p>

<p>If k is the number of occurrences of T2’s root in T1, the worst case runtime can be characterized as O(n + k * m). So it&rsquo;s slower.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static boolean containsTree(TreeNode t1, TreeNode t2) {
    if (t1 == null) {
        return false;
    } else if (matchTree(t1, t2)) {
        return true;
    } else {
        return containsTree(t1.left, t2) || containsTree(t1.right, t2);
    }
}

private static boolean matchTree(TreeNode t1, TreeNode t2) {
    if (t2 == null) {
        return true;
    } else if (t1 == null) {
        return false;
    } else if (t1.data != t2.data) {
        return false;
    } else {
        return matchTree(t1.left, t2.left) &amp;&amp; matchTree(t1.right, t2.right);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
