<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woodstock Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2015-02-10T17:18:47+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (4)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/11/speed-up-web-page-4/"/>
    <updated>2015-02-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/11/speed-up-web-page-4</id>
    <content type="html"><![CDATA[<h3>What hijacks your load time</h3>

<h4>1. Too Many HTTP Requests</h4>

<p>This is the single biggest contributor to performance problems in most web pages.</p>

<ol>
<li><p>Concatenate scripts and stylesheets</p></li>
<li><p>Combine images with sprites (put common images into a single large image file, then use CSS to position and selectively display the appropriate portion of the sprite image)</p></li>
<li><p>Use fewer images, more CSS.</p></li>
</ol>


<h4>2. Minimal Client-side Processing</h4>

<ol>
<li><p>Validation on client. (eg. form input)</p></li>
<li><p>Use web standards and MVC separation, making a maintainable, accessible, future-proof and max-performance website.</p>

<p> Think of the HTML as the model, the CSS as the view, and the JavaScript as the controller. This separation tends to make code more efficient and maintainable, and makes many optimization techniques much more practical to apply.</p></li>
<li><p>Push presentation code into the client tier (eg. Charts and graphs — push raw data to the client in JSON format, and use JavaScript and CSS to create pretty graphs.)</p></li>
<li><p>Leverage Ajax techniques (only requiring small parts of the page to change in response to user actions)</p></li>
</ol>


<h4>3. Low Number of Parallel Requests</h4>

<p>Fetch a script, parse and execute it, then fetch another one&hellip; this will use up all the available connections. There are things you can do to your HTML to allow virtually any browser to make many requests at once, which has a huge impact on latency.</p>

<ol>
<li><p>Use browser-appropriate domain sharding</p></li>
<li><p>Use intelligent script loading</p></li>
<li><p>Leverage Keep-Alive (reuse the same TCP connection for multiple HTTP request/response cycles)</p></li>
</ol>


<h4>4. Failure to leverage browser cache / local storage</h4>

<ol>
<li><p><a href="http://www.mnot.net/cache_docs/">HTTP cache overview</a></p></li>
<li><p>Leverage local storage</p></li>
</ol>


<h4>5. Third-party widgets</h4>

<ol>
<li>Avoid third-party widgets!</li>
<li>Try to use widgets that provide asynchronous implementations, so their inevitably terrible performance impacts their widget without dragging down your entire UX with it.</li>
</ol>


<h4>7. Failure to Use a Global Network</h4>

<p>Amazon S3.</p>

<p>Ref: <a href="http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/">http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (3)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/11/speed-up-web-page-3/"/>
    <updated>2015-02-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/11/speed-up-web-page-3</id>
    <content type="html"><![CDATA[<h3>Website KPI</h3>

<p>There are <a href="https://community.compuwareapm.com/community/display/PUB/Best+Practices+on+Web+Site+Performance+Optimization">3 interesting phases</a> of a web site from an end-user performance perspective.</p>

<ol>
<li>First Impression</li>
<li>OnLoad</li>
<li>Fully Loaded Time.</li>
</ol>


<h3>Loading Time</h3>

<p><strong>Question: what percentage of the time a user spends waiting for your page to load is spent after the HTML comes back to their browser</strong>?</p>

<p>It is typically <strong><a href="http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/">over 90%</a></strong>.</p>

<p>Most of the time users spend waiting on your website is spent after the HTML page has been retrieved by their browser.</p>

<h4>Fetching the HTML is just the beginning</h4>

<p><strong>In a nutshell, browsers parse your page’s HTML, sequentially discovering its assets</strong> (such as scripts, stylesheets, and images), requesting and then either parsing and executing them or displaying them as appropriate.</p>

<p>But these assets are not simply fetched all at once. Instead, the <strong>browser opens a limited number of connections to the server(s)</strong> referenced by the page. There is <strong>overhead involved in establishing TCP and HTTP connections</strong>, and some <strong>unavoidable latency</strong> in pushing the request and response bytes back and forth across the network.</p>

<p>So, in general, round trips between the browser and server are expensive. The structure of the HTML markup, the number and the ordering of its assets, are absolutely critical factors in its performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (2)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/11/speed-up-web-page-2/"/>
    <updated>2015-02-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/11/speed-up-web-page-2</id>
    <content type="html"><![CDATA[<p>(&hellip; continued from last post)</p>

<h4>9. Use a Content Delivery Network (CDN)</h4>

<p>Your site’s speed is greatly affected by where the user’s location is, relative to your web server. The farther away they are, the more distance the data being transmitted has to travel. Having your content cached <strong>across multiple, strategically placed geographical locations</strong> helps take care of this problem.</p>

<p>A CDN will often make your operating cost a little higher, but you definitely gain a speed bonus. Check out MaxCDN or <strong>Amazon Simple Storage Service (Amazon S3)</strong>.</p>

<h4>10. Optimize Web Caching</h4>

<p>Along with using caching systems, you should create websites that utilize <strong>web caching</strong> as much as possible. Web caching is when files are <strong>cached by the web browser</strong> for later use. Things that browsers can cache include CSS files, JavaScript files, and images.</p>

<p>Aside from the basics, such as putting CSS and JavaScript code that are used in multiple pages in external files, there are many ways to make sure that you are caching your files in the most efficient way possible.</p>

<p>For example, you can set HTTP response headers such as Expires and Last-Modified to reduce the need of re-downloading certain files when the user comes back to your site. To learn more, read about <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">caching in HTTP</a> and <a href="https://developers.google.com/speed/docs/insights/LeverageBrowserCaching?csw=1#LeverageBrowserCaching">leveraging browser caching</a>.</p>

<p>To set up HTTP Expires headers in Apache, read this tutorial on adding future expires headers.</p>

<h4>Other mentions</h4>

<ol>
<li><p><strong>Avoid Resizing Images in HTML</strong> (using HTML’s width and height attributes), for the sake of smaller file size.</p></li>
<li><p><strong>Optimize Image Sizes by Using the Correct File Format</strong>. Eg. JPG format often displays photographic images at smaller file sizes than PNG.</p></li>
<li><p><strong>Optimize the Way You Write Code</strong>. For example, instead of using (h1)(em)Your heading(em)(h1), you can easily use CSS to make your headings italics.</p>

<p> Writing code efficiently not only reduces file sizes of your HTML and CSS documents, but also makes it easier to maintain.</p></li>
</ol>


<p>Ref: <a href="http://sixrevisions.com/web-development/site-speed-performance/">http://sixrevisions.com/web-development/site-speed-performance/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (1)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/11/speed-up-web-page-1/"/>
    <updated>2015-02-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/11/speed-up-web-page-1</id>
    <content type="html"><![CDATA[<p><a href="www.geeksforgeeks.org/amazon-interview-set-72-campus-sde-1">ref</a></p>

<h3>Question</h3>

<blockquote><p>Suppose you are handling Amazon website and you have 10 MB size home page. Optimize the homepage for a customer who has 100 kbps internet connection.</p>

<p>Further he asked for the customer who has 100 mbps internet connection.</p></blockquote>

<h3>Reading</h3>

<p><a href="http://sixrevisions.com/web-development/site-speed-performance/">This</a> is a very nice article about website speedup. Below is the full quoted text.</p>

<h4>1. Defer Loading Content When Possible</h4>

<p>Ajax allows us to build web pages that can be <strong>asynchronously updated</strong> at any time. This means that instead of reloading an entire page when a user performs an action, we can simply update parts of that page.</p>

<p>We can use an image gallery as an example. Image files are big and heavy; they can slow down page-loading speeds of web pages. Instead of loading all of the images when a user first visits the web page, we can just display thumbnails of the images and then when the user clicks on them, we can asynchronously request the full-size images from the server and update the page. This way, if a user only wants to see a few pictures, they don’t have to suffer waiting for all of the pictures to download. This development pattern is called <strong>lazy loading</strong>.</p>

<p><strong>Ajax/web development libraries</strong> like jQuery, Prototype, and MooTools can make deferred content-loading easier to implement.</p>

<h4>2. Use External JS and CSS Files</h4>

<p>When the user first loads your web page, the browser will cache external resources like CSS and JavaScript files. Thus, instead of inline JavaScript and CSS files, it’s best to <strong>place them in external files</strong>.</p>

<p>Using inline CSS also increases the rendering time of a web page; having everything defined in your main CSS file lets the browser do less work when rendering the page, since it already knows all the style rules that it needs to apply.</p>

<p><strong>As a bonus</strong>, using external JavaScript and CSS files makes site maintenance easier because you only need to maintain global files instead of code scattered in multiple web pages.</p>

<h4>3. Use Caching Systems</h4>

<p>If you find that your site is connecting to your database in order to create the same content, it’s time to start using a <strong>caching system</strong>. By having a caching system in place, your site will only have to create the content once instead of creating the content every time the page is visited by your users. Don’t worry, caching systems periodically refresh their caches depending on how you set it up — so even constantly-changing web pages (like a blog post with comments) can be cached.</p>

<p><strong>Popular content management systems</strong> like WordPress and Drupal will have <strong>static caching features</strong> that convert dynamically generated pages to static HTML files to reduce unnecessary server processing. For WordPress, check out <a href="https://wordpress.org/plugins/wp-super-cache/">WP Super Cache</a> (one of the six critical WordPress plugins which, claimed by the author, enjoyed a improvement by 259.1% for content-heavy pages). Drupal has a page-caching feature in the core.</p>

<p>There are also <strong>database caching and server-side scripts caching systems</strong> that you can install on your web server (if you have the ability to do so). For example, PHP has extensions called PHP accelerators that optimize performance through caching and various other methods; one example of a <a href="http://en.wikipedia.org/wiki/PHP_accelerator">PHP accelerator</a> is APC. <a href="http://en.wikipedia.org/wiki/Database_caching">Database caching</a> improves performance and scalability of your web applications by reducing the work associated with database read/write/access processes; <strong><a href="http://www.memcached.org/">memcached</a></strong>, for example, caches frequently used database queries.</p>

<h4>8. Load JavaScript at the End of Your Document</h4>

<p>It’s best if you have your scripts loading at the end of the page rather than at the beginning. It allows for the browser to render everything before getting started with the JavaScript. This makes your web pages feel more responsive because the way JavaScript works is that it blocks anything below it from rendering until it has finished downloading. If possible, reference JavaScript right before the closing (body) tag of your HTML documents. To learn more, read about deferring the loading of JavaScript.</p>

<p>(to be continued&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Design Cache System (`)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/10/design-cache-system/"/>
    <updated>2015-02-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/10/design-cache-system</id>
    <content type="html"><![CDATA[<h3>Easy version</h3>

<p>[Q] Design a layer <strong>in front of a system</strong> which cache the last n requests and the responses to them from the system.</p>

<p><strong><a href="http://blog.csdn.net/hexinuaa/article/details/6630384">Solution</a></strong>:</p>

<p>[a] When a request comes look it up in the cache and if it hits then return the response from here and do not pass the request to the system</p>

<p>[b] If the request is not found in the cache then pass it on to the system</p>

<p>[c] Since cache can only store the last n requests, Insert the n+1th request in the cache and delete one of the older requests from the cache</p>

<p>[d]Design one cache such that all operations can be done in O(1) – lookup, delete and insert.</p>

<h3>Distributed Cache</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Number of Slices]]></title>
    <link href="http://okckd.github.io/blog/2015/02/09/number-of-slices/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/09/number-of-slices</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=5090693043191808">link</a></p>

<blockquote><p>Calculate the number of slices. Slice means that the difference between the maximum and minimum in the slice &lt;= 2.</p>

<p>eg. Given array 3 5 7 6 3.</p>

<p>There&rsquo;re 10: (0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (0,1) (1,2) (1,3) (2,3).</p></blockquote>

<h3>Solution</h3>

<p>If only asked to output the total number of such slices, we can do it in <strong>O(n) using sliding-window-like algorithm</strong>, with the help of addtional queue-like data structure.</p>

<p>This is <strong>a very difficult question</strong>! Quoted from the <a href="http://www.careercup.com/question?id=5090693043191808">top answer</a>:</p>

<blockquote><p>The basic idea is that you can start with arr[0] and then see <strong>how many more elements you can include before you violate the max -min &lt;= K constraint</strong>. When you reach some index j you can no longer include, you know the maximum subarray starting at index 0 is arr[0&hellip;j-1], and you can count j different subarrays there.</p>

<p>&hellip; you then start with a[1]. Now [1&hellip;j-1] has to be valid, so you try to advance the right boundary again (try arr[1&hellip;j], then arr[1&hellip;j+1]) and so on until again you reach a point past which you can&rsquo;t advance. Then you&rsquo;ll try string at a[2], and so on. This is what they mean when they talk about <strong>&ldquo;crawling&rdquo; over the array</strong>.</p>

<p>The key issue here is how you will check whether a particular subarray is valid efficiently&hellip;</p></blockquote>

<p>Sliding window is explained above. Now, <strong>the minMaxQueue</strong> explain in <a href="https://codility.com/media/train/solution-count-bounded-slices.pdf">this pdf</a>:</p>

<blockquote><p>The PDF &hellip; have <strong>1 queue each</strong> (i.e. 2 queues in total) for min and max (the min is treated analogous to the max case).</p>

<p>For maxQueue, whenever a new value comes in the max queue, they remove all values less than the value, since those <strong>can never be the max</strong>. For that reason the queue&rsquo;s values are in descending order. And the max at any given time is the first element.</p></blockquote>

<p>In this way, getting min/max is O(1), thus entire solution is O(n). Nice question!</p>

<h3>Code</h3>

<p>Not written.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Intro to Google Spanner]]></title>
    <link href="http://okckd.github.io/blog/2015/02/09/intro-google-spanner/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/09/intro-google-spanner</id>
    <content type="html"><![CDATA[<h3>Spanner</h3>

<p><a href="http://en.wikipedia.org/wiki/Spanner_%28database%29">Spanner</a> is Google&rsquo;s globally <strong>distributed NewSQL database, the successor to BigTable</strong>. Google describes Spanner as not a pure relational system because each table must have a primary-key column.</p>

<p>Currently, <strong>F1, Google&rsquo;s advertisement platform</strong>, uses Spanner. Gmail and Google Search will also use it soon.</p>

<h3>NewSQL VS. NoSQL</h3>

<p><strong>NewSQL</strong>, a wholly different database architecture, differentiated from NoSQL, is beginning to emerge.</p>

<h4>NoSQL</h4>

<p>There are many reasons why NoSQL products have been popular. As there are a variety of NoSQL products. As you can see in Hadoop or Cassandra, main advantages of NoSQL is its horizontal scalability.</p>

<p>As these NoSQL products <strong>don&rsquo;t provide Strong Consistency</strong>, they cannot be used where <strong>high-level data consistency</strong> is required.</p>

<h4>NewSQL</h4>

<p>NewSQL has as <strong>excellent scalability</strong> as NoSQL, and at the same time it <strong>guarantees ACID like RDBMS</strong> which is performed in a single node.</p>

<h3>What is Spanner?</h3>

<p>Spanner is <a href="http://www.cubrid.org/blog/dev-platform/spanner-globally-distributed-database-by-google/">a NewSQL created by Google</a>. It is a distributed relational database that can distribute and store data in Google&rsquo;s BigTable storage system in multiple data centers. Spanner meets ACID (of course, it supports transaction) and supports SQL.</p>

<p><strong>Data R/W eff</strong>: When you read data, Spanner connects you to the data center that is geographically closest to you, and when you write data, it distributes and stores it to multiple data centers.</p>

<p><strong>Failure</strong>: If the data center you try to access has a failure, of course, you can read the data from another data center that has a replica of the data (in US, <strong>5 replica</strong>).</p>

<p>The Spanner client automatically <strong>performs a failover between replicas</strong>. When the number of servers storing data is changed or a failure occurs in equipment, Spanner automatically <strong>re-distributes data</strong> through data transfer among the equipments.</p>

<p>More details of Spanner: will come later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Heap and BST Conversion]]></title>
    <link href="http://okckd.github.io/blog/2015/02/09/heap-bst-conversion/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/09/heap-bst-conversion</id>
    <content type="html"><![CDATA[<h3>Question 1</h3>

<p><a href="http://www.careercup.com/question?id=4281027">link</a></p>

<blockquote><p>Convert a BST to max heap.</p></blockquote>

<h3>Solution</h3>

<p>The <a href="http://www.careercup.com/question?id=4281027">second answer</a>:</p>

<blockquote><p>a simple (reversed) in-order traversal of the BST. It would produce a sorted array which is indeed a max-heap!</p></blockquote>

<h3>Question 2</h3>

<p><a href="http://stackoverflow.com/questions/14106821/converting-a-heap-to-a-bst-in-on-time">link</a></p>

<blockquote><p>Converting a heap to a BST in O(n) time?</p>

<p>possible?</p></blockquote>

<h3>Solution</h3>

<p><a href="http://stackoverflow.com/a/14107362">Impossible</a>. Because otherwise, we can do this:</p>

<ol>
<li>Take an array and build the heap in O(n) time</li>
<li>Converting the heap to a BST in O(n) time (assuming)</li>
<li>Walking the BST in O(n) time to get a sorted sequence.</li>
</ol>


<p>Thus we sort array in O(n) time, it can&rsquo;t happen.</p>

<p>Right way to do, is to repeatedly dequeueing maximum value from the BST, then generate the BST recursively (bottom-up approach).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Count Multiples of Array]]></title>
    <link href="http://okckd.github.io/blog/2015/02/09/count-multiples-of-array/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/09/count-multiples-of-array</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32882735.html">link</a></p>

<blockquote><p>N是一个很大的正整数——可能到10<sup>15</sup>次方，</p>

<p>简单起见，不考虑溢出，或者假设用python</p>

<p>A 是一个array，里面存着一些正整数，up to 1000个</p>

<p>从1 &ndash; N这N个数，有多少个数，不能被A中的任何一个数整除的？</p></blockquote>

<h3>Solution</h3>

<p>It&rsquo;s a very difficult question.</p>

<p>We can&rsquo;t do it like a Sieve of Eratosthenes, cuz N is too large. The best solution is at <a href="http://www.mitbbs.com/article_t/JobHunting/32882735.html">this post</a>, level 9:</p>

<p>Consider the simplest case: A={2}, then any odd number below N is OK, so the result would be (N &ndash; N/2). Then consider A={2, 3}, any number below N that is not mutiply of 2 or 3 is OK, so the result would be (N &ndash; N/2 &ndash; N/3 + N/6). Then consider A={2, 3, 5}, <strong>the result would be (N &ndash; N/2 &ndash; N/3 &ndash; N/5 + N/6
+ N/10 + N/15 &ndash; N/30)</strong>.</p>

<p>So there is a general rule:</p>

<p>for A={a1, a2, &hellip;, aN}, if ai is not dividable by aj for any i != j, then we could:</p>

<ol>
<li>for i from 1 to N, calc r1 = N &ndash; SUM(N/ai);</li>
<li>for i, j from 1 to N, i != j, calc r2 = r1 + SUM(N/(ai*aj));</li>
<li>for i, j, k from 1 to N, i != j != k, calc r3 = r2 &ndash; SUM(N/(ai<em>aj</em>ak));</li>
<li>&hellip;</li>
<li>until all numbers in A are chosen.</li>
<li>then the final rN is the result.</li>
</ol>


<p>So for the problem, first we preprocess A to <strong>eliminate any multiplies in A</strong>. For example, A={2, 4, 5}, we can eliminate 4 because it is a mutiply of 2 which is also in A. So A&#8217;={2, 5}, then we calc:</p>

<p>r1 = 10 &ndash; 10/2 &ndash; 10/5 = 10 &ndash; 5 &ndash; 2 = 3;
r2 = r1 + 10/10 = 3 + 1 = 4;</p>

<p>then the final result is 4.</p>

<p>Refer to <strong>[Question] Multiples of 3 and 5</strong>.</p>

<h3>Code</h3>

<p>not written</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Array Signature]]></title>
    <link href="http://okckd.github.io/blog/2015/02/09/array-signature/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/09/array-signature</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=14912744">link</a></p>

<blockquote><p>You are given an array of n elements [1,2,&hellip;.n]. For example {3 2 1 4 6 5 7}.</p>

<p>Now we create a signature of this array by comparing every consecutive pair of elements. If they increase, write &ldquo;I&rdquo; else write &ldquo;D&rdquo;.</p>

<p>For example for the above array, the signature would be &ldquo;DDIIDI&rdquo;. The signature thus has a length of N-1.</p>

<p>Now given a signature, compute the lexicographically <strong>smallest permutation</strong> of [1,2,&hellip;.n].</p></blockquote>

<h3>Solution</h3>

<p>A great <a href="http://qr.ae/BPfNw">answer</a>:</p>

<blockquote><p>Take the above case. Signature = DDIIDI.</p>

<p>Take original permutation as 1 2 3 4 5 6 7.</p>

<p>Then for first continuous sequence DD reverse the strip 1 2 3 to 3 2 1 hence sequence becomes 3 2 1 4 5 6 7.</p>

<p>Then for second sequence D reverse strip 5 6 to 6 5 hence sequence becomes 3 2 1 4 6 5 7.</p>

<p>There is no continuous D left we are done and reached the answer.</p></blockquote>

<h3>Code</h3>

<p>Not written.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Can Abstract Class Have No Abstract Method]]></title>
    <link href="http://okckd.github.io/blog/2015/02/09/abstract-class-without-abstract-method/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/09/abstract-class-without-abstract-method</id>
    <content type="html"><![CDATA[<h3>Can abstract class have constructor</h3>

<p><a href="http://www.geeksforgeeks.org/abstract-classes-in-java/">Yes, it can</a>.</p>

<p>In this way, we create classes that cannot be instantiated, but can only be inherited.</p>

<p>For example, Java template pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Can Abstract Class Have Constructor]]></title>
    <link href="http://okckd.github.io/blog/2015/02/09/abstract-class-constructor/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/09/abstract-class-constructor</id>
    <content type="html"><![CDATA[<h3>Can abstract class have constructor</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32257933.html">Yes, it can</a>. However, if we create an instance using it, it&rsquo;s error.</p>

<p>Consider <a href="http://www.geeksforgeeks.org/abstract-classes-in-java/">this example</a>:</p>

<p>abstract class Base {</p>

<pre><code>Base() { System.out.println("Base Constructor Called"); }
abstract void fun();
</code></pre>

<p>}
class Derived extends Base {</p>

<pre><code>Derived() { System.out.println("Derived Constructor Called"); }
void fun() { System.out.println("Derived fun() called"); }
</code></pre>

<p>}
class Main {</p>

<pre><code>public static void main(String args[]) { 
   Derived d = new Derived();
}
</code></pre>

<p>}</p>

<p>Output:</p>

<pre><code>Base Constructor Called
Derived Constructor Called
</code></pre>

<h3>More info on constructor:</h3>

<p>The <a href="http://stackoverflow.com/a/261159">constructor in an abstract class</a>:</p>

<ol>
<li>is used when you want to perform some initialization</li>
<li>you may define more than one constructor (with different arguments)</li>
<li>if you don&rsquo;t define a constructor, then the compiler will automatically generate one for you.</li>
<li>your subclass constructor have to call a constructor from the abstract class</li>
<li>you can define all your constructors protected (cuz making them public is pointless)</li>
</ol>


<p>Constructor of abstract class can be used in <strong><a href="http://www.tutorialspoint.com/design_pattern/template_pattern.htm">Template Pattern</a></strong>, where the template is defined as a abstract class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Transform a Unbalanced Tree Into Balanced Tree]]></title>
    <link href="http://okckd.github.io/blog/2015/02/08/unbalanced-tree-into-balanced-tree/"/>
    <updated>2015-02-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/08/unbalanced-tree-into-balanced-tree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32043661.html">link</a></p>

<blockquote><p>How to transform a unbalanced tree into balanced tree?</p></blockquote>

<h3>Solution</h3>

<p>Solution 1, do AVL tree balancing. Refer to <strong>[Design] BST Node Insertion / Deletion</strong>. This is of course, pretty difficult to code.</p>

<p>Best solution is to <strong>convert to DLL and then build a new tree</strong>!</p>

<h3>Code</h3>

<p>not written</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Generate Number With Given Probability]]></title>
    <link href="http://okckd.github.io/blog/2015/02/08/generate-number-with-given-probability/"/>
    <updated>2015-02-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/08/generate-number-with-given-probability</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.sina.com.cn/s/blog_b9285de20101h463.html">link</a></p>

<blockquote><p>给定一个随机函数可以按照0.5的概率返回true。</p>

<p>要求实现一个函数随机返回任意概率的true。</p></blockquote>

<h3>Solution</h3>

<p>Eg. 0.25 true, then should be:</p>

<ol>
<li><p>generate once. If false, return false, else&hellip;</p></li>
<li><p>generate again, directly return.</p></li>
</ol>


<p>So, always return result for the possibility larger than 0.5. This recursion might go on forever.</p>

<p>Read code below.</p>

<h3>Code</h3>

<p>not my code</p>

<pre><code>boolean RNGwithGivenProb(double p, boolean expected)
{
   if(p &lt; 0.5)
       return RNGwithGivenProb(1 - p, !expected);  
   if(RNG() == expected)
       return expected;
   else
       return RNGwithGivenProb((p - 0.5) * 2, expected);
}

boolean RNG()
{
   return T/F with 0.5 probability.
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Find Similar Library Books]]></title>
    <link href="http://okckd.github.io/blog/2015/02/08/find-similar-library-books/"/>
    <updated>2015-02-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/08/find-similar-library-books</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/Recommend/31401087.html">link</a></p>

<p>有很大一个电子图书馆，里面每本书的每一页都是OCR转换出来的text，所有每页大
约有5%的error（转换错误，错误分割单词，跳脱。。。）。设计一个方法判定图书馆
里是否有完全一样的书（duplicate），或者将来有书进来时判定同样的书是否已存在。</p>

<h3>Solution</h3>

<p>Very large string matching, we mush use <strong>hashing or similar technique</strong>. Since books have error, we need to do <strong>fuzzy search/matching</strong>. Bloom filter is designed to do this!</p>

<p>Refer to <strong>[Design] Big Data &ndash; Fuzzy Search Url (Bloom Filter)</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Difference: Internet and the Web]]></title>
    <link href="http://okckd.github.io/blog/2015/02/08/difference-internet-and-www/"/>
    <updated>2015-02-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/08/difference-internet-and-www</id>
    <content type="html"><![CDATA[<h3>Internet</h3>

<p><a href="http://www.webopedia.com/DidYouKnow/Internet/Web_vs_Internet.asp">The Internet</a> is a massive network of networks, a <strong>networking infrastructure</strong>. It connects millions of computers together globally, and computers talk thru <strong>protocols</strong>.</p>

<p><a href="http://netforbeginners.about.com/od/internet101/f/the_difference_between_internet_and_web.htm">The Internet</a> is a Big Collection of Computers and Cables.</p>

<h3>Web</h3>

<p><a href="http://www.webopedia.com/DidYouKnow/Internet/Web_vs_Internet.asp">The World Wide Web</a>, or simply Web, is <strong>a way of accessing information</strong> over the medium of the Internet.</p>

<p>It is an information-sharing model that is built on top of the Internet. The Web uses the <strong>HTTP protocol</strong>, only one of the languages spoken over the Internet, to transmit data.</p>

<p><a href="http://netforbeginners.about.com/od/internet101/f/the_difference_between_internet_and_web.htm">The Web</a> Is a Big Collection of HTML Pages on the Internet.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/internet-and-web.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] BST Find Ceiling]]></title>
    <link href="http://okckd.github.io/blog/2015/02/08/bst-find-ceiling/"/>
    <updated>2015-02-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/08/bst-find-ceiling</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=20229674">link</a></p>

<blockquote><p>A binary search tree is given. Find the ceiling of given key. Eg.</p></blockquote>

<pre><code>                    8
               3          12
           2      6    10    15
                4
</code></pre>

<blockquote><p>Ceiling is <a href="http://www.geeksforgeeks.org/floor-and-ceil-from-a-bst/">defined</a> as:</p>

<p>Ceil Value Node: Node with smallest data larger than the key value.</p>

<p>Testing:</p></blockquote>

<pre><code>key - 13 =&gt; 15 
key - 4 =&gt;6 
key - 8 =&gt;10
</code></pre>

<h3>Solution</h3>

<p><strong>A really interesting idea</strong> is to go top-to-bottom, and update value in every <strong>left turn only</strong>. Suggested by the <a href="http://www.careercup.com/question?id=20229674">top answer</a>.</p>

<p>It&rsquo;s a very very tricky solution. I&rsquo;ve never seen this b4.</p>

<h3>Code</h3>

<p>Not my code.</p>

<pre><code>public int findCeil(TreeNode node, int num, int found) {
    if (node != null) {
        if (num &gt;= node.val)
            return findCeil(node.right, num, found);
        else
            return findCeil(node.left, num, node.val);
    } else
        return found;
}
</code></pre>

<p>Now input:</p>

<blockquote><p>TreeNode tree = Common.constructBstFromPreorder(new int[] { 40, 20, 10, 30, 60, 50, 70 });</p></blockquote>

<p>Output:</p>

<pre><code>The ceiling of 0 is  10
The ceiling of 1 is  10
The ceiling of 2 is  10
The ceiling of 3 is  10
The ceiling of 4 is  10
The ceiling of 5 is  10
The ceiling of 6 is  10
The ceiling of 7 is  10
The ceiling of 8 is  10
The ceiling of 9 is  10
The ceiling of 10 is  20
The ceiling of 11 is  20
The ceiling of 12 is  20
The ceiling of 13 is  20
The ceiling of 14 is  20
The ceiling of 15 is  20
The ceiling of 16 is  20
The ceiling of 17 is  20
The ceiling of 18 is  20
The ceiling of 19 is  20
The ceiling of 20 is  30
The ceiling of 21 is  30
The ceiling of 22 is  30
The ceiling of 23 is  30
The ceiling of 24 is  30
The ceiling of 25 is  30
The ceiling of 26 is  30
The ceiling of 27 is  30
The ceiling of 28 is  30
The ceiling of 29 is  30
The ceiling of 30 is  40
The ceiling of 31 is  40
The ceiling of 32 is  40
The ceiling of 33 is  40
The ceiling of 34 is  40
The ceiling of 35 is  40
The ceiling of 36 is  40
The ceiling of 37 is  40
The ceiling of 38 is  40
The ceiling of 39 is  40
The ceiling of 40 is  50
The ceiling of 41 is  50
The ceiling of 42 is  50
The ceiling of 43 is  50
The ceiling of 44 is  50
The ceiling of 45 is  50
The ceiling of 46 is  50
The ceiling of 47 is  50
The ceiling of 48 is  50
The ceiling of 49 is  50
The ceiling of 50 is  60
The ceiling of 51 is  60
The ceiling of 52 is  60
The ceiling of 53 is  60
The ceiling of 54 is  60
The ceiling of 55 is  60
The ceiling of 56 is  60
The ceiling of 57 is  60
The ceiling of 58 is  60
The ceiling of 59 is  60
The ceiling of 60 is  70
The ceiling of 61 is  70
The ceiling of 62 is  70
The ceiling of 63 is  70
The ceiling of 64 is  70
The ceiling of 65 is  70
The ceiling of 66 is  70
The ceiling of 67 is  70
The ceiling of 68 is  70
The ceiling of 69 is  70
The ceiling of 70 is  2147483647
The ceiling of 71 is  2147483647
The ceiling of 72 is  2147483647
The ceiling of 73 is  2147483647
The ceiling of 74 is  2147483647
The ceiling of 75 is  2147483647
The ceiling of 76 is  2147483647
The ceiling of 77 is  2147483647
The ceiling of 78 is  2147483647
The ceiling of 79 is  2147483647
The ceiling of 80 is  2147483647
The ceiling of 81 is  2147483647
The ceiling of 82 is  2147483647
The ceiling of 83 is  2147483647
The ceiling of 84 is  2147483647
The ceiling of 85 is  2147483647
The ceiling of 86 is  2147483647
The ceiling of 87 is  2147483647
The ceiling of 88 is  2147483647
The ceiling of 89 is  2147483647
The ceiling of 90 is  2147483647
The ceiling of 91 is  2147483647
The ceiling of 92 is  2147483647
The ceiling of 93 is  2147483647
The ceiling of 94 is  2147483647
The ceiling of 95 is  2147483647
The ceiling of 96 is  2147483647
The ceiling of 97 is  2147483647
The ceiling of 98 is  2147483647
The ceiling of 99 is  2147483647
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Big Data - Find Common Elements in 2 Lists]]></title>
    <link href="http://okckd.github.io/blog/2015/02/08/bg-data-common-elements-lists/"/>
    <updated>2015-02-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/08/bg-data-common-elements-lists</id>
    <content type="html"><![CDATA[<h3>Traditional solution</h3>

<ol>
<li>2 pointers</li>
<li>Hash</li>
</ol>


<h3>Big Data</h3>

<p>Bloom filter, refer to <strong>[Design] Big Data &ndash; Fuzzy Search url (Bloom Filter)</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Reservoir Sampling]]></title>
    <link href="http://okckd.github.io/blog/2015/02/07/reservoir-sampling/"/>
    <updated>2015-02-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/07/reservoir-sampling</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Reservoir_sampling">Reservoir sampling</a> is a family of randomized algorithms for randomly choosing k samples from a list of n items, where n is either <strong>a very large number</strong>. Typically n is large enough that the list <strong>doesn’t fit into main memory</strong>. For example, a list of search queries in Google and Facebook.</p>

<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/reservoir-sampling/">link</a></p>

<blockquote><p>given a big array (or stream) of numbers (to simplify), and we need to write an efficient function to randomly select k numbers where 1 &lt;= k &lt;= n. Let the input array be stream[].</p></blockquote>

<h3>Solution</h3>

<p><strong>O(n)</strong> time!</p>

<ol>
<li><p>Create an array sample[0..k-1] and copy first k items of stream[] to it.</p></li>
<li><p>Now one by one consider all items from (k+1)th item to nth item.</p>

<ol>
<li><p>Generate a random number &lsquo;j&rsquo; from 0 to i where i is index of current item in stream[].</p></li>
<li><p>If j is in range 0 to k-1, replace sample[j] with stream[i]</p></li>
</ol>
</li>
</ol>


<h3>Code</h3>

<p>not written</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Multithreading Async Increment Problem]]></title>
    <link href="http://okckd.github.io/blog/2015/02/07/multithreading-async-increment-problem/"/>
    <updated>2015-02-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/07/multithreading-async-increment-problem</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=18315663">link</a></p>

<blockquote><p>If two threads are incrementing a variable 100 times each without synchronization, what would be the possible min and maximum value.</p></blockquote>

<h3>Solution</h3>

<p>Well, max is init+200, and min is init+2. Suggested by the <a href="http://www.careercup.com/question?id=18315663">top answer</a>:</p>

<ol>
<li>P1 &amp; P2 copy var</li>
<li>P1 increments 99 times. so var becomes var + 99</li>
<li>P2 increments once. so var becomes var + 1</li>
<li>P1 copies var (value is var + 1)</li>
<li>P2 increments 99 times. so var becomes var + 100</li>
<li>P1 increments once. so var becomes var + 2</li>
</ol>

]]></content>
  </entry>
  
</feed>
