<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shuatiblog.com]]></title>
  <link href="http://www.shuatiblog.com/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-10-28T00:14:19-05:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Static class and Inner class ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/23/static-class-inner-class/"/>
    <updated>2015-10-23T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/23/static-class-inner-class</id>
    <content type="html"><![CDATA[<h1>Nested classes</h1>

<p>Both Static class and Inner class are called <strong>nested class</strong>.</p>

<p><a href="http://tutorials.jenkov.com/java/nested-classes.html">The purpose of a nested class</a> is to <strong>clearly group the nested class with its surrounding class</strong>, signaling that these two classes are to be used together.</p>

<p>Now the 2 types:</p>

<ol>
<li>Static nested classes (also: Static Classes )</li>
<li>Non-static nested classes (also: Inner Class)</li>
</ol>


<h2>Static Classes</h2>

<p>Declare:</p>

<pre><code>public class Outer {
    public static class Nested {

    }
}
</code></pre>

<p>Instantiate (just like a normal class):</p>

<pre><code>Outer.Nested instance = new Outer.Nested();
</code></pre>

<h2>Inner Classes</h2>

<pre><code>public class Outer {
    public class Inner {

    }
}
</code></pre>

<p>Instantiate (you MUST have an instance of enclosing class, and look weird the &lsquo;new&rsquo; keyword looks):</p>

<pre><code>Outer outer = new Outer();
Outer.Inner inner = outer.new Inner();
</code></pre>

<h1>access level</h1>

<p><strong>Inner class</strong> can access private members in enclosing class (static or non-static).</p>

<pre><code>public class Outer {

    private String text = "I am private!";

    public class Inner {

        public void printText() {
            System.out.println(text);
        }
    }
}
</code></pre>

<p><strong>Static class</strong> <a href="http://www.geeksforgeeks.org/static-class-in-java/">cannot access non-static members</a>.</p>

<h1>top-level static class?</h1>

<p>Java has <strong><a href="http://stackoverflow.com/a/7486111">no way of making a top-level class static</a></strong> but you can simulate a static class like this:</p>

<ol>
<li><p>Declare your class final</p></li>
<li><p>Make the constructor private</p></li>
<li><p>Make all the members and functions of the class static</p></li>
</ol>


<p>(this basically is a Singleton)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] What is Java Exception]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/23/java-what-is-exception/"/>
    <updated>2015-10-23T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/23/java-what-is-exception</id>
    <content type="html"><![CDATA[<h1>The class</h1>

<p><strong><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html">The class Exception</a></strong> and its subclasses are a form of <strong>Throwable</strong> that indicates conditions that a reasonable application might want to catch.</p>

<h1>The object</h1>

<p><strong><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html">An exception is an event</a></strong>, which occurs during the execution of a program, that disrupts the normal flow of the program&rsquo;s instructions.</p>

<p><strong>When an error occurs</strong> within a method, the method <strong>creates an object and hands it off to the runtime system</strong>. The object, called an <strong>exception object</strong>, contains information about the error(eg. type, state etc).</p>

<h2>throw this object out!</h2>

<p>Creating an exception object and handing it to the runtime system is called <strong>throwing an exception</strong>.</p>

<p>After a method throws an exception, the runtime system (i.e. <strong>JVM</strong>) attempts to find something to handle it. This is <strong>exception handler</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Java Vector and ArrayList ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/23/java-vector-arraylist/"/>
    <updated>2015-10-23T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/23/java-vector-arraylist</id>
    <content type="html"><![CDATA[<h1>Vector in Java</h1>

<p>Vector class implements a <strong>growable array</strong> of objects.</p>

<p>It&rsquo;s an array, <strong>not a list</strong>.</p>

<h1>Vector VS ArrayList</h1>

<ol>
<li>Vectors are synchronized, ArrayLists are not.</li>
<li>Data Growth Methods (ArrayList grow by &frac12; of its size, while Vector doubles)</li>
</ol>


<p>Usage: <a href="http://stackoverflow.com/a/2986307">ALWAYS use ArrayLists</a></p>

<blockquote><p>The vector was not the part of collection framework, it has been included in collections later. <strong>It can be considered as Legacy code</strong>.</p>

<p>There is nothing about Vector which List collection cannot do. Therefore Vector <strong><a href="http://beginnersbook.com/2013/12/difference-between-arraylist-and-vector-in-java/">should be avoided</a></strong>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Template method pattern (abstract class) ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/23/Template-method-pattern/"/>
    <updated>2015-10-23T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/23/Template-method-pattern</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong><a href="https://en.wikipedia.org/wiki/Template_method_pattern">Template method pattern</a> is a behavioral design pattern</strong> that defines the program skeleton of an algorithm in a method, called template method, which <strong>defers some steps to subclasses</strong>.</p>

<p>It lets one <strong>redefine</strong> certain steps of an algorithm without changing the algorithm&rsquo;s structure.</p>

<h2>Usage</h2>

<p>The template method is used in frameworks, where each implements the invariant parts of a domain&rsquo;s architecture.</p>

<h2>Example in Java</h2>

<p>Refer to <a href="https://en.wikipedia.org/wiki/Template_method_pattern#Example_in_Java">code from WIKI</a>:</p>

<pre><code>/**
 * An abstract class that is common to several games in
 * which players play against the others, but only one is
 * playing at a given time.
 */

abstract class Game {
 /* Hook methods. Concrete implementation may differ in each subclass*/
    protected int playersCount;
    abstract void initializeGame();
    abstract void makePlay(int player);
    abstract boolean endOfGame();
    abstract void printWinner();

    /* A template method : */
    public final void playOneGame(int playersCount) {
        this.playersCount = playersCount;
        initializeGame();
        int j = 0;
        while (!endOfGame()) {
            makePlay(j);
            j = (j + 1) % playersCount;
        }
        printWinner();
    }
}

//Now we can extend this class in order 
//to implement actual games:

class Monopoly extends Game {

    /* Implementation of necessary concrete methods */
    void initializeGame() {
        // Initialize players
        // Initialize money
    }
    void makePlay(int player) {
        // Process one turn of player
    }
    boolean endOfGame() {
        // Return true if game is over 
        // according to Monopoly rules
    }
    void printWinner() {
        // Display who won
    }
    /* Specific declarations for the Monopoly game. */

    // ...
}

class Chess extends Game {

    /* Implementation of necessary concrete methods */
    void initializeGame() {
        // Initialize players
        // Put the pieces on the board
    }
    void makePlay(int player) {
        // Process a turn for the player
    }
    boolean endOfGame() {
        // Return true if in Checkmate or 
        // Stalemate has been reached
    }
    void printWinner() {
        // Display the winning player
    }
    /* Specific declarations for the chess game. */

    // ...
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] Reflexive, Symmetric and Transitive Rules ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/22/reflexive-symmetric-transitive/"/>
    <updated>2015-10-22T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/22/reflexive-symmetric-transitive</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>O(n) time complexity is both <strong>reflexive, symmetric and transitive</strong>.</p>

<h2>Reflexive Property</h2>

<p>The Reflexive Property states that for every real number x, x = x.</p>

<h2>Symmetric Property</h2>

<p>The Symmetric Property states that for all real numbers x and y,</p>

<p>if x = y, then y = x.</p>

<h2>Transitive Property</h2>

<p>The Transitive Property states that for all real numbers x, y, and z,</p>

<p>if x = y and y = z, then x = z.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] Polynomial, quadratic, cubic and exponential ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/22/polynomial-quadratic-cubic-exponential/"/>
    <updated>2015-10-22T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/22/polynomial-quadratic-cubic-exponential</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>A comparison of all <a href="http://pages.cpsc.ucalgary.ca/~eharris/past/cpsc319/w12/tut01/">different time complexity</a>:</p>

<p><img class="middle" src="http://www.shuatiblog.com/assets/images/gnuplot0-1500.png"></p>

<p>Shown above: Constant, <strong>logarithmic</strong>, linear, n-log-n, quadratic, cubic, <strong>exponential</strong> ( eg. O(2<sup>n</sup>) ).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] What is a Literal? ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/22/literals/"/>
    <updated>2015-10-22T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/22/literals</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><a href="https://en.wikipedia.org/wiki/Literal_(computer_programming">A Literal</a>) is a notation for <strong>representing a fixed value in source code</strong>.</p>

<p>Almost all programming languages have notations for atomic values such as integers, floating-point numbers, and strings.</p>

<p>eg.</p>

<pre><code>int a = 1;
String s = "cat";
</code></pre>

<h2>Integer literal</h2>

<p><a href="https://en.wikipedia.org/wiki/Integer_literal">an integer literal</a> is an integer whose value is directly represented in source code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Why avoid using Protected? ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/22/avoid-protected/"/>
    <updated>2015-10-22T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/22/avoid-protected</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>Some experienced developers don’t use <strong>protected</strong> since it cannot provide clean data hiding.</p>

<p>Why is that?</p>

<h2>background</h2>

<p>Remembering in the post <strong>[Java OOP] Java modifier and Access Level</strong>, we got this:</p>

<p><img class="middle" src="http://www.shuatiblog.com/assets/images/java-access-level-table.png"></p>

<p><strong>Note</strong>: Java default access setting is &lsquo;No modifier&rsquo;, which is also called &lsquo;<strong>Package Private</strong>&rsquo;.</p>

<p><strong>Another note</strong>: by saying &lsquo;subclass&rsquo;, it means subclass declared in <strong>another package</strong>.</p>

<p>And in <strong>[Design] Composition Over Inheritance</strong>, we know that basically <strong>inheritance breaks encapsulation</strong>.</p>

<h2>the reason</h2>

<ol>
<li><p>inheritance is seldom the best tool and is not as flexible</p></li>
<li><p>the protected members form an interface towards subclasses (which is bad)</p></li>
<li><p>interfaces are tricky to get right and document properly</p></li>
</ol>


<p>So, <a href="http://stackoverflow.com/questions/4913025/reasons-to-use-private-instead-of-protected-for-fields-and-methods">it&rsquo;s better not to make</a> the class inheritable and instead make sure it&rsquo;s as flexible as possible (and no more) by using other means.</p>

<h2>A excellent answer</h2>

<p>A excellent answer <a href="http://programmers.stackexchange.com/questions/162643/why-is-clean-code-suggesting-avoiding-protected-variables">from Sam Brand</a>:</p>

<ol>
<li><p>They tend to lead to <strong><a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a></strong> issues. Unless you have a descendant class that actually does stuff with the protected member, make it private.</p>

<blockquote><p><strong>&ldquo;You aren&rsquo;t gonna need it&rdquo;</strong> (acronym: YAGNI) is a principle of extreme programming (XP) that states a programmer should not add functionality until deemed necessary.</p></blockquote></li>
<li><p>They tend to lead to <strong><a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">LSP</a></strong> issues. Protected variables generally have some intrinsic invariance associated with them (or else they&rsquo;d be public). Inheritors then need to maintain those properties, which people can screw up or willfully violate.</p>

<blockquote><p><strong>Substitutability</strong> is a principle in OOP. It states that if S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of that program</p>

<p><strong>Liskov substitution principle (LSP)</strong> is a particular definition of a subtyping relation introduced by Barbara Liskov in 1987</p></blockquote></li>
<li><p>They tend to violate <strong><a href="https://en.wikipedia.org/wiki/Open/closed_principle">OCP</a></strong>. If the base class makes too many assumptions about the protected member, or the inheritor is too flexible with the behavior of the class, it can lead to the base class&#8217; behavior being modified by that extension.</p>

<blockquote><p><strong>open/closed principle</strong> states &ldquo;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification&rdquo;.</p>

<p>That is, such an entity can allow its behaviour to be extended without modifying its source code.</p>

<p>This is especially valuable in a production environment, where changes to source code may necessitate code reviews, unit tests, and other such procedures to qualify it for use in a product</p></blockquote></li>
<li><p>They tend to lead to inheritance for extension rather than composition. This tends to lead to tighter coupling, more violations of <strong><a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a></strong>, more difficult testing, and a slew of other things that fall within the &lsquo;favor composition over inheritance&rsquo; discussion.</p></li>
</ol>


<blockquote><p><strong>single responsibility principle</strong> states that every class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility</p></blockquote>

<h1>An example</h1>

<p>ClassA in packageA:</p>

<pre><code>package packA;

import packB.ClassB;

public class ClassA {

    protected int val = 10;

    protected String getColor() {
        return "colored";
    }

    public static void main(String[] args) {
        ClassA ins = new ClassA();
        System.out.println("val is " + ins.val);
        System.out.println("color is " + ins.getColor());
        System.out.println();

        ClassB ins2 = new ClassB();
        System.out.println("val is " + ins2.val);
        System.out.println("color is " + ins2.getColor());
    }
}
</code></pre>

<p>ClassB in packageB:</p>

<pre><code>package packB;

import packA.ClassA;

public class ClassB extends ClassA {

    public ClassB() {
        val = 5;
    }

    public String getColor() {
        return super.getColor();
    }
}
</code></pre>

<p>Execution result:</p>

<pre><code>val is 10
color is colored

val is 5
color is colored
</code></pre>

<p>The code shows how <strong>ClassB</strong> is able to access 1 <strong>protected variable</strong> and 1 <strong>protected method</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] UML Class Diagrams ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/14/UML-diagrams/"/>
    <updated>2015-10-14T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/14/UML-diagrams</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>A UML class diagram describes the object and information structures used by your application, both internally and in communication with its users.</p>

<h2>example</h2>

<p>Taken from <a href="https://msdn.microsoft.com/en-us/library/dd409437.aspx">here</a>.</p>

<p><img class="middle" src="http://www.shuatiblog.com/assets/images/IC315445.png"></p>

<p><tbody><tr><th><p><span class="label">Shape</span></p></th><th><p><span class="label">Element</span></p></th><th><p><span class="label">Description</span></p></th></tr><tr><td><p>1</p></td><td><p><strong>Class</strong></p></td><td><p>A definition of objects that share given structural or behavioral characteristics. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323860.aspx">Properties of types on UML class diagrams</a>.</p></td></tr><tr><td><p>1</p></td><td><p>Classifier</p></td><td><p>The general name for a class, interface, or enumeration. Components, use cases, and actors are also classifiers.</p></td></tr><tr><td><p>2</p></td><td><p>Collapse/ Expand control</p></td><td><p>If you cannot see the details of a classifier, click the expander at upper-left of the classifier. You might also have to click the [+] on each segment.</p></td></tr><tr><td><p>3</p></td><td><p><strong>Attribute</strong></p></td><td><p>A typed value attached to each instance of a classifier. </p><p>To add an attribute, click the <strong>Attributes</strong> section and then press <strong>ENTER</strong>. Type the signature of the attribute. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323861.aspx">Properties of attributes on UML class diagrams</a>.</p></td></tr><tr><td><p>4</p></td><td><p><strong>Operation</strong></p></td><td><p>A method or function that can be performed by instances of a classifier. To add an operation, click the <strong>Operations</strong> section and then press <strong>ENTER</strong>. Type the signature of the operation. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323859.aspx">Properties of operations on UML class diagrams</a>. </p></td></tr><tr><td><p>5</p></td><td><p><strong>Association</strong></p></td><td><p>A relationship between the members of two classifiers. For more information, see <a href="https://msdn.microsoft.com/en-us/library/dd323862.aspx">Properties of associations on UML class diagrams</a>. </p></td></tr><tr><td><p>5a</p></td><td><p><strong>Aggregation</strong></p></td><td><p>An association representing a shared ownership relationship. The <strong>Aggregation</strong> property of the owner role is set to <strong>Shared</strong>.</p></td></tr><tr><td><p>5b</p></td><td><p><strong>Composition</strong></p></td><td><p>An Association representing a whole-part relationship. The <strong>Aggregation</strong> property of the owner role is set to <strong>Composite</strong>.</p></td></tr><tr><td><p>6</p></td><td><p><strong>Association Name</strong></p></td><td><p>The name of an association. The name can be left empty.</p></td></tr><tr><td><p>7</p></td><td><p><strong>Role Name</strong></p></td><td><p>The name of a role, that is, one end of an association. Can be used to refer to the associated object. In the previous illustration, for any Order <span class="code">O</span>, <span class="code">O.ChosenMenu</span> is its associated Menu.</p><p>Each role has its own properties, listed under the properties of the association.</p></td></tr><tr><td><p>8</p></td><td><p><strong>Multiplicity</strong></p></td><td><p>Indicates how many of the objects at this end can be linked to each object at the other. In the example, each Order must be linked to exactly one Menu. </p><p><strong>*</strong> means that there is no upper limit to the number of links that can be made.</p></td></tr><tr><td><p>9</p></td><td><p><strong>Generalization</strong></p></td><td><p>The <em>specific</em> classifier inherits part of its definition from the <em>general</em> classifier. The general classifier is at the arrow end of the connector. Attributes, associations, and operations are inherited by the specific classifier.</p><p>Use the <strong>Inheritance</strong> tool to create a generalization between two classifiers.</p></td></tr></tbody></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Query II ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query-II/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query-II</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-query-ii/">link</a></p>

<blockquote><p>For an array, we can build a SegmentTree for it, each node stores an extra attribute count to denote the number of elements in the the array which value is between interval start and end. (The array may not fully filled by elements)</p>

<p>Design a query method with three parameters root, start and end, find the number of elements in the in array&rsquo;s interval [start, end] by the given root of value SegmentTree.</p></blockquote>

<h3>Solution</h3>

<p>Similar.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, count;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int count) {
 *         this.start = start;
 *         this.end = end;
 *         this.count = count;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The count number in the interval [start, end]
     */
    public int query(SegmentTreeNode root, int start, int end) {
        if (root == null || start &gt; end) {
            return 0;
        } else if (root.start &gt; end || root.end &lt; start) {
            return 0;
        } else if (start &lt;= root.start &amp;&amp; root.end &lt;= end) {
            return root.count;
        }
        int mid = (root.start + root.end) / 2;
        return query(root.left, start, Math.min(mid, end)) + 
                query(root.right, Math.max(mid + 1, start), end);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Query ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-query/">link</a></p>

<blockquote><p>For an integer array (index from 0 to n-1, where n is the size of this array), in the corresponding SegmentTree, each node stores an extra attribute max to denote the maximum number in the interval of the array (index from start to end).</p>

<p>Design a query method with three parameters root, start and end, find the maximum number in the interval [start, end] by the given root of segment tree.</p></blockquote>

<h3>Solution</h3>

<p>Slightly difficult as we need to keep in mind the following:</p>

<ol>
<li><p>what&rsquo;s the return condition? (start and end is large enough to cover the entire range)</p></li>
<li><p>how to handle overlapping case? (find min-point first and then analyse case by case)</p></li>
</ol>


<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The maximum number in the interval [start, end]
     */
    public int query(SegmentTreeNode root, int start, int end) {
        // write your code here
        if (root == null || start &gt; end) {
            return -1;
        } else if (root.start &gt; end || root.end &lt; start) {
            return -1;
        } else if (root.start &gt;= start &amp;&amp; root.end &lt;= end) {
            return root.max;
        }
        int mid = (root.start + root.end) / 2;
        return Math.max(query(root.left, start, Math.min(mid, end)), 
                        query(root.right, Math.max(mid + 1, start), end));
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Modify ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Modify/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Modify</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-modify/#">link</a></p>

<blockquote><p>For a Maximum Segment Tree, which each node has an extra value max to store the maximum value in this node&rsquo;s interval.</p>

<p>Implement a modify function with three parameter root, index and value to change the node&rsquo;s value with [start, end] = [index, index] to the new given value. Make sure after this change, every node in segment tree still has the max attribute with the correct value.</p></blockquote>

<h3>Solution</h3>

<p>It&rsquo;s very similar to <strong>Segment Tree Modify/search</strong>.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, index, value: The root of segment tree and 
     *@ change the node's value with [index, index] to the new given value
     *@return: void
     */
    public void modify(SegmentTreeNode root, int index, int value) {
        helper(root, index, value);
    }

    private int helper(SegmentTreeNode node, int target, int val) {
        if (node.start &gt; target || node.end &lt; target) {
            // no update, then just return max as normal
            return node.max;
        } else if (node.start == node.end &amp;&amp; node.start == target) {
            node.max = val;
            return val;
        } else {
            // check left and right, and update max value accordingly
            node.max = Math.max(helper(node.left, target, val), 
                                helper(node.right, target, val));
            return node.max;
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Build II ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build-II/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build-II</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segmemt-tree-build-ii/">link</a></p>

<blockquote><p>The structure of Segment Tree is a binary tree which each node has two attributes start and end denote an segment / interval.</p>

<p>start and end are both integers, they should be assigned in following rules:</p>

<p>The root&rsquo;s start and end is given by build method.
The left child of node A has start=A.left, end=(A.left + A.right) / 2.
The right child of node A has start=(A.left + A.right) / 2 + 1, end=A.right.
if start equals to end, there will be no children for this node.</p>

<p>Implement a build method with a given array, so that we can create a corresponding segment tree with every node value represent the corresponding interval max value in the array, return the root of this segment tree.</p></blockquote>

<h3>Solution</h3>

<p>Similar.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param A: a list of integer
     *@return: The root of Segment Tree
     */
    public SegmentTreeNode build(int[] A) {
        if (A == null || A.length == 0) {
            return null;
        }
        return helper(A, 0, A.length - 1);
    }

    private SegmentTreeNode helper(int[] A, int start, int end) {
        if (start &gt; end) {
            return null;
        }
        SegmentTreeNode node = new SegmentTreeNode(start, end);
        if (start == end) {
            node.max = A[start];
            return node;
        } else {
            node.left = helper(A, start, (start + end) / 2);
            node.right = helper(A, (start + end) / 2 + 1, end);
            if (node.right != null) {
                node.max = Math.max(node.left.max, node.right.max);
            } else {
                node.max = node.left.max;
            }
        }
        return node;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Build ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-build/">link</a></p>

<blockquote><p>The structure of Segment Tree is a binary tree which each node has two attributes start and end denote an segment / interval.</p>

<p>start and end are both integers, they should be assigned in following rules:</p>

<p>The root&rsquo;s start and end is given by build method.
The left child of node A has start=A.left, end=(A.left + A.right) / 2.
The right child of node A has start=(A.left + A.right) / 2 + 1, end=A.right.
if start equals to end, there will be no children for this node.</p>

<p>Implement a build method with two parameters start and end, so that we can create a corresponding segment tree with every node has the correct start and end value, return the root of this segment tree.</p></blockquote>

<h3>Solution</h3>

<p>A simple top-down run through.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end) {
 *         this.start = start, this.end = end;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param start, end: Denote an segment / interval
     *@return: The root of Segment Tree
     */
    public SegmentTreeNode build(int start, int end) {
        // write your code here
        if (start &gt; end) {
            return null;
        }
        SegmentTreeNode node = new SegmentTreeNode(start, end);
        if (start &lt; end) {
            node.left = build(start, (start + end) / 2);
            node.right = build((start + end) / 2 + 1, end);
        }
        return node;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] Segment Tree ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/08/segment-tree/"/>
    <updated>2015-10-08T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/08/segment-tree</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong><a href="https://en.wikipedia.org/wiki/Segment_tree">Segment tree</a></strong> is a tree data structure for storing intervals, or segments.</p>

<p>Can be used to search <strong>the max/min or sum values in a range</strong>.</p>

<ol>
<li><p>modify = O(log n)</p></li>
<li><p>query = O(log n)</p></li>
<li><p>build = O(n)</p></li>
</ol>


<h2>question list</h2>

<ol>
<li><p>[LintCode] Segment Tree Build</p></li>
<li><p>[LintCode] Segment Tree Build II</p></li>
<li><p>[LintCode] Segment Tree Modify</p></li>
<li><p>[LintCode] Segment Tree Query</p></li>
<li><p>[LintCode] Segment Tree Query II</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Largest Sub-square with Edges filled ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html">link</a></p>

<blockquote><p>Given a matrix where every element is either ‘O’ or ‘X’, find the largest sub-square surrounded by ‘X’. (meaning that the 4 edges are filled with &lsquo;X&rsquo;)</p>

<p>Example Input:</p></blockquote>

<pre><code> {'X', 'O', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'O', 'X', 'O'},
 {'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'O', 'O'},
</code></pre>

<blockquote><p>Output: 3. The square submatrix starting at (1, 1) is the largest sub-squre.</p>

<p>Example Input:</p></blockquote>

<pre><code> {'X', 'O', 'X', 'X', 'X', 'X'},
 {'X', 'O', 'X', 'X', 'O', 'X'},
 {'X', 'X', 'X', 'O', 'O', 'X'},
 {'X', 'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'O', 'X', 'O'},
</code></pre>

<blockquote><p>Output: 4. The square submatrix starting at (0, 2) is the largest</p></blockquote>

<h3>Solution</h3>

<p>Read a very similar question &ndash; <strong>[Question] Maximum Square Sub-matrix With All 1s</strong></p>

<p>Typical DP question. Now the solution is to build 2 arrays to cache info. One horizontally and one, vertical.</p>

<blockquote><p>create two auxiliary arrays hor[N][N] and ver[N][N].</p>

<p>hor[i][j] is the number of horizontal continuous ‘X’ characters till mat[i][j] in mat[][].</p>

<p>ver[i][j] is the number of vertical continuous ‘X’ characters till mat[i][j] in mat[][].</p></blockquote>

<pre><code>mat[6][6] =  X  O  X  X  X  X
             X  O  X  X  O  X
             X  X  X  O  O  X
             O  X  X  X  X  X
             X  X  X  O  X  O
             O  O  X  O  O  O

hor[6][6] = 1  0  1  2  3  4
            1  0  1  2  0  1
            1  2  3  0  0  1
            0  1  2  3  4  5
            1  2  3  0  1  0
            0  0  1  0  0  0

ver[6][6] = 1  0  1  1  1  1
            2  0  2  2  0  2
            3  1  3  0  0  3
            0  2  4  1  1  4
            1  3  5  0  2  0
            0  0  6  0  0  0
</code></pre>

<p>After we got these, start from the bottom-right corner row by row up&hellip; For every mat[i][j], we compare hor[i][j] with ver[i][j] and pick the smaller one.</p>

<p>All we need to do next, is to check the other 2 edges. This solution is O(n<sup>3</sup>).</p>

<h3>Code</h3>

<p>C++ code provided by <a href="www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html">G4G</a>:</p>

<pre><code>int findSubSquare(int mat[][N])
{
    int max = 1; // Initialize result

    // Initialize the left-top value in hor[][] and ver[][]
    int hor[N][N], ver[N][N];
    hor[0][0] = ver[0][0] = (mat[0][0] == 'X');

    // Fill values in hor[][] and ver[][]
    for (int i=0; i&lt;N; i++)
    {
        for (int j=0; j&lt;N; j++)
        {
            if (mat[i][j] == 'O')
                ver[i][j] = hor[i][j] = 0;
            else
            {
                hor[i][j] = (j==0)? 1: hor[i][j-1] + 1;
                ver[i][j] = (i==0)? 1: ver[i-1][j] + 1;
            }
        }
    }

    // Start from the rightmost-bottommost corner element and find
    // the largest ssubsquare with the help of hor[][] and ver[][]
    for (int i = N-1; i&gt;=1; i--)
    {
        for (int j = N-1; j&gt;=1; j--)
        {
            // Find smaller of values in hor[][] and ver[][]
            // A Square can only be made by taking smaller
            // value
            int small = getMin(hor[i][j], ver[i][j]);

            // At this point, we are sure that there is a right
            // vertical line and bottom horizontal line of length
            // at least 'small'.

            // We found a bigger square if following conditions
            // are met:
            // 1)If side of square is greater than max.
            // 2)There is a left vertical line of length &gt;= 'small'
            // 3)There is a top horizontal line of length &gt;= 'small'
            while (small &gt; max)
            {
                if (ver[i][j-small+1] &gt;= small &amp;&amp;
                    hor[i-small+1][j] &gt;= small)
                {
                    max = small;
                }
                small--;
            }
        }
    }
    return max;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Cloest Leaf in Binary Tree ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html">link</a></p>

<blockquote><p>Given a Binary Tree and a key, find distance of the closest leaf.</p>

<p>Examples:</p></blockquote>

<pre><code>          1
        /    \    
       2       3
             /   \  
            5     6   
           /       \
          7         8
         / \       /
        9  10     11

Closest key to '8' is '11', so distance is 1 for '8'
Closest key to '3' is '2', so distance is 2 for '3'
Closest key to '5' is either '9' or '10', so distance is 2 for '5'
Closest key to '2' is '2' itself, so distance is 0 for '2' 
</code></pre>

<h3>Solution</h3>

<blockquote><p>traverse the given tree in preorder and keep track of ancestors (in a caching data struture, either it&rsquo;s List or an array with a correct pointer)</p></blockquote>

<p>When we find our target, we do 2 things:</p>

<ol>
<li><p>find <strong>closest distance on lower subtrees of current node</strong>.</p></li>
<li><p>for every ancester, find the <strong>closest distance on lower subtrees</strong>, then add with <strong>distance to ancester</strong>.</p></li>
</ol>


<p>Finally, return the smallest value seen above.</p>

<h3>Code</h3>

<p>Inspired by the code from <a href="www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html">G4G</a></p>

<pre><code>int answer;

public int findClosest(TreeNode root, int key) {
    answer = Integer.MAX_VALUE;
    helper(root, key, new ArrayList&lt;TreeNode&gt;());
    return answer;
}

private void helper(TreeNode node, int key, List&lt;TreeNode&gt; path) {
    if (node == null) {
        return;
    } else if (node.val != key) {
        path.add(node);
        helper(node.left, key, path);
        helper(node.right, key, path);
        path.remove(path.size() - 1);
    } else {
        // key matches with current node value
        answer = lenToLowerLeaf(node);
        // answer initially = cloest leaf from lower

        int len = path.size();
        for (int i = 0; i &lt; len; i++) {
            // for every ancestor, calculate distance and compare
            int ithToLowerLeaf = lenToLowerLeaf(path.get(i));
            answer = Math.min(answer, (len - i) + ithToLowerLeaf);
        }
    }
}

private int lenToLowerLeaf(TreeNode node) {
    if (node == null) {
        return Integer.MAX_VALUE;
    } else if (node.left == null &amp;&amp; node.right == null) {
        return 0;
    } else {
        return 1 + Math.min(lenToLowerLeaf(node.left), lenToLowerLeaf(node.right));
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] All Strings by Placing Spaces ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/print-possible-strings-can-made-placing-spaces/index.html">link</a></p>

<blockquote><p>Given a string, print all possible strings that can be made by placing spaces (zero or one) in between them.</p>

<p>Input:  str[] = &ldquo;ABC&rdquo;</p>

<p>Output:</p></blockquote>

<pre><code>    ABC
    AB C
    A BC
    A B C
</code></pre>

<h3>Solution</h3>

<p>recursion.</p>

<h3>Code</h3>

<pre><code>public void printAll(String input) {
    if (input == null || input.length() &lt;= 1) {
        // since we insert space in-between chars, so
        return;
    }
    int len = input.length();
    // len &gt;= 2
    helper(input, len - 1);
}

private void helper(String s, int p) {
    if (p == 1) {
        System.out.println(s);
        // no insertion
        System.out.println(s.substring(0, 1) + " " + s.substring(1));
        // insert at position 1
    } else {
        helper(s, p - 1);
        helper(s.substring(0, p) + " " + s.substring(p), p - 1);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] The 7 Bridges Problem ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/04/seven-bridge/"/>
    <updated>2015-10-04T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/04/seven-bridge</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>In East Prussia(普鲁士), people try to walk all <a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg">7 bridges</a> w/o crossing a bridge twice.</p>

<p>Leonhard Euler (pronounced &ldquo;oiler&rdquo;) – Swiss</p>

<h1>Euler path</h1>

<p>An Euler path, also called an Eulerian trail, is a walk on the graph edges of a graph which uses each graph edge in the original graph exactly once.</p>

<h2>Degree</h2>

<p>Node degree of a vertex: the number of edges incident with it.</p>

<h2>Euler Theorem</h2>

<p>A graph contains an euler path iffeither of the following cases hold:</p>

<ol>
<li>All except for two nodes have even degrees – the 2 odd-degree nodes must be start and end points</li>
<li>all nodes have even degrees.</li>
</ol>


<h1>Application</h1>

<p>networks, distributed systems, coding theory</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Shortest Manhattan Distance ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/02/shorest-manhattan-distance/"/>
    <updated>2015-10-02T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/02/shorest-manhattan-distance</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/33054861.html">link</a></p>

<blockquote><p>给一个 n*m 的房间，房间里存在各种可能的墙，房间的格子里已经放了 e 个器材，要
求新放一个器材，放置位置距其它 e 个器材的距离最近。Breadth-first search.</p></blockquote>

<h3>Solution</h3>

<blockquote><p>对 e个设备 BFS, 求每个设备到每个可以放新器材的点的距离，然后叠加。</p>

<p>最后O（n<sup>2</sup>）一遍找最小值。复杂度O（e*n<sup>2</sup>）</p></blockquote>

<p>As for whether we choose to check each equipment position, or check each vacant position, it&rsquo;s decided by how many equipment is there. If very little equipments (e is small), then this solution should work.</p>

<p>However, what is there is obstacles in the matrix?</p>

<p>We have to use BFS then. It took more space usage, but the time complexity should be same.</p>

<h3>Code</h3>

<pre><code>public void findCenter(int[][] input, int numberOfEquip) {
    int m = input.length;
    int n = input[0].length;

    // there's gonna be m * n positions
    // we gonna cumulate (numberOfEquip) distances for each position
    int[] dis = new int[m * n];

    // from the input map, find Equipments
    for (int i = 0; i &lt; m; i++) {
        for (int j = 0; j &lt; n; j++) {
            if (input[i][j] == 1) {
                // 1 represents equipment
                // when found, add the distance to every position
                cumulateDistance(i, j, dis, m, n);
            }
        }
    }

    // find the smallest cumulated distance from dis[].
    int sIndex = 0;
    int smallest = dis[0];
    for (int i = 0; i &lt; m * n; i++) {
        if (dis[i] &lt; smallest) {
            smallest = dis[i];
            sIndex = i;
        }
    }

    // index sIndex is the final answer
    System.out.println("Answer: " + (sIndex / n) + " " + (sIndex % n));
}

private void cumulateDistance(int x, int y, int[] dis, int m, int n) {
    for (int i = 0; i &lt; m * n; i++) {
        int a = i / n;
        int b = i % n;
        dis[i] += Math.abs(a - x) + Math.abs(b - y);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
