<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-23T11:39:37+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Stack and Heap]]></title>
    <link href="http://okckd.github.io/blog/2014/08/23/stack-and-heap/"/>
    <updated>2014-08-23T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/23/stack-and-heap</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>Value types are created on the stack, and reference types are created on the heap.</p>

<p><strong>Both are stored in computer RAM</strong>.</p>

<p><strong>Each thread gets a stack</strong>, while there&rsquo;s typically only one heap for the application.</p>

<h4>Stack</h4>

<p><a href="http://stackoverflow.com/a/80113">When a function</a> is called, a block is reserved <strong>on the top of the stack</strong> for local variables and some bookkeeping data in a LIFO order. Freeing a block from the stack is nothing more than adjusting one pointer.</p>

<h4>Heap</h4>

<p>Unlike the stack, there&rsquo;s no enforced pattern to the allocation and deallocation of blocks from the heap; you can allocate a block at any time and free it at any time. This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time; there are many custom heap allocators available to tune heap performance for different usage patterns.</p>

<h3>Q &amp; A</h3>

<h4>What is their scope?</h4>

<p>The stack is attached to a thread, so <strong>when the thread exits</strong> the stack is reclaimed.</p>

<p>The heap is typically allocated at application startup by the runtime, and is reclaimed <strong>when the application (technically process) exits</strong>.</p>

<h4>What determines the size of each of them?</h4>

<p>The size of the stack is set when a thread is created.</p>

<p>The size of the heap is set on application startup, but can grow as space is needed (the allocator requests more memory from the operating system).</p>

<h4>What makes one faster?</h4>

<p><strong>The stack is faster</strong> because the access pattern makes it trivial to allocate and deallocate memory from it, while the heap has much more complex bookkeeping involved in an allocation or free.</p>

<p>Each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor&rsquo;s cache, making it very fast.</p>

<p>Another performance hit for the heap is that the heap, being mostly a global resource, typically has to be multi-threading safe, i.e. each allocation and deallocation needs to be (typically) synchronized.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/stack-and-heap.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Shared Hosting vs. VPS Hosting]]></title>
    <link href="http://okckd.github.io/blog/2014/08/23/Web-hosting-shared-and-vps/"/>
    <updated>2014-08-23T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/23/Web-hosting-shared-and-vps</id>
    <content type="html"><![CDATA[<h3>Shared hosting</h3>

<p><a href="https://kb.greengeeks.com/3072/shared-hosting-vs-vps-hosting/">Shared hosting</a> is like living in an apartment where you share a common space with your neighbors. You cannot customize anything but you share maintenance cost and responsibility with your neighbors.</p>

<ol>
<li>Economical</li>
<li>Technical maintenance of the server is not required</li>
<li>Limited number of resources</li>
<li>Your website performance may be affected by other websites hosted on the shared server</li>
<li>Possible long term problems with scalability and backup</li>
<li>Possible security issues for sharing a common server</li>
</ol>


<h3>Virtual Private Server</h3>

<p>Virtual Private Server (VPS) Hosting is like living in a simplex or half-plex where you can customize everything to your own tastes. However, you still need to maintain your own area. Companies that deal with resource-heavy applications and secured data most often use VPS.</p>

<ol>
<li>Larger space and bandwidth</li>
<li>Can configure anything</li>
<li>Run your own batch files to create multiple services inside the server using shell access</li>
<li>Easy scalability and backup</li>
<li>You need a dedicated system administrator</li>
<li>Costly</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Designing Scalable Systems (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/08/23/Design-scalable-system/"/>
    <updated>2014-08-23T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/23/Design-scalable-system</id>
    <content type="html"><![CDATA[<ol>
<li>horizontal scaling</li>
</ol>


<p>load balancer get all requests, and distribute to one of the back-end servers</p>

<p>user sees not DNS, but address of load balancer</p>

<p>all backend server must have identical information (the price you pay for scalability)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Binary Search Trees Over Hash Tables]]></title>
    <link href="http://okckd.github.io/blog/2014/08/23/BST-over-hashmap/"/>
    <updated>2014-08-23T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/23/BST-over-hashmap</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/4128546/advantages-of-binary-search-trees-over-hash-tables">What are the advantages</a> of binary search trees over hash tables?</p>

<h3>Answer</h3>

<ol>
<li><p><strong>More memory-efficient</strong>. (They do not reserve more memory than they need to)</p>

<p> For instance, if a hash function has a range R(h) = 0&hellip;100, then you need to allocate an array of 100 (pointers-to) elements, even if you are just hashing 20 elements.</p></li>
<li><p><a href="http://stackoverflow.com/a/4128585">Inorder traverse</a>.</p></li>
<li><p>Collision might hamper HashMap&rsquo;s performance.</p></li>
<li><p><a href="http://stackoverflow.com/a/4129272">Resizing issue</a></p>

<p> When the hash table pressure grows too much, you often tend to enlargen and reallocate the hash table. The BST has simpler behavior here and does not tend to suddenly allocate a lot of data and do a rehashing operation.</p></li>
<li><p>Binary search tree do range searches efficiently.</p></li>
</ol>


<h3>One more thing</h3>

<p><strong>Trees tend to be the <a href="http://stackoverflow.com/a/19896875">ultimate average data structure</a></strong>. They can act as lists, can easily be split for parallel operation, have fast removal, insertion and lookup on the order of O(lgn). They do nothing particularly well, but they don&rsquo;t have any excessively bad behavior either.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150] v4.7.1 Design a Generic Deck of Cards]]></title>
    <link href="http://okckd.github.io/blog/2014/08/22/design-deck-card/"/>
    <updated>2014-08-22T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/22/design-deck-card</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Design a Generic Deck of Cards</p></blockquote>

<h3>Solution</h3>

<p>A simple design:</p>

<pre><code>enum Suit {
    HEART, DIAMOND, SPADES, CLUBS;
}

class Deck {
    List&lt;Card&gt; deck;
}

class Card {
    Suit suit;
    int num;
}
</code></pre>

<p>A more complex design:</p>

<pre><code>enum Suit {
    HEART, DIAMOND, SPADES, CLUBS;
}

class Deck&lt;T extends Card&gt; {
    List&lt;Card&gt; deck;

    public void shuffle() {
    };
}

abstract class Card {
    boolean available;
    Suit suit;
    int num;

    public boolean isAvailable() {
        return available;
    };
}

class Hand&lt;T extends Card&gt; {
    List&lt;Card&gt; cards;

    public int score() {
        int score = 0;
        for (Card c : cards) {
            score += c.num;
        }
        return score;
    }

    public void addCard(T card) {
        cards.add(card);
    }
}

// Now use the above generic Data Structure to make a
// Blackjack Game
class Blackjack extends Hand&lt;BlackJackCard&gt; {
}

class BlackJackCard extends Card {
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] About Singleton]]></title>
    <link href="http://okckd.github.io/blog/2014/08/20/Talk-about-singleton/"/>
    <updated>2014-08-20T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/20/Talk-about-singleton</id>
    <content type="html"><![CDATA[<h3>Implement Singlton</h3>

<p><a href="http://javarevisited.blogspot.sg/2012/07/why-enum-singleton-are-better-in-java.html">3 ways</a> of writing Singleton.</p>

<h4>using Enum</h4>

<p>This is only available since Java 6.</p>

<pre><code>public enum Singleton_Enum {
    INSTANCE;
}
</code></pre>

<h4>using double checked locking</h4>

<p>This is <strong>lazy loaded thread-safe</strong> Singleton, which is popular during Java 5 (with the use of Volatile variable).</p>

<pre><code>public class Singleton_DoubleCheckedLocking implements Cloneable {
    private static volatile Singleton_DoubleCheckedLocking INSTANCE;

    private Singleton_DoubleCheckedLocking() {
    }

    public static Singleton_DoubleCheckedLocking getInstance() {
        if (INSTANCE == null) {
            synchronized (Singleton_DoubleCheckedLocking.class) {
                // double checking Singleton instance
                if (INSTANCE == null) {
                    INSTANCE = new Singleton_DoubleCheckedLocking();
                }
            }
        }
        return INSTANCE;
    }
}
</code></pre>

<h4>using static factory method</h4>

<p>Singleton instance is <a href="http://javarevisited.blogspot.sg/2012/07/why-enum-singleton-are-better-in-java.html">static and final variable</a> it initialized when class is first loaded into memeory so creation of instance is inherently <strong>thread-safe</strong>.</p>

<pre><code>public class Singleton_StaticFactory {
    // initailzed during class loading
    private static final Singleton_StaticFactory INSTANCE = new Singleton_StaticFactory();

    // to prevent creating another instance of Singleton
    private Singleton_StaticFactory() {
    }

    public static Singleton_StaticFactory getSingleton() {
        return INSTANCE;
    }
}
</code></pre>

<h3>About thread-saft</h3>

<p><a href="http://javarevisited.blogspot.sg/2012/12/how-to-create-thread-safe-singleton-in-java-example.html">Prior to Java 5</a> <strong>double checked locking</strong> mechanism is used to create thread-safe singleton in Java, which breaks if one Thread doesn&rsquo;t see instance created by other thread at same time and eventually you will end up with more than one instance of Singleton class.</p>

<p>From Java 5 onwards <strong>volatile variable</strong> guarantee can be used to write thread safe singleton by using double checked locking pattern.</p>

<p>I personally don&rsquo;t prefer that way as there are many other simpler alternatives like:</p>

<ol>
<li>using static field</li>
<li>using Enum</li>
</ol>


<h3>Q &amp; A</h3>

<p>Question: How do you prevent for creating another instance of Singleton using clone() method?</p>

<p>Answer: Preferred way is not to implement Clonnable interface. And if you do, just throw Exception from clone() method as &ldquo;Can not create clone of Singleton class&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Square Count of Matchstick Graph]]></title>
    <link href="http://okckd.github.io/blog/2014/08/20/Square-count-in-matchstick-graph/"/>
    <updated>2014-08-20T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/20/Square-count-in-matchstick-graph</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>给出下面这个图 设计数据结构和算法求出图中<strong>所有的正方形数量</strong> (count the number of squares).</p></blockquote>

<p><img class="middle" src="http://okckd.github.io/assets/images/matchstick-square-count.jpg"></p>

<h3>Solution</h3>

<ol>
<li><p><strong>Pre-processing</strong>: 从每一个点开始存储上下左右四个方向最多延伸到的位置</p></li>
<li><p><strong>Main algorithm</strong>: 枚举右下角位置 然后枚举正方形边长</p></li>
<li><p>根据预处理的延伸情况判断是否能够有一个正方形被构造出来</p></li>
</ol>


<p>Total time complexity is O(n<sup>3</sup>).</p>

<blockquote><p>预处理可以O(n<sup>2</sup>) 预处理是有递推关系的</p>

<p>但是后面枚举的部分，只能O(n<sup>3</sup>)</p>

<p><strong>不能动态规划的原因是</strong>：他给定了一个可以变化的图，这个图上规模为n的图和规模为n-1的图中正方形个数之间不存在递推关系。</p></blockquote>

<p>And 一般来说处理矩阵的问题，大部分都是O(n<sup>3</sup>)</p>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Ways of Dice Throw]]></title>
    <link href="http://okckd.github.io/blog/2014/08/20/Dice-roll-DP-question/"/>
    <updated>2014-08-20T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/20/Dice-roll-DP-question</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/dice-throw-problem/">link</a></p>

<blockquote><p>Given n dice each with m faces, numbered from 1 to m, find the number of ways to get sum X. X is the summation of values on each face when all the dice are thrown.</p></blockquote>

<h3>Solution</h3>

<p><strong>DP</strong></p>

<blockquote><p>Sum(m, n, X) = Sum(m, n &ndash; 1, X &ndash; 1) +</p>

<pre><code>           Sum(m, n - 1, X - 2) +

           .................... + 

           Sum(m, n - 1, X - m)
</code></pre></blockquote>

<p>So we can have dp(n)(X) and for each, iterate m time. Total time is O(m * n * X).</p>

<h3>Code</h3>

<p><strong>not written by me</strong>.</p>

<pre><code>int findWays(int m, int n, int x)
{
    // Create a table to store results of subproblems.  One extra 
    // row and column are used for simpilicity (Number of dice
    // is directly used as row index and sum is directly used
    // as column index).  The entries in 0th row and 0th column
    // are never used.
    int table[n + 1][x + 1];
    memset(table, 0, sizeof(table)); // Initialize all entries as 0

    // Table entries for only one dice
    for (int j = 1; j &lt;= m &amp;&amp; j &lt;= x; j++)
        table[1][j] = 1;

    // Fill rest of the entries in table using recursive relation
    // i: number of dice, j: sum
    for (int i = 2; i &lt;= n; i++)
        for (int j = 1; j &lt;= x; j++)
            for (int k = 1; k &lt;= m &amp;&amp; k &lt; j; k++)
                table[i][j] += table[i-1][j-k];

    /* Uncomment these lines to see content of table
    for (int i = 0; i &lt;= n; i++)
    {
      for (int j = 0; j &lt;= x; j++)
        cout &lt;&lt; table[i][j] &lt;&lt; " ";
      cout &lt;&lt; endl;
    } */
    return table[n][x];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Count Set Bit in Binary Number]]></title>
    <link href="http://okckd.github.io/blog/2014/08/20/Count-set-bit-in-binary-number/"/>
    <updated>2014-08-20T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/20/Count-set-bit-in-binary-number</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Count Set Bit in Binary Number.</p>

<p>3 = 00000011 => 2</p>

<p>128 = 10000000 => 1</p></blockquote>

<h3>Solution</h3>

<p><strong>Bits counting algorithm</strong> (Brian Kernighan). Basic idea is <strong>clear 1 bit at a time</strong>.</p>

<p>This algorithm goes through as many iterations as there are set bits. In the worst case, it will pass once per bit. An integer n has log(n) bits, hence <a href="http://stackoverflow.com/a/12381102">the worst case</a> is O(log(n)).</p>

<h3>Code</h3>

<pre><code>public int countSetBit(String binary) {
    int num = Integer.parseInt(binary, 2);
    int count = 0;
    while (num != 0) {
        num &amp;= num - 1;
        count++;
    }
    return count;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Design Pattern - Singleton & Factory]]></title>
    <link href="http://okckd.github.io/blog/2014/08/19/design-pattern-basic-singleton-factory/"/>
    <updated>2014-08-19T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/19/design-pattern-basic-singleton-factory</id>
    <content type="html"><![CDATA[<h3>First Word</h3>

<p><strong>Singleton</strong> and <strong>Factory Method</strong> design pattern are the <strong>2 most frequent topics</strong> for OOD.</p>

<h3>Singleton Pattern</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton pattern</a></strong> is a design pattern that restricts the instantiation of a class to one object.</p>

<h4>in Java</h4>

<p>Since Java 5.0, the easiest way to create a Singleton is the <strong><a href="http://en.wikipedia.org/wiki/Singleton_pattern#The_Enum_way">enum type approach</a></strong>. Here the code is not given.</p>

<p>We will instead cover a very popular implementation: <strong><a href="http://en.wikipedia.org/wiki/Singleton_pattern#Lazy_initialization">Lazy initialization</a></strong>.</p>

<pre><code>public class SingletonDemo {
    private static volatile SingletonDemo instance = null;
    private SingletonDemo() { }
    public static SingletonDemo getInstance() {
        if (instance == null) {
            synchronized (SingletonDemo.class) {
                if (instance == null) {
                    instance = new SingletonDemo();
                }
            }
        }
        return instance;
    }
}
</code></pre>

<p>An alternate simpler version (non-sync):</p>

<pre><code>public class SingletonDemo {
    private static SingletonDemo instance = null;
    private SingletonDemo() { }
    public static synchronized SingletonDemo getInstance() {
        if (instance == null) {
            instance = new SingletonDemo();
        }
        return instance;
    }
}
</code></pre>

<h3>Factory Method Pattern</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Factory_method_pattern">Factory method pattern</a></strong> is a creational pattern which uses <strong>factory methods</strong> to deal with the problem of creating objects without specifying the exact class of object that will be created.</p>

<p>This is done by creating objects via factory method, either:</p>

<ol>
<li>specified in an interface/abstract class and implemente (differently)</li>
<li>implemented in a base class, and be overridden in derived classes</li>
</ol>


<h4>in Java</h4>

<p>A normal <a href="http://en.wikipedia.org/wiki/Factory_method_pattern#Java">Maze Game</a>:</p>

<pre><code>public class MazeGame {
    public MazeGame() {
        Room room1 = makeRoom();
        Room room2 = makeRoom();
        room1.connect(room2);
        this.addRoom(room1);
        this.addRoom(room2);
    }

    protected Room makeRoom() {
        return new OrdinaryRoom();
    }
}
</code></pre>

<p>A magic game:</p>

<pre><code>public class MagicMazeGame extends MazeGame {
    @Override
    protected Room makeRoom() {
        return new MagicRoom();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Count Level in Perfect Binary Tree]]></title>
    <link href="http://okckd.github.io/blog/2014/08/19/Count-level-in-perfect-BT/"/>
    <updated>2014-08-19T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/19/Count-level-in-perfect-BT</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/10721583/how-can-i-calculate-the-level-of-a-node-in-a-perfect-binary-tree-from-its-depth">link</a></p>

<blockquote><p>A perfect binary tree, i.e. each node in the tree is either a leaf node, or has two children, and all leaf nodes are on the same level. Each node has an index in depth-first order.</p></blockquote>

<pre><code>      0
    /   \
  1      4
 / \    / \
2   3  5   6
</code></pre>

<blockquote><p>Given the index (k) of a particular node, calculate its level.</p></blockquote>

<h3>Solution</h3>

<p><strong>This is a <a href="http://stackoverflow.com/a/10721897">magical solution</a></strong>.  It divides the tree in the middle with number k decrease by 1 each time.</p>

<p>Beautiful, and hard to understand.</p>

<h3>Code</h3>

<p><strong>not written by me</strong>.</p>

<pre><code>public int countLevel(TreeNode root, int k, int n) {
    int level = 0;
    while (k != 0) {
        k--;
        n = (n - 1) / 2;
        k = k % n;
        level++;
    }
    return level + 1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Random Thought]]></title>
    <link href="http://okckd.github.io/blog/2014/08/19/A-random-thought/"/>
    <updated>2014-08-19T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/19/A-random-thought</id>
    <content type="html"><![CDATA[<p>自从7月16号投了Fb，到今天一共33天。</p>

<p>我大概交了五六次简历。</p>

<p>一个面试都没有，妈的！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Leetcode] Leetcode Second Round (3)]]></title>
    <link href="http://okckd.github.io/blog/2014/08/18/Leetcode-second-third/"/>
    <updated>2014-08-18T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/18/Leetcode-second-third</id>
    <content type="html"><![CDATA[<ol>
<li>Gas Station</li>
<li>Remove Duplicates from Sorted Array II</li>
<li>Word Search</li>
<li>First Missing Positive</li>
<li>Permutations II</li>
<li>Palindrome Partitioning II</li>
<li>Word Ladder</li>
<li>Minimum Window Substring</li>
<li>Largest Rectangle in Histogram</li>
<li>LRU Cache</li>
<li>Regular Expression Matching &ndash; difficult</li>
<li>Wildcard Matching &ndash; very difficult, still</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Numbers Concatenation to Get Max Value]]></title>
    <link href="http://okckd.github.io/blog/2014/08/17/Numbers-Concatenation-Max/"/>
    <updated>2014-08-17T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/17/Numbers-Concatenation-Max</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#45">link</a></p>

<blockquote><p>数组nums中有n个非负整数（整数用字符串表示），将它们以一定的顺序拼接，得到最大的整数。</p>

<p>样例：</p>

<p>nums: [&ldquo;54&rdquo;, &ldquo;546&rdquo;, &ldquo;548&rdquo;, &ldquo;60&rdquo;]</p>

<p>可以拼接得到的最大整数为&#8221;6054854654&#8221;，因此函数应该返回&#8221;6054854654&#8221;。</p></blockquote>

<h3>Solution</h3>

<p><strong>I will first list out 2 special cases</strong>:</p>

<blockquote><p>{40, 20, 201} => 4020201</p>

<p>{40, 20, 203} => 4020320</p></blockquote>

<p>Knowing about this 2 cases helps us to come up with a sorting-based algorithm. We only need to achieve this:</p>

<blockquote><p>201 &lt; 20</p>

<p>20 &lt; 203</p></blockquote>

<p>By reading <a href="http://www.itint5.com/discuss/183/%E8%B0%81%E8%83%BD%E5%B8%AE%E6%88%91%E7%9C%8B%E4%B8%80%E4%B8%8B%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8Cn-200%E6%97%B6%E6%8F%90%E7%A4%BAsegmentation">this post</a>, I found the best comparator solution, defined as below:</p>

<pre><code>String firstNum = s1 + s2;
String secondNum = s2 + s1;
return firstNum.compareTo(secondNum);
</code></pre>

<h3>Code</h3>

<p><strong>written by me</strong>.</p>

<pre><code>public String biggestNum(String[] nums) {
    Arrays.sort(nums, new SpecialComparator());
    StringBuilder sb = new StringBuilder();
    for (int i = nums.length - 1; i &gt;= 0; i--) {
        sb.append(nums[i]);
    }
    return sb.toString();
}

class SpecialComparator implements Comparator&lt;String&gt; {
    public int compare(String s1, String s2) {
        // eg.
        // 40 &gt; 20
        // 20 &gt; 201
        // 203 &gt; 20
        String firstNum = s1 + s2;
        String secondNum = s2 + s1;
        return firstNum.compareTo(secondNum);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Number of Valid Trees Given Preorder and Postorder]]></title>
    <link href="http://okckd.github.io/blog/2014/08/17/Number-of-tree-given-preorder-postorder/"/>
    <updated>2014-08-17T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/17/Number-of-tree-given-preorder-postorder</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#28">link</a></p>

<blockquote><p>对于包含n个结点的二叉树（树中结点编号从1到n），已知前序和后序遍历序列，我们知道不一定能唯一的恢复这棵树。请计算出满足条件的二叉树的总数。</p>

<p>Example</p></blockquote>

<pre><code>前序遍历序列preorder：1 2
后序遍历序列postorder：2 1

一共有2棵满足条件的二叉树：
    1       1
   /         \
  2           2
</code></pre>

<h3>Solution</h3>

<blockquote><p>先看两种遍历的性质:</p>

<p>pre-order: root, left *************, right #########</p>

<p>post-order: **************left, ########right, root</p>

<p>所以 pre-order 的第一个元素一定等于 post-order 的最后一个元素. 然后在post-order中由前往后找, 找出等于pre-oder中第二个元素的位置, 也就是 left 的位置.</p>

<ol>
<li>如果post-order中的这个位置不是倒数第二个, 说明左右子树都非空, 那么对左右子树递归<strong>调用后用乘法原理</strong>.</li>
<li>如果是倒数第二个, 说明有一个子树为空, return的值就是 <strong>2*递归调用非空子树</strong>.</li>
</ol>
</blockquote>

<p><a href="http://www.itint5.com/discuss/94/%E8%AF%B7%E5%A4%A7%E5%AE%B6%E6%8F%90%E4%B8%80%E4%BA%9B%E6%94%B9%E8%BF%9B%E6%84%8F%E8%A7%81">ref</a></p>

<h3>Code</h3>

<p><strong>not written by me</strong>. This code is REALLY 叼炸天。</p>

<pre><code>int helper(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; posorder, 
         int i1, int j1, int i2, int j2){
    if(i1 == j1) return 1;
    if(preorder[i1+1] == posorder[j2-1]){
        return 2*helper(preorder, posorder, i1+1, j1, i2, j2-1);
    }
    int k = i2;
    while(posorder[k] != preorder[i1+1]){ k++; }
    return helper(preorder, posorder, i1+1,i1+1+k-i2 ,i2 , k)
         * helper(preorder, posorder, i1+2+k-i2, j1, k+1, j2-1);
}

int countValidTrees(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; posorder) {
    int n = preorder.size();
    return helper(preorder, posorder, 0, n-1, 0, n-1);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Twitter] Arithmetic Expression Evaluation]]></title>
    <link href="http://okckd.github.io/blog/2014/08/17/Expression-evaluation/"/>
    <updated>2014-08-17T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/17/Expression-evaluation</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#26">link</a></p>

<blockquote><p>给定一个表达式字符串，其中只包含非负整数，加法，减法以及乘法符号，例如7+3<em>4</em>5+2+4-3-1。请写程序计算该表达式的值。</p>

<p>提示：可以尝试使用递归算法，程序将非常简洁易写，很适用于面试场合。</p></blockquote>

<h3>Solution</h3>

<p><strong>Trying to solve this problem iteratively is like suicide</strong>. The code would be lengthy and buggy, and very hard to make it right.</p>

<p><strong>The most important point about this question, is how to handle minus(&ndash;) sign</strong>. We know that when we see * and /, we evaluate immediately, and when sees + and &ndash;, we postpone it. However this case:</p>

<blockquote><p>1 &ndash; 2 &ndash; 3</p></blockquote>

<p>If we postpone the first minus sign, we would end up getting:</p>

<blockquote><p>1 &ndash; (-1)</p></blockquote>

<p>So it&rsquo;s wrong (outputing 2 in this case).</p>

<p><strong>The solution to this issue is, consider (a &ndash; b) as (a + (-b))</strong>. That&rsquo;s why later in the code, you&rsquo;ll see a variable <strong>preNum</strong> being modified.</p>

<p><a href="http://www.itint5.com/discuss/50/case%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%80%E4%B8%AA%E5%B8%A6%E8%B4%9F%E6%95%B4%E6%95%B0%E7%9A%84%EF%BC%8C%E5%B9%B6%E6%B1%82%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0">ref</a></p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>int p;

public int evaluate(String expr) {
    p = 0;
    int firstNum = getNumber(expr);
    return helper(firstNum, expr);
}

private int helper(int preNum, String expr) {
    // now p points to a operator (or end of string)
    if (p == expr.length()) {
        return preNum;
    }
    char operator = expr.charAt(p);
    p++;
    int nextNum = getNumber(expr);
    switch (operator) {
    case '+':
        return preNum + helper(nextNum, expr);
    case '-':
        return preNum + helper(-1 * nextNum, expr);
    case '*':
        return helper(preNum * nextNum, expr);
    default:
        return helper(preNum / nextNum, expr);
    }
}

private int getNumber(String expr) {
    // now p points to a number
    int num = 0;
    while (p &lt; expr.length() &amp;&amp; expr.charAt(p) &gt;= '0'
            &amp;&amp; expr.charAt(p) &lt;= '9') {
        num = num * 10 + expr.charAt(p) - '0';
        p++;
    }
    return num;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Orthogonal Traverse the Map (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/08/16/orthogonal-traverse-map/"/>
    <updated>2014-08-16T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/16/orthogonal-traverse-map</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#22">link</a></p>

<blockquote><p>有一个n*m（n和m都不超过50）的棋盘，有k个目标格子需要访问。需要访问的格子的横纵坐标存放在数组x[]和y[]中(0&lt;=x[i]&lt;n, 0&lt;=y[i]&lt;m)。</p>

<p>遍历的规则为：</p>

<p>每一步只能从一个目标格子水平或者竖直跳跃移动到另一个目标格子。</p>

<p>连续的两步必须形成直角。即如果前一步是水平移动，那么下一步只能竖直移动。</p>

<p>问是否存在一种遍历顺序，使得每个目标格子有且仅被访问一次。</p>

<p>样例：k=8, x=[0, 0, 0, 0, 2, 2, 4, 4], y=[0, 2, 4, 6, 4, 6, 2, 4],对应于下图中A, B, C, D, F, E, G, H 8个目标格子，存在满足条件的遍历A->D->E->F->C->B->G->H。</p></blockquote>

<p><img class="middle" src="http://okckd.github.io/assets/images/orthogonal-map.jpg"></p>

<h3>Solution</h3>

<blockquote><p>n,m的棋盘，<a href="http://www.itint5.com/discuss/22/%E7%9B%B4%E8%A7%92%E8%B7%AF%E7%BA%BF%E9%81%8D%E5%8E%86%E6%A3%8B%E7%9B%98">建一个包含n+m个顶点的图G</a>（为了方便说明，类似二分图将其分为两列，左边n个顶点，右边m个顶点，分别代表n行和n列）。</p>

<p>对于目标格子(i,j)，左边第i个顶点和右边第j个顶点连一条边。最后的问题其实就是问转换之后的图G是否存在欧拉欧拉回路或者欧拉路径。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Excel Decimal Conversion]]></title>
    <link href="http://okckd.github.io/blog/2014/08/16/Excel-decimal-conversion/"/>
    <updated>2014-08-16T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/16/Excel-decimal-conversion</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#23">link</a></p>

<blockquote><p>Excel中的行列数用A~Z 26个字母表示，A, B, C, D, …, Z, AA, AB, …, AZ, BA, BB, … 分别表示10进制数1, 2, 3, 4, …, 26, 27, 28, …, 52, 53, 54…。</p>

<p>请实现2个函数decToExcel和excelToDec，将10进制数转换为Excel数，以及将Excel数转换为10进制数。</p></blockquote>

<h3>Solution</h3>

<p>Note the indexing starts from 1, not from 0. This caused some trouble for me.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public String decToExcel(int decNum) {
    decNum--;
    int digits = 1;
    int exponen = 26;
    while (decNum &gt;= exponen) {
        decNum -= exponen;
        exponen *= 26;
        digits++;
    }
    // now we know the total number of digits
    int num = decNum;
    int total = exponen / 26;
    String ans = "";
    for (int i = 0; i &lt; digits; i++) {
        ans += (char) (num / total + 'A');
        num %= total;
        total /= 26;
    }
    return ans;
}

public int excelToDec(String excelNum) {
    int digits = excelNum.length();
    int total = 1;
    int sum = 1;
    for (int i = 1; i &lt; digits; i++) {
        total *= 26;
        sum += total;
    }
    for (int i = 0; i &lt; digits; i++) {
        sum += (excelNum.charAt(i) - 'A') * total;
        total /= 26;
    }
    return sum;
}
</code></pre>

<p><strong>updated code</strong>: we can actually do it recursively. The code is much more concise (the code is found in the eclipse project).</p>

<pre><code>//将十进制数转换为excel数
public String decToExcel(int decNum) {
    if (decNum == 0) {
        return "";
    }
    decNum--;
    char last = (char) ('A' + decNum % 26);
    return decToExcel(decNum / 26) + last;
}

//将excel数转换为十进制数
public int excelToDec(String excelNum) {
    if (excelNum.equals("")) {
        return 0;
    }
    int len = excelNum.length();
    int last = 1 + excelNum.charAt(len - 1) - 'A';
    return excelToDec(excelNum.substring(0, len - 1)) * 26 + last;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Task Scheduling Question (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/08/15/Task-scheduling-question/"/>
    <updated>2014-08-15T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/15/Task-scheduling-question</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#10">link</a></p>

<blockquote><p>有n个任务需要完成（编号1到n），任务之间有一些依赖关系，如果任务a依赖于任务b和c，那么只有当任务b和任务c完成之后才能完成任务a。给定所有的依赖关系，判断这些任务是否能够完成。如果能够完成，请给出一个合法的任务完成序列。</p>

<p>样例：</p>

<p>n=5</p>

<p>1->2,3</p>

<p>3->4</p>

<p>上述样例中任务1依赖于任务2和任务3，任务3依赖于任务4，那么存在合法的任务完成序列4,3,2,1,5</p></blockquote>

<h3>Solution</h3>

<p><a href="http://www.itint5.com/discuss/8/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6java%E7%A8%8B%E5%BA%8F">http://www.itint5.com/discuss/8/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6java%E7%A8%8B%E5%BA%8F</a></p>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Product All 1s]]></title>
    <link href="http://okckd.github.io/blog/2014/08/15/Product-all-ones/"/>
    <updated>2014-08-15T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/15/Product-all-ones</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#18">link</a></p>

<blockquote><p>给定一个非负整数a（不超过10<sup>6</sup>），是否存在整数b，使得a和b的乘积全为1。如果存在，返回最小的乘积的位数。如果不存在，返回-1。</p>

<p>样例：a=3，存在b=37，使得3*37=111，则函数应返回3（111的位数）。</p></blockquote>

<h3>Solution</h3>

<p>There&rsquo;s 1 equation of mod operation, which is helpful:</p>

<blockquote><p>(a * b) mod x = ((mx+a&#8217;) * (nx+b&#8217;)) mod x = (a&#8217; mod x) * (b&#8217; mod x) = (a mod x) * (b mod x)</p>

<p>i.e.  (a * b) mod x = (a mod x) * (b mod x)</p></blockquote>

<p>Altough <a href="http://www.itint5.com/discuss/136/%E8%BF%99%E9%A2%98%E6%88%91%E8%B6%85%E6%97%B6%E4%BA%86%EF%BC%8C%E8%AF%B7%E9%97%AE%E5%A6%82%E4%BD%95%E7%BC%A9%E7%9F%AD%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4">I don&rsquo;t understand why</a> does it contribute to the incredibly short solution code posted below. I can&rsquo;t solve this question, freakly speaking.</p>

<h3>Code</h3>

<pre><code>int findMinAllOne(int a) {
    if (a &lt; 0 || (a % 10) % 2 == 0 || a % 10 == 5)
        return -1;

    int ans = 1;
    for (int p = 1; p != 0; p %= a) {
        p = 10 * p + 1;
        ++ans;
    }
    return a == 1 ? ans - 1 : ans;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
