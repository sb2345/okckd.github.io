<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woodstock Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2015-02-05T10:42:53+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Winning Games Rank (Pagerank)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/05/winning-game-rank-pagerank/"/>
    <updated>2015-02-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/05/winning-game-rank-pagerank</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>We have a history of match result of pingpong games, assume each match is &lt;player1, player2, result, timestamp>, player1 and player2 are long type, result is a bit value (1 means player1 win).</p>

<p>design a algorithm to sort the players by their possibility to win future games.</p></blockquote>

<h3>Solution</h3>

<p>For each play,</p>

<blockquote><p>winning score = score_diff * {delay factor<sup>current time &ndash; winning time</sup>};</p></blockquote>

<h3>Pagerank</h3>

<p><a href="http://google.about.com/od/searchengineoptimization/a/pagerankexplain.htm">PageRank</a> is what Google uses to <strong>determine the importance of a web page</strong>.</p>

<p>It determines which pages appear in search results.</p>

<p>Named after Larry Page.</p>

<h4>Details</h4>

<ol>
<li><p>PageRank thinks of links as votes to another page.</p></li>
<li><p>It also looks at the importance of the page that contains the link.</p>

<ol>
<li><p>Pages with <strong>higher PageRank</strong> have more weight in &ldquo;voting&rdquo;.</p></li>
<li><p>Pages with <strong>smaller total number of links</strong> on the page have more weight.</p></li>
</ol>
</li>
</ol>


<h4>Increase your PageRank?</h4>

<p>If you&rsquo;d like to increase your PageRank, you need to have &ldquo;back-links,&rdquo; or other people linking to your website. You can <strong>trade links</strong> with other people, but make sure you only trade relevant links, and make sure you&rsquo;re not trading links with a <strong>link farm</strong>.</p>

<p>You can register your website with directories, such as the <strong>Open Directory Project</strong>, but use directories with high PageRank whenever possible.</p>

<p>You can create some of <strong>your own back-links</strong> by linking to relevant pages <strong>within</strong> your own website. However, remember that the number of links you create counts into the equation. Don&rsquo;t overdo it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (2)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/05/speed-up-web-page-2/"/>
    <updated>2015-02-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/05/speed-up-web-page-2</id>
    <content type="html"><![CDATA[<p><a href="www.geeksforgeeks.org/amazon-interview-set-72-campus-sde-1">ref</a></p>

<h3>Question</h3>

<blockquote><p>Suppose you are handling Amazon website and you have 10 MB size home page. Optimize the homepage for a customer who has 100 kbps internet connection.</p>

<p>Further he asked for the customer who has 100 mbps internet connection.</p></blockquote>

<h3>Website KPI</h3>

<p>There are <a href="https://community.compuwareapm.com/community/display/PUB/Best+Practices+on+Web+Site+Performance+Optimization">3 interesting phases</a> of a web site from an end-user performance perspective.</p>

<ol>
<li>First Impression</li>
<li>OnLoad</li>
<li>Fully Loaded Time.</li>
</ol>


<h3>Loading Time</h3>

<p><strong>Question: what percentage of the time a user spends waiting for your page to load is spent after the HTML comes back to their browser</strong>?</p>

<p>It is typically <strong><a href="http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/">over 90%</a></strong>.</p>

<p>Most of the time users spend waiting on your website is spent after the HTML page has been retrieved by their browser.</p>

<h4>Fetching the HTML is just the beginning</h4>

<p><strong>In a nutshell, browsers parse your page’s HTML, sequentially discovering its assets</strong> (such as scripts, stylesheets, and images), requesting and then either parsing and executing them or displaying them as appropriate.</p>

<p>But these assets are not simply fetched all at once. Instead, the <strong>browser opens a limited number of connections to the server(s)</strong> referenced by the page. There is <strong>overhead involved in establishing TCP and HTTP connections</strong>, and some <strong>unavoidable latency</strong> in pushing the request and response bytes back and forth across the network.</p>

<p>So, in general, round trips between the browser and server are expensive. The structure of the HTML markup, the number and the ordering of its assets, are absolutely critical factors in its performance.</p>

<h3>What hijacks your load time</h3>

<h4>1. Too Many HTTP Requests</h4>

<p>This is the single biggest contributor to performance problems in most web pages.</p>

<ol>
<li><p>Concatenate scripts and stylesheets</p></li>
<li><p>Combine images with sprites (put common images into a single large image file, then use CSS to position and selectively display the appropriate portion of the sprite image)</p></li>
<li><p>Use fewer images, more CSS.</p></li>
</ol>


<h4>2. Minimal Client-side Processing</h4>

<ol>
<li><p>Validation on client. (eg. form input)</p></li>
<li><p>Use web standards and MVC separation, making a maintainable, accessible, future-proof and max-performance website.</p>

<p> Think of the HTML as the model, the CSS as the view, and the JavaScript as the controller. This separation tends to make code more efficient and maintainable, and makes many optimization techniques much more practical to apply.</p></li>
<li><p>Push presentation code into the client tier (eg. Charts and graphs — push raw data to the client in JSON format, and use JavaScript and CSS to create pretty graphs.)</p></li>
<li><p>Leverage Ajax techniques (only requiring small parts of the page to change in response to user actions)</p></li>
</ol>


<h4>3. Low Number of Parallel Requests</h4>

<p>Fetch a script, parse and execute it, then fetch another one&hellip; this will use up all the available connections. There are things you can do to your HTML to allow virtually any browser to make many requests at once, which has a huge impact on latency.</p>

<ol>
<li><p>Use browser-appropriate domain sharding</p></li>
<li><p>Use intelligent script loading</p></li>
<li><p>Leverage Keep-Alive (reuse the same TCP connection for multiple HTTP request/response cycles)</p></li>
</ol>


<h4>4. Failure to leverage browser cache / local storage</h4>

<ol>
<li><p><a href="http://www.mnot.net/cache_docs/">HTTP cache overview</a></p></li>
<li><p>Leverage local storage</p></li>
</ol>


<h4>5. Third-party widgets</h4>

<ol>
<li>Avoid third-party widgets!</li>
<li>Try to use widgets that provide asynchronous implementations, so their inevitably terrible performance impacts their widget without dragging down your entire UX with it.</li>
</ol>


<h4>7. Failure to Use a Global Network</h4>

<p>Amazon S3.</p>

<p>Ref: <a href="http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/">http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (1)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/05/speed-up-web-page-1/"/>
    <updated>2015-02-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/05/speed-up-web-page-1</id>
    <content type="html"><![CDATA[<p><a href="www.geeksforgeeks.org/amazon-interview-set-72-campus-sde-1">ref</a></p>

<h3>Question</h3>

<blockquote><p>Suppose you are handling Amazon website and you have 10 MB size home page. Optimize the homepage for a customer who has 100 kbps internet connection.</p>

<p>Further he asked for the customer who has 100 mbps internet connection.</p></blockquote>

<h3>Reading</h3>

<p><a href="http://sixrevisions.com/web-development/site-speed-performance/">This</a> is a very nice article about website speedup. Below is the full quoted text.</p>

<h4>1. Defer Loading Content When Possible</h4>

<p>Ajax allows us to build web pages that can be <strong>asynchronously updated</strong> at any time. This means that instead of reloading an entire page when a user performs an action, we can simply update parts of that page.</p>

<p>We can use an image gallery as an example. Image files are big and heavy; they can slow down page-loading speeds of web pages. Instead of loading all of the images when a user first visits the web page, we can just display thumbnails of the images and then when the user clicks on them, we can asynchronously request the full-size images from the server and update the page. This way, if a user only wants to see a few pictures, they don’t have to suffer waiting for all of the pictures to download. This development pattern is called <strong>lazy loading</strong>.</p>

<p><strong>Ajax/web development libraries</strong> like jQuery, Prototype, and MooTools can make deferred content-loading easier to implement.</p>

<h4>2. Use External JS and CSS Files</h4>

<p>When the user first loads your web page, the browser will cache external resources like CSS and JavaScript files. Thus, instead of inline JavaScript and CSS files, it’s best to <strong>place them in external files</strong>.</p>

<p>Using inline CSS also increases the rendering time of a web page; having everything defined in your main CSS file lets the browser do less work when rendering the page, since it already knows all the style rules that it needs to apply.</p>

<p><strong>As a bonus</strong>, using external JavaScript and CSS files makes site maintenance easier because you only need to maintain global files instead of code scattered in multiple web pages.</p>

<h4>3. Use Caching Systems</h4>

<p>If you find that your site is connecting to your database in order to create the same content, it’s time to start using a <strong>caching system</strong>. By having a caching system in place, your site will only have to create the content once instead of creating the content every time the page is visited by your users. Don’t worry, caching systems periodically refresh their caches depending on how you set it up — so even constantly-changing web pages (like a blog post with comments) can be cached.</p>

<p><strong>Popular content management systems</strong> like WordPress and Drupal will have <strong>static caching features</strong> that convert dynamically generated pages to static HTML files to reduce unnecessary server processing. For WordPress, check out <a href="https://wordpress.org/plugins/wp-super-cache/">WP Super Cache</a> (one of the six critical WordPress plugins which, claimed by the author, enjoyed a improvement by 259.1% for content-heavy pages). Drupal has a page-caching feature in the core.</p>

<p>There are also <strong>database caching and server-side scripts caching systems</strong> that you can install on your web server (if you have the ability to do so). For example, PHP has extensions called PHP accelerators that optimize performance through caching and various other methods; one example of a <a href="http://en.wikipedia.org/wiki/PHP_accelerator">PHP accelerator</a> is APC. <a href="http://en.wikipedia.org/wiki/Database_caching">Database caching</a> improves performance and scalability of your web applications by reducing the work associated with database read/write/access processes; <strong><a href="http://www.memcached.org/">memcached</a></strong>, for example, caches frequently used database queries.</p>

<h4>8. Load JavaScript at the End of Your Document</h4>

<p>It’s best if you have your scripts loading at the end of the page rather than at the beginning. It allows for the browser to render everything before getting started with the JavaScript. This makes your web pages feel more responsive because the way JavaScript works is that it blocks anything below it from rendering until it has finished downloading. If possible, reference JavaScript right before the closing (body) tag of your HTML documents. To learn more, read about deferring the loading of JavaScript.</p>

<h4>9. Use a Content Delivery Network (CDN)</h4>

<p>Your site’s speed is greatly affected by where the user’s location is, relative to your web server. The farther away they are, the more distance the data being transmitted has to travel. Having your content cached <strong>across multiple, strategically placed geographical locations</strong> helps take care of this problem.</p>

<p>A CDN will often make your operating cost a little higher, but you definitely gain a speed bonus. Check out MaxCDN or <strong>Amazon Simple Storage Service (Amazon S3)</strong>.</p>

<h4>10. Optimize Web Caching</h4>

<p>Along with using caching systems, you should create websites that utilize <strong>web caching</strong> as much as possible. Web caching is when files are <strong>cached by the web browser</strong> for later use. Things that browsers can cache include CSS files, JavaScript files, and images.</p>

<p>Aside from the basics, such as putting CSS and JavaScript code that are used in multiple pages in external files, there are many ways to make sure that you are caching your files in the most efficient way possible.</p>

<p>For example, you can set HTTP response headers such as Expires and Last-Modified to reduce the need of re-downloading certain files when the user comes back to your site. To learn more, read about <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">caching in HTTP</a> and <a href="https://developers.google.com/speed/docs/insights/LeverageBrowserCaching?csw=1#LeverageBrowserCaching">leveraging browser caching</a>.</p>

<p>To set up HTTP Expires headers in Apache, read this tutorial on adding future expires headers.</p>

<h4>Other mentions</h4>

<ol>
<li><p><strong>Avoid Resizing Images in HTML</strong> (using HTML’s width and height attributes), for the sake of smaller file size.</p></li>
<li><p><strong>Optimize Image Sizes by Using the Correct File Format</strong>. Eg. JPG format often displays photographic images at smaller file sizes than PNG.</p></li>
<li><p><strong>Optimize the Way You Write Code</strong>. For example, instead of using (h1)(em)Your heading(em)(h1), you can easily use CSS to make your headings italics.</p>

<p> Writing code efficiently not only reduces file sizes of your HTML and CSS documents, but also makes it easier to maintain.</p></li>
</ol>


<p>Ref: <a href="http://sixrevisions.com/web-development/site-speed-performance/">http://sixrevisions.com/web-development/site-speed-performance/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Implement a Blocking Queue]]></title>
    <link href="http://okckd.github.io/blog/2015/02/05/implement-blocking-q/"/>
    <updated>2015-02-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/05/implement-blocking-q</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=14622668">link</a></p>

<blockquote><p>Implement a Blocking queue.</p></blockquote>

<h3>Solution</h3>

<p>First thing first, the most important characteristic of a BlockingQueue is:</p>

<blockquote><p><strong>thread-safe</strong> BlockingQueue</p></blockquote>

<p>Second, we need to make sure to handle the following 2 methods:</p>

<blockquote><p><strong>notifyAll();</strong></p>

<p><strong>wait();</strong></p></blockquote>

<p>Last, remember that <strong>wait()</strong> has got a <strong>checked exception</strong>(InterruptedException). We end up with the code:</p>

<pre><code>public synchronized void enqueue(Object item) throws InterruptedException {
    while (this.queue.size() == this.size) {
        wait();
    }
    if (this.queue.size() == 0) {
        notifyAll();
    }
    this.queue.add(item);
}
</code></pre>

<h3>Code</h3>

<p>The entire class, refer to <strong>[Java OOP] Java BlockingQueue (2)</strong>:</p>

<pre><code>public class MyBlockingQueue {

    private List&lt;Object&gt; queue = new LinkedList&lt;Object&gt;();
    private int size = 10;

    public MyBlockingQueue(int size) {
        this.size = size;
    }

    public synchronized void enqueue(Object item) throws InterruptedException {
        while (this.queue.size() == this.size) {
            wait();
        }
        if (this.queue.size() == 0) {
            notifyAll();
        }
        this.queue.add(item);
    }

    public synchronized Object dequeue() throws InterruptedException {
        while (this.queue.size() == 0) {
            wait();
        }
        if (this.queue.size() == this.size) {
            notifyAll();
        }

        return this.queue.remove(0);
    }

    public boolean isEmpty() {
        return this.queue.isEmpty();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Snakes and Ladders]]></title>
    <link href="http://okckd.github.io/blog/2015/02/04/snakes-and-ladders/"/>
    <updated>2015-02-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/04/snakes-and-ladders</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=14955106">link</a></p>

<blockquote><p>Given a board of snakes and ladders game, provide an algorithm to find the minimum number of dice rolls required to reach 100 from 1.</p></blockquote>

<h3>Solution 1</h3>

<p>Recommended: <strong>Graph (shortest path)</strong>. <a href="http://www.careercup.com/question?id=14955106">ref</a>:</p>

<ol>
<li><p>k is linked to k + 1 k + 2, k + 3, k + 4, k + 5, k +6.</p></li>
<li><p>If has a ladder, connect it too.</p></li>
<li><p>Find shortest path.</p></li>
</ol>


<p>Solution 2 is <strong>DP</strong>.</p>

<h3>Variant</h3>

<p>If the question asks: find the way to climb as many ladder as possible. Then this question would be solved differently.</p>

<p>Any ideas?</p>

<p>Solution below.</p>

<p>&hellip;</p>

<p>&hellip;</p>

<p>&hellip;</p>

<p>Read <strong>[Greedy] Activity Selection Problem</strong>.</p>

<h3>Code</h3>

<p>not written</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Number of Subtrees With Even Nodes]]></title>
    <link href="http://okckd.github.io/blog/2015/02/04/number-of-subtree-with-even-nodes/"/>
    <updated>2015-02-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/04/number-of-subtree-with-even-nodes</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t0/JobHunting/32348573.html">link</a></p>

<blockquote><p>an arbitrary tree. split it into as many subtrees as you can. the
number of nodes of the subtree must be even.</p></blockquote>

<h3>Solution</h3>

<p><strong>This is a difficult question</strong>. The idea is recursive solution, but be cautious deadling with NULL.</p>

<p><strong>NULL can be regarded as a child branch of even node (0)</strong>, but NULL could not be seen as a subtreee.</p>

<ol>
<li>traverse each and every node in the tree</li>
<li>for each node, take it as root, and find left and right branch with total sum of odd count of nodes.</li>
<li>we do above step recursively</li>
<li>include NULL as a subtree of EVEN number of nodes.</li>
</ol>


<p>The code below is my code and I haven&rsquo;t seen any reference to this question. If you read this, please comment and discuss with me!</p>

<h3>Code</h3>

<pre><code>public void traverseAndFindEvenSubstrees(List&lt;TreeNode&gt; ans, TreeNode node) {
    if (node == null) {
        return;
    }
    List&lt;TreeNode&gt; evenSubtrees = this.getSubtrees(node, true);
    evenSubtrees.remove(null);
    ans.addAll(evenSubtrees);

    traverseAndFindEvenSubstrees(ans, node.left);
    traverseAndFindEvenSubstrees(ans, node.right);
}

private List&lt;TreeNode&gt; getSubtrees(TreeNode root, boolean isEven) {
    List&lt;TreeNode&gt; ans = new ArrayList&lt;TreeNode&gt;();
    if (root == null) {
        if (isEven) {
            // NULL is considered as a subtree with even number (0) of nodes
            ans.add(null);
        }
        return ans;
    }
    if (isEven) {
        // we need 2 subtrees to have a combined nodes of odd numbers
        for (int i = 0; i &lt;= 1; i++) {
            List&lt;TreeNode&gt; leftGroup = getSubtrees(root.left, i == 0);
            List&lt;TreeNode&gt; rightGroup = getSubtrees(root.right, i != 0);
            // what we do here, is to make leftGroup and rightGroup have
            // different boolean parameter, thus a total of odd count
            for (TreeNode ln : leftGroup) {
                for (TreeNode rn : rightGroup) {
                    // note that NULL is included in either leftGroup or
                    // rightGroup. we'll use that
                    TreeNode newSubtree = new TreeNode(root.val);
                    newSubtree.left = ln;
                    newSubtree.right = rn;
                    ans.add(newSubtree);
                }
            }
        }
        // now we've added all subtrees into ans, whose head is the root
        // this means we does not inlcude NULL
    } else {
        for (int i = 0; i &lt;= 1; i++) {
            List&lt;TreeNode&gt; leftGroup = getSubtrees(root.left, i == 0);
            List&lt;TreeNode&gt; rightGroup = getSubtrees(root.right, i == 0);
            for (TreeNode ln : leftGroup) {
                for (TreeNode rn : rightGroup) {
                    TreeNode newSubtree = new TreeNode(root.val);
                    newSubtree.left = ln;
                    newSubtree.right = rn;
                    ans.add(newSubtree);
                }
            }
        }
    }
    // now last step, add NULL (important)
    if (isEven) {
        ans.add(null);
    }
    return ans;
}
</code></pre>

<p>Test data:</p>

<pre><code>Test start
Input is a BST with this structure: 
4 
2 6 
1 3 5 7 

Total subtree count = 16
They are: 
Tree 1:
4 
2 6 
3 
Tree 2:
4 
2 6 
3 5 7 
Tree 3:
4 
2 6 
1 
Tree 4:
4 
2 6 
1 5 7 
Tree 5:
4 
6 
Tree 6:
4 
6 
5 7 
Tree 7:
4 
2 6 
7 
Tree 8:
4 
2 6 
5 
Tree 9:
4 
2 
Tree 10:
4 
2 6 
1 3 7 
Tree 11:
4 
2 6 
1 3 5 
Tree 12:
4 
2 
1 3 
Tree 13:
2 
3 
Tree 14:
2 
1 
Tree 15:
6 
7 
Tree 16:
6 
5 
Total time = 0.006
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] Grep Command Interview Question]]></title>
    <link href="http://okckd.github.io/blog/2015/02/04/grep-command-interview-question/"/>
    <updated>2015-02-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/04/grep-command-interview-question</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=1799">link</a></p>

<blockquote><p>You have 50,000 html files, some of which contain phone numbers. How would you create a list of all the files which contain phone numbers?</p></blockquote>

<h3>Solution</h3>

<p>This is a famous inteview question by former Amazon engineer <a href="https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions">Steve Yegge</a>:</p>

<blockquote><p>About 25% to 35% of all software development engineer candidates, independent of experience level, cannot solve this problem, even given the entire interview hour and lots of hints.</p></blockquote>

<p>This question tests your understanding of scripting languages.</p>

<h3>Code</h3>

<pre><code>grep -l -R --perl-regexp "\b(\(\d{3}\)\s*|\d{3}-)\d{3}-\d{4}\b" * &gt; output.txt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Data Structure of Insert, Remove, GetRandom]]></title>
    <link href="http://okckd.github.io/blog/2015/02/04/ds-insert-remove-getrandom/"/>
    <updated>2015-02-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/04/ds-insert-remove-getrandom</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=11353907">link</a></p>

<blockquote><p>Design a data structure where the following 3 functions at O(1):</p></blockquote>

<pre><code>1. Insert(n) 
2. GetRandomElement() 
3. Remove(n) 
</code></pre>

<h3>Solution</h3>

<p>Array is best for:</p>

<ol>
<li>random access</li>
</ol>


<p>HashMap is best for:</p>

<ol>
<li>Searching

<ol>
<li>insert</li>
<li>remove</li>
</ol>
</li>
</ol>


<p><a href="http://stackoverflow.com/a/22083895">So the answer is</a> <strong>array + hashmap</strong>:</p>

<ol>
<li><p>Insertion can be done by appending to the array and adding to the hash-map.</p></li>
<li><p>Deletion can be done by first looking up and removing the array index in the hash-map, then <strong>swapping the last element with that element in the array</strong>.</p></li>
<li><p>Get random can be done by returning a random index from the array.</p></li>
<li><p>All operations take O(1).</p></li>
</ol>


<p>Note <a href="http://stackoverflow.com/a/5684892">how hashmap is used</a>:</p>

<blockquote><p>insert(value): append the value to array and let i be it&rsquo;s index in A. Set H[value]=i.</p></blockquote>

<p>Hashmap stores value&rsquo;s index in the array &ndash; that is to say: <strong>this DS does not support inserting duplicating values</strong>.</p>

<p>Finally, when we delete, we swap the last element to replace the gap. This is an nice idea!</p>

<h4>follow-up</h4>

<blockquote><p>what if we want to get the top x% number?</p></blockquote>

<p>Well, heap of course. And note that <strong>Heap size is <a href="http://stackoverflow.com/a/9115884">auto-increasing</a></strong>:</p>

<blockquote><p>PriorityQueue is unbounded, it can grow as big as your memory allows, and it will grow automatically when needed. The initialCapacity parameter is just a hint to reserve room for that many elements initially.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Collatz Conjecture (Oneness Property)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/04/Collatz-Conjecture-oneness/"/>
    <updated>2015-02-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/04/Collatz-Conjecture-oneness</id>
    <content type="html"><![CDATA[<h3>Collatz Conjecture</h3>

<p>The <a href="http://en.wikipedia.org/wiki/Collatz_conjecture">Collatz conjecture</a> is a conjecture in mathematics known as the 3n + 1 conjecture.</p>

<p>Take any natural number n.</p>

<ol>
<li>If n is even, divide it by 2 to get n / 2.</li>
<li>If n is odd, multiply it by 3 and add 1 to obtain 3n + 1.</li>
</ol>


<p>Repeat the process (which has been called &ldquo;Half Or Triple Plus One&rdquo;, or HOTPO) indefinitely. The conjecture is that no matter what number you start with, <strong>you will always eventually reach 1</strong>.</p>

<p>The property has also been called <strong>oneness</strong>.</p>

<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/5437445/collatz-conjecture-related-interview">link</a></p>

<blockquote><p>Collatz conjecture says that if you do the following</p></blockquote>

<pre><code>If n is even, replace n by n/2.
If n is odd, replace n by 3n+1.
You ultimately end up with 1.
</code></pre>

<blockquote><p>For instance, 5 &ndash;> 16 &ndash;> 8 &ndash;> 4 &ndash;> 2 &ndash;> 1</p>

<p>Chain length is the number of steps required to get to 1. (The chain length of 1 is 0).</p>

<p>Now, the problem is given natural numbers n and k, find all numbers between 1 and n, such that the chain length is &lt;= k.</p></blockquote>

<h3>Solution</h3>

<p>Generate all numbers in backwards fashion, suggest by <a href="http://stackoverflow.com/a/5437672">templatetypedef</a>:</p>

<pre><code>                  1
                  |
                  2
                  |
                  4
                  |
                  8
                  |
                  16
                  | \
                  32 \
                  |   5
                  64  |
                 /|   10
                / 128 | \
               21     20 3
</code></pre>

<p><strong>Implementation</strong>: using a queue and keep appending numbers.</p>

<p><strong>Duplication handling</strong>?</p>

<blockquote><p>Assuming that the Collatz conjecture holds true, we&rsquo;ll never get any duplicates this way.</p></blockquote>

<p><strong>Time complexity</strong> is O(S) time, where S is the number of numbers we need to output.</p>

<h3>Code</h3>

<p>not written</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Monitor Rps for Past Sec/min/hr]]></title>
    <link href="http://okckd.github.io/blog/2015/02/03/monitor-request-per-second/"/>
    <updated>2015-02-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/03/monitor-request-per-second</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=6005446611566592">link</a></p>

<blockquote><p>Given a server that has requests coming in.</p>

<p>Design a data structure such that you can fetch the count of the number requests in the last second, minute and hour.</p></blockquote>

<h3>Solution 1</h3>

<p><strong>Keep a record of all request timestamps</strong>, suggested by the top answer by <a href="http://www.careercup.com/question?id=6005446611566592">whatevva</a>:</p>

<ol>
<li><p>Use a queue implemented as a resizable array to store the timestamps of all new requests</p></li>
<li><p>maintain head/tail pointers as usual</p></li>
<li><p>Also maintain three pointers, for past sec, past min and past hr.</p></li>
</ol>


<p>Whenever a request comes in, update 3 pointers. Then in the for-loop of the thread, remove old entries and also update 3 pointers.</p>

<p>Print Rps in real time. I posted my code below (the code is without thread-safety consideration).</p>

<h3>Solution 2</h3>

<p>This solution does not store all timestamps, and it does not generate real-time Rps data. But it&rsquo;s good enough because result is only updated every 1 second, so its performance is better.</p>

<p>Keep an array of int of size 60 * 60. Each second, use the <strong>number of request in the past second</strong> to update the array values <strong>in a rolling way</strong>.</p>

<h3>Code</h3>

<p>Solution 1. this is my code so please correct me!</p>

<pre><code>public class SetRps {

    AtomicInteger count = new AtomicInteger(0);
    int limit = -1;
    int printIndex = 1;
    long startTimestamp = -1;

    void setRPS(int num) {
        limit = num;
    }

    boolean process(long timestamp) {
        // suppose timestamp is ms
        synchronized (this) {
            if (count.get() &lt; limit) {
                // can process
                count.incrementAndGet();
                System.out.println(printIndex++ + ". processing request "
                        + timestamp % 100000 / 1000 + "," + timestamp % 1000);
                return true;
            }
            if (timestamp - startTimestamp &gt;= 1000) {
                // every 1 seconds, reset
                count.set(0);
                startTimestamp = timestamp;
                System.out.println("clear!");
                return true;
            }
        }
        return false;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Stock Span Problem (Couting BST)]]></title>
    <link href="http://okckd.github.io/blog/2015/02/01/stock-span-problem/"/>
    <updated>2015-02-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/01/stock-span-problem</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Given stock price of Amazon for some consecutive days. Need to find the maximum span of each day’s stock price.</p></blockquote>

<p>Definition of &lsquo;span&rsquo; have got 2 variant:</p>

<h3>Variant 1</h3>

<p><a href="http://www.geeksforgeeks.org/the-stock-span-problem/">link</a></p>

<blockquote><p>Span is the number of consecutive days right before that day, which have less or equal stock value.</p>

<p>(Or in GFG language): The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day.</p></blockquote>

<h3>Solution</h3>

<p><img class="middle" src="http://okckd.github.io/assets/images/StockSpanProblem1.png"></p>

<p>Use stack.</p>

<h3>Variant 2</h3>

<p><a href="http://www.careercup.com/question?id=4825417139617792">link</a></p>

<blockquote><p>Span is the amount of days before the given day where the stock price is less than that of given day.</p></blockquote>

<h3>Solution</h3>

<p>The top answer in <a href="http://www.careercup.com/question?id=4825417139617792">here</a> is wrong. Eg. {1,3,2,4}, the count for 4 would be 2, instead of 3.</p>

<p>Instead, the <strong>BST (AVL tree) solution is correct</strong>. It&rsquo;s commented by user zahidbuet106.</p>

<blockquote><p>insert numbers in a AVL tree one by one from right to left. During each insert we will keep updating the <strong>size of left subtree</strong> at the node being inserted. This will give us our desired smaller element count.</p>

<p>We also need to handle balancing the tree while insert.</p></blockquote>

<p><strong>The key of this question is the special BST, where each node stores an additional counting number</strong>.</p>

<p>This type of special BST is extremely frequntly used in Computer Science, especially when we want to dynamically insert elements and find out it&rsquo;s ranking within the past history.</p>

<p>Read another very interesting post: <strong>[CC150v5] 11.8 Get Rank in Stream of Integers</strong>.</p>

<h3>Code</h3>

<pre><code>class TreeNodePlus extends TreeNode {
    int leftCount;
    int dupCount;

    public TreeNodePlus(int v, int leftC) {
        super(v);
        this.leftCount = leftC;
        this.dupCount = 1;
    }

    public int findRank(TreeNodePlus node) {
        TreeNodePlus leftBranch = (TreeNodePlus) this.left;
        TreeNodePlus rightBranch = (TreeNodePlus) this.right;

        if (this == node) {
            return 0;
        } else if (node.val &lt; this.val) {
            if (this.left == null) {
                return 0;
            } else {
                return leftBranch.findRank(node);
            }
        } else {
            if (this.right == null) {
                return this.leftCount + this.dupCount;
            } else {
                return this.leftCount + this.dupCount
                        + rightBranch.findRank(node);
            }
        }
    }

    public TreeNodePlus insertNum(int num) {
        TreeNodePlus leftBranch = (TreeNodePlus) this.left;
        TreeNodePlus rightBranch = (TreeNodePlus) this.right;

        if (num == this.val) {
            this.dupCount++;
            return this;
        } else if (num &lt; this.val) {
            // insert num to the left branch
            this.leftCount++;
            if (this.left == null) {
                this.left = new TreeNodePlus(num, 0);
                return (TreeNodePlus) this.left;
            } else {
                return leftBranch.insertNum(num);
            }
        } else {
            // insert num to the right branch
            // this.leftCount does not change
            if (this.right == null) {
                this.right = new TreeNodePlus(num, 0);
                return (TreeNodePlus) this.right;
            } else {
                return rightBranch.insertNum(num);
            }
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Limit the Request Per Second]]></title>
    <link href="http://okckd.github.io/blog/2015/02/01/limit-request-per-second/"/>
    <updated>2015-02-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/01/limit-request-per-second</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32841633.html">link</a></p>

<blockquote><p>有一个接口叫 void setRPS(int num);</p>

<p>接下来不断有request过来，如何实现下面的接口，返回accept或者deny，</p></blockquote>

<pre><code>bool process(int timestamp){

}
</code></pre>

<h3>Solution</h3>

<p>Suggested by level 5 of <a href="http://www.mitbbs.com/article_t/JobHunting/32841633.html">this post</a>:</p>

<ol>
<li>maintain a variable for the number of request processed/rejected.

<ol>
<li>This variable must be atomic, thus a <strong>AtomicInteger</strong>.</li>
<li>the variable is called &lsquo;count&rsquo;</li>
</ol>
</li>
<li>have a method to process request

<ol>
<li>if count &lt; limit, do it</li>
<li>otherwise, reject</li>
</ol>
</li>
<li><strong>This is the most important</strong>: clear the count every 1 seconds!

<ol>
<li>eg. LIMIT = 5r/s, so:</li>
<li>the <strong>first 5 number of requests in every second</strong> are getting fulfilled</li>
<li>from 6th request onward, the request all rejected, until the next second.</li>
</ol>
</li>
</ol>


<h3>Code</h3>

<pre><code>public class SetRps {

    AtomicInteger count = new AtomicInteger(0);
    int limit = -1;
    int printIndex = 1;
    long startTimestamp = -1;

    void setRPS(int num) {
        limit = num;
    }

    boolean process(long timestamp) {
        // suppose timestamp is ms
        synchronized (this) {
            if (count.get() &lt; limit) {
                // can process
                count.incrementAndGet();
                System.out.println(printIndex++ + ". processing request "
                        + timestamp % 100000 / 1000 + "," + timestamp % 1000);
                return true;
            }
            if (timestamp - startTimestamp &gt;= 1000) {
                // every 1 seconds, reset
                count.set(0);
                startTimestamp = timestamp;
                System.out.println("clear!");
                return true;
            }
        }
        return false;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Greedy] Each Employee 2 Events]]></title>
    <link href="http://okckd.github.io/blog/2015/02/01/each-employee-two-events/"/>
    <updated>2015-02-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/01/each-employee-two-events</id>
    <content type="html"><![CDATA[<p><a href="http://www.careercup.com/question?id=7894677">link</a></p>

<h3>Question</h3>

<blockquote><p>You are given N ranges of date offsets when N employees are present in an organization. Something like</p></blockquote>

<pre><code>    1-4 (i.e. employee will come on 1st, 2nd, 3rd and 4th day ) 
    2-6 
    8-9 
    .. 
    1-14 
</code></pre>

<blockquote><p>Organize an event on minimum number of days such that each employee can attend the event at least twice.</p></blockquote>

<h3>Solution</h3>

<p><strong>Greedy algorithm</strong>, according to the <a href="http://www.careercup.com/question?id=7894677">top answer</a>:</p>

<ol>
<li><p>First, sort all ranges based on ENDING date in increasing order (bucket or counting sort).</p></li>
<li><p>For each range, select last two days (because they produce maximum possibility to overlap next range)</p></li>
<li><p>Skip following ranges that also contains those two days, until:</p>

<ol>
<li>a range that either covers only one day (we then select last day of this range) or</li>
<li>does not cover any of the two (we then select last two days of this range).</li>
</ol>
</li>
<li><p>Then continue.</p></li>
</ol>


<h3>Code</h3>

<p>not written</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Greedy] Activity Selection Problem]]></title>
    <link href="http://okckd.github.io/blog/2015/02/01/Activity-Selection-Problem/"/>
    <updated>2015-02-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/02/01/Activity-Selection-Problem</id>
    <content type="html"><![CDATA[<p><a href="http://www.geeksforgeeks.org/greedy-algorithms-set-1-activity-selection-problem/">link</a></p>

<h3>Question</h3>

<blockquote><p>Given n activities with their start and finish times.</p>

<p>Select maximum number of activities that can be performed in one run.</p>

<p>Example:</p></blockquote>

<pre><code>     start[]  =  {1, 3, 0, 5, 8, 5};
     finish[] =  {2, 4, 6, 7, 9, 9};

     output[] = {0, 1, 3, 4}
</code></pre>

<h3>Solution</h3>

<p><strong>Greedy algorithm</strong>, according to <a href="http://www.geeksforgeeks.org/greedy-algorithms-set-1-activity-selection-problem/">gfg</a>:</p>

<ol>
<li><p>Sort the activities according to their finishing time</p></li>
<li><p>Select the first activity from the sorted array and print it.</p></li>
<li><p>For the rest, if start time is greater than previous finish time, then select this activity.</p></li>
</ol>


<h3>Code</h3>

<p>not written.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] 2D Bin Packing]]></title>
    <link href="http://okckd.github.io/blog/2015/01/30/2d-bin-packing/"/>
    <updated>2015-01-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/30/2d-bin-packing</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://en.wikipedia.org/wiki/Bin_packing_problem">link</a></p>

<blockquote><p>Objects of different volumes must be packed into a finite number of bins or containers each of volume V in a way that minimizes the number of bins used.</p></blockquote>

<p><img class="middle" src="http://okckd.github.io/assets/images/bin-packing.png"></p>

<h3>Solution</h3>

<p>Explanation from <a href="http://stackoverflow.com/a/8765049">here</a>:</p>

<ol>
<li>Build a binary tree. Each branch in the tree contains a sprite.</li>
<li>Each <strong>leaf node represents available space</strong>.</li>
<li>Initially the tree has just the root node, which represents all available space.</li>
<li>To add a sprite to the tree, search the tree for an unoccupied (leaf) node <strong>big enough</strong> to hold the sprite.</li>
<li>Turn that node from a leaf into a branch by setting the sprite as the node&rsquo;s occupant and giving the node two children.</li>
<li>One child represents the remaining space to the right of the sprite;</li>
<li>the other represents the remaining space below the sprite and the first child.</li>
</ol>


<p>For detailed implementation and code, refer to <a href="http://codeincomplete.com/posts/2011/5/7/bin_packing/">this</a> comprehensite guide. BTW, it&rsquo;s used for <strong>auto generating CSS Sprites</strong> which puts images into a large graph.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Product Array Puzzle]]></title>
    <link href="http://okckd.github.io/blog/2015/01/29/product-array-puzzle/"/>
    <updated>2015-01-29T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/29/product-array-puzzle</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/amazon-interview-set-78-fresher-internship/">link</a></p>

<blockquote><p>Given an array of integers , replace each element with the product of the remaining elements.</p></blockquote>

<p>  Eg : Input &ndash; 1 2 3 4</p>

<pre><code>   Output : 24 12 8 6 
</code></pre>

<blockquote><p>Do not use division.</p></blockquote>

<h3>Solution</h3>

<p>Store the product of the left side elements for each integer, and also the right side.</p>

<p>For eg : L[]= {1 , 1 , 2 , 6 }</p>

<p>and R[] = { 24 , 12 , 4 , 1}</p>

<p>The multiply R[i] and L[i] to get the resultant array.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Apple] Calculate Area]]></title>
    <link href="http://okckd.github.io/blog/2015/01/29/calculate-area/"/>
    <updated>2015-01-29T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/29/calculate-area</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Calculate area:</p></blockquote>

<p><img class="middle" src="http://okckd.github.io/assets/images/calculate-area.jpg"></p>

<h3>Analysis</h3>

<p>We are only able to come up with 2 equations using the obvious relationship between semicircle and square. But we have x, y and z variables.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/calculate-area-xyz.jpg"></p>

<p>How do we proceed?</p>

<h3>Solution</h3>

<p>Thanks to my girlfriend, who came up with the solution:</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/calculate-area-solution.jpg"></p>

<p>The tiny small shaded area can be calculated by substracting the <strong>isosceles triangle (等腰三角形)</strong> from a 1/12 circle.</p>

<p>And the tiny small shaded area is simply a part of the larger shaded area.</p>

<p>Do you own math.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Packing Rectangles]]></title>
    <link href="http://okckd.github.io/blog/2015/01/29/Packing-Rectangles/"/>
    <updated>2015-01-29T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/29/Packing-Rectangles</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://olympiads.win.tue.nl/ioi95/task/pack.html">link</a></p>

<blockquote><p>Four rectangles are given. Find the smallest enclosing (new) rectangle into which these four may be fitted without overlapping. By smallest rectangle we mean the one with the smallest area.</p></blockquote>

<p><img class="middle" src="http://okckd.github.io/assets/images/packing-rect.gif"></p>

<h3>Greedy</h3>

<p><a href="http://stackoverflow.com/a/1213571">Greedy</a> placement from <strong>large (area) to small</strong>.</p>

<ol>
<li>Put the largest rectangle remaining into your packed area.</li>
<li>If it can&rsquo;t fit anywhere, place it in a place that extends the pack region as little as possible.</li>
<li>Repeat until you finish with the smallest rectangle.</li>
</ol>


<h3>Optimal Solution</h3>

<p><a href="http://stackoverflow.com/a/4264497">There is a trade-off</a> between implementation complexity/time and optimality, but there is a wide range of algorithms to choose from.</p>

<p>Below is quoted:</p>

<blockquote>
    <div class="post-text" itemprop="text">
<ol>
<li><p>First-Fit Decreasing Height (FFDH) algorithm<br>
FFDH packs the next item R (in non-increasing height) on the first level where R fits. If no level can accommodate R, a new level is created.<br>
Time complexity of FFDH: O(n·log n).<br>
Approximation ratio: FFDH(I)&lt;=(17/10)·OPT(I)+1; the asymptotic bound of 17/10 is tight.</p></li>
<li><p>Next-Fit Decreasing Height (NFDH) algorithm<br>
NFDH packs the next item R (in non-increasing height) on the current level if R fits. Otherwise, the current level is &#8220;closed&#8221; and a new level is created.<br>
Time complexity: O(n·log n).<br>
Approximation ratio: NFDH(I) &lt;= 2·OPT(I)+1; the asymptotic bound of 2 is tight.</p></li>
<li><p>Best-Fit Decreasing Height (BFDH) algorithm<br>
BFDH packs the next item R (in non-increasing height) on the level, among those that can accommodate R, for which the residual horizontal space is the minimum. If no level can accommodate R, a new level is created. </p></li>
<li><p>Bottom-Left (BL) Algorithm<br>
BL first order items by non-increasing width. BL packs the next item as near to the bottom as it will fit and then as close to the left as it can go without overlapping with any packed item. Note that BL is not a level-oriented packing algorithm.<br>
Time complexity: O(n^2).<br>
Approximation ratio: BL(I) &lt;= 3·OPT(I).  </p></li>
<li><p>Baker&#8217;s Up-Down (UD) algorithm<br>
UD uses a combination of BL and a generalization of NFDH. The width of the strip and the items are normalized so that the strip is of unit width. UD orders the items in non-increasing width and then divides the items into five groups, each with width in the range (1/2, 1], (1/3,1/2], (1/4,1/3], (1/5,1/4], (0,1/5]. The strip is also divided into five regions R1, ··· , R5. Basically, some items of width in the range (1/i+1, 1/i], for 1 &lt;= i &lt;= 4, are packed to region Ri by BL. Since BL leaves a space of increasing width from top to bottom at the right side of the strip, UD takes this advantage by first packing the item to Rj for j = 1, ··· , 4 (in order) from top to bottom. If there is no such space, the item is packed to Ri by BL. Finally, items of size at most 1/5 are packed to the spaces in R1, ··· , R4 by the (generalized) NFDH algorithm. Again if there is no space in these regions, the item is packed to R5 using NFDH.<br>
Approximation ratio: UD(I) &lt;= (5/4) · OPT(I)+(53/8)H, where H is the maximum height of the items; the asymptotic bound of 5/4 is tight.</p></li>
<li><p>Reverse-fit (RF) algorithm<br>
RF also normalizes the width of the strip and the items so that the strip is of unit width. RF first stacks all items of width greater than 1/2. Remaining items are sorted in non-increasing height and will be packed above the height H0 reached by those greater than 1/2. Then RF repeats the following process. Roughly speaking, RF packs items from left to right with their bottom along the line of height H0 until there is no more room. Then packs items from right to left and from top to bottom (called reverse-level) until the total width is at least 1/2. Then the reverse-level is dropped down until (at least) one of them touches some item below. The drop down is somehow repeated.<br>
Approximation ratio: RF(I) &lt;= 2·OPT(I).</p></li>
<li><p>Steinberg&#8217;s algorithm<br>
Steinberg&#8217;s algorithm, denoted as M in the paper, estimates an upper bound of the height H required to pack all the items such that it is proved that the input items can be packed into a rectangle of width W and height H. They then define seven procedures (with seven conditions), each to divide a problem into two smaller ones and solve them recursively. It has been showed that any tractable problem satisfies one of the seven conditions.<br>
Approximation ratio: M(I) &lt;= 2·OPT(I).</p></li>
<li><p>Split-Fit algorithm (SF)
SF divides items into two groups, L1 with width greater than 1/2 and L2 at most 1/2. All items of L1 are first packed by FFDH. Then they are arranged so that all items with width more than 2/3 are below those with width at most 2/3. This creates a rectangle R of space with width 1/3. Remaining items in L2 are then packed to R and the space above those packed with L1 using FFDH. The levels created in R are considered to be below those created above the packing of L1.<br>
Approximation ratio: SF(I) &lt;= (3/2) ·OPT(I) + 2; the asymptotic bound of 3/2 is tight.</p></li>
<li><p>Sleator&#8217;s algorithm<br>
Sleater&#8217;s algorithm consists of four steps:</p>

<ol>
<li><p>All items of width greater than 1/2 are packed on top of one another in the bottom of the strip. Suppose h0 is the height of the resulting packing All subsequent packing will occur above h0.</p></li>
<li><p>Remaining items are ordered by non-increasing height. A level of items are packed (in non-increasing height order) from left to right along the line of height h0. </p></li>
<li><p>A vertical line is then drawn in the middle to cut the strip into two equal halves (note this line may cut an item that is packed partially in the right half). Draw two horizontal line segments of length one half, one across the left half (called the left baseline) and one across the right half (called the right baseline) as low as possible such that the two lines do not cross any item.</p></li>
<li><p>Choose the left or right baseline which is of a lower height and pack a level of items into the corresponding half of the strip until the next item is too wide.</p></li>
</ol>

<p>A new baseline is formed and Step (4) is repeated on the lower baseline until all items are packed.<br>
Time complexity: O(n ·log n).<br>
The approximation ratio of Sleator&#8217;s algorithm is 2.5 which is tight.</p></li>
</ol>
    </div>
</blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Two Dimensional Knapsack Problem]]></title>
    <link href="http://okckd.github.io/blog/2015/01/28/two-dimensional-knapsack-problem/"/>
    <updated>2015-01-28T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/28/two-dimensional-knapsack-problem</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.sina.com.cn/s/blog_8a24b3a3010190ak.html">link</a></p>

<blockquote><p>给定n种物品和一背包。物品i的重量是wi，体积是bi，其价值为vi，背包的容量为C，容积为D。问应如何选择装入背包中的物品，使得装入背包中物品的总价值最大？</p>

<p>在选择装入背包的物品时，对每种物品i只有两种选择，即装入背包或者不装入背包。不能将物品i装入背包多次，也不能只装入部分的物品i。试设计一个解此问题的动态规划算法，并分析算法的计算复杂性。</p></blockquote>

<h3>Analysis</h3>

<p>This is a extended question from <strong>[Question] 0-1 Knapsack Problem</strong>.</p>

<p>Same solution, just use 3D-array for DP.</p>

<h3>Solution</h3>

<p>First of all, define a 2D array, Knapsack(n,W) denotes getting &lsquo;n&#8217;th item, with weight &#8216;W&rsquo;. When n == 0 or W = 0, dp value is 0.</p>

<blockquote><p>int[][][] dp = new int[n + 1][W + 1][B + 1];</p></blockquote>

<p>Now if item &lsquo;n&rsquo; is able to fit in:</p>

<blockquote><p>dp[i][j][k] = max(dp[i-1][j][k] , dp[i-1][j-w[i]][k-b[i]] + v[i]);</p></blockquote>

<p>If not able to fit in:</p>

<blockquote><p>dp[i][j][k] = dp[i-1][j][k];</p></blockquote>

<h3>Code</h3>

<p>Code from <a href="http://blog.sina.com.cn/s/blog_8a24b3a3010190ak.html">绝对快乐一生</a>:</p>

<pre><code>int main()
{
   int i,j,k;
   int n,c,d;
   int w[MAX] = {0};   //重量
   int b[MAX] = {0};   //体积
   int v[MAX] = {0};   //价值
   cout&lt;&lt;"请输入物品个数:";
   cin&gt;&gt;n;
   cout&lt;&lt;"请输入背包的容量及容积:";
   cin&gt;&gt;c&gt;&gt;d;
   cout&lt;&lt;"请依次输入各个物品的重量,体积,价值:(共"&lt;&lt;n&lt;&lt;"个)"&lt;&lt;endl;
   for(i =1;i&lt;n+1;i++)
   {
       cin&gt;&gt;w[i]&gt;&gt;b[i]&gt;&gt;v[i];
   }

   int dp[50][50][50]={0}; 
   //dp[i][j][k] i代表着第1到第i个物品，j代表的是重量，k代表的是容积，dp为最优价值

   for(i=1;i&lt;n+1;i++)
       for(j =1;j &lt;=c;j++)
           for(k = 1 ;k &lt;= d ; k++)
           {
               if(w[i]&lt;=j&amp;&amp;b[i]&lt;=k)  
               //当前物品重量小于当前容量，且体积小于容积时 ，才可以考虑装入物品的问题
                   dp[i][j][k] = max(dp[i-1][j][k] , dp[i-1][j-w[i]][k-b[i]] + v[i]);
               else dp[i][j][k] = dp[i-1][j][k];
           }
   cout&lt;&lt;"背包能放物品的最大价值为:"&lt;&lt;dp[n][c][d]&lt;&lt;endl;
  int x[MAX] ={0};   //记录是否被选中
  for(i =n;i&gt;1;i--)
       if(dp[i][c][d]==dp[i-1][c][d])x[i] =0;
      else {x[i]=1;c -= w[i];d -= b[i];}
   x[1]=(dp[1][c][d])?1:0;
   cout&lt;&lt;"被选入背包的物品的编号,质量和体积,价值分别是:"&lt;&lt;endl;
   for(i=1;i&lt;&lt;/span&gt;n+1;i++)
       if(x[i]==1)
           cout&lt;&lt;"第"&lt;&lt;i&lt;&lt;"个物品: "&lt;&lt;w[i]&lt;&lt;"  "&lt;&lt;b[i]&lt;&lt;"  "&lt;&lt;v[i]&lt;&lt;endl;

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] Implement Trie and Suffix Tree]]></title>
    <link href="http://okckd.github.io/blog/2015/01/28/implement-trie-suffix-tree/"/>
    <updated>2015-01-28T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/28/implement-trie-suffix-tree</id>
    <content type="html"><![CDATA[<h3>Trie Node</h3>

<pre><code>public class TrieNode {
    boolean isLeaf;
    TrieNode[] child;

    public TrieNode(boolean isLeaf) {
        this.isLeaf = isLeaf;
        this.child = new TrieNode[26];
    }

    public void insert(String str) {
        if (str == null || str.length() == 0) {
            this.isLeaf = true;
            return;
        }
        char cur = str.charAt(0);
        if (child[cur - 'a'] == null) {
            child[cur - 'a'] = new TrieNode(str.length() == 1);
        }
        child[cur - 'a'].insert(str.substring(1));
    }

    public boolean trieSearch(String str) {
        // have to consider leaf node
        if (str == null || str.length() == 0) {
            return isLeaf;
        }
        char cur = str.charAt(0);
        if (child[cur - 'a'] == null) {
            return false;
        }
        return child[cur - 'a'].trieSearch(str.substring(1));
    }

    public boolean suffixTreeSearch(String str) {
        // suffixTreeSearch don't consider leaf node
        // cuz we search for prefix of suffixes
        if (str == null || str.length() == 0) {
            return true;
        }
        char cur = str.charAt(0);
        if (child[cur - 'a'] == null) {
            return false;
        }
        return child[cur - 'a'].suffixTreeSearch(str.substring(1));
    }
}
</code></pre>

<h3>Trie</h3>

<pre><code>public class Trie {
    TrieNode root;

    public Trie(String[] input) {
        root = new TrieNode(false);

        for (String str : input) {
            root.insert(str);
        }
    }

    public boolean search(String query) {
        return root.trieSearch(query);
    }
}
</code></pre>

<h4>Suffix Tree</h4>

<p>Suffix tree might also consider the <strong>List of indexes</strong> thing, which I do not take into consideration in my code.</p>

<pre><code>public class SuffixTree {
    TrieNode root;

    public SuffixTree(String input) {
        root = new TrieNode(false);

        for (int i = 0; i &lt; input.length(); i++) {
            root.insert(input.substring(i));
        }
    }

    public boolean search(String query) {
        return root.suffixTreeSearch(query);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
