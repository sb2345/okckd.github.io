<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woodstock Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-10-29T17:02:42+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Google] Guess Password]]></title>
    <link href="http://okckd.github.io/blog/2014/09/16/google-guess-password/"/>
    <updated>2014-09-16T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/16/google-guess-password</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32658281.html">link</a></p>

<blockquote><p>给你一个password 假定6位</p>

<p>有个function, 每call一次就给你一个triplet 是password 里的随即三位(order不变)。比如google, 可能返回: ggl, goe, oog, ool&hellip;</p>

<p>问如何最有效破译这个密码?</p></blockquote>

<h3>Solution</h3>

<p>This is just a rough idea suggested by Level 6 from the post.</p>

<blockquote><p>六位密码随机给三位，应该有C(6, 3) = 20个bucket。</p>

<p>如果密码是abcdef，那么以a开头的bucket应该是10个。以b开头的buckt应该是6个，以c开头的是3个，以d开头的是1个。</p>

<p>如果abcd中间有相同，那么就会出现以a开头的是11个（abca)，13个(abad)，14个(abaa)，16个(aacd)，17个(aaca),19个(aaad)或者20个(aaaa).</p></blockquote>

<p>So we generate many triplets, and calculate based on their frequencies.</p>

<h3>Code</h3>

<p><strong>not written</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] DNS Communication Protocol]]></title>
    <link href="http://okckd.github.io/blog/2014/09/12/DNS-communication-protocol/"/>
    <updated>2014-09-12T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/12/DNS-communication-protocol</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>What protocol is used for communicating with a DNS?</p></blockquote>

<h3>Answer</h3>

<p><a href="http://en.wikipedia.org/wiki/Domain_Name_System">Domain Name System</a> (DNS) is a hierarchical distributed naming system for computers, services, or any resource connected to the Internet or a private network. It associates various information with domain names assigned to each of the participating entities. Most prominently, it translates easily memorized domain names to the numerical IP addresses needed for the purpose of locating computer services and devices worldwide. The Domain Name System is an essential component of the functionality of the Internet.</p>

<p><a href="http://en.wikipedia.org/wiki/Domain_Name_System#Protocol_transport">DNS primarily uses</a> <strong>User Datagram Protocol (UDP)</strong> on port number 53 to serve requests.</p>

<p>DNS queries consist of a single UDP request from the client followed by a single UDP reply from the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Barrier, Goods Van and Distance]]></title>
    <link href="http://okckd.github.io/blog/2014/09/11/barrier-goods-van-and-distance/"/>
    <updated>2014-09-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/11/barrier-goods-van-and-distance</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t1/JobHunting/32631467_0_1.html">link</a></p>

<blockquote><p>2d array ＊代表障碍物 ＃代表货物 空白就是正常的路</p>

<p>问如何找到一个点为出发点 能实现总共取货路径最短？ 每次只能拿一个货物，遇到障碍需要绕开，拿到以后要放回出发点，然后再取另一个.</p></blockquote>

<pre><code>＊＊＊＊＊＊＊＊＊＊
＊  #           ＊
＊  ＊＊＊  ＊   ＊
＊              ＊
＊     ＊＊   ＊ ＊
＊  #    # # ＊＊＊
＊＊＊＊＊＊＊＊＊＊
</code></pre>

<h3>Solution</h3>

<p>This looks like a very difficult question, especially during a phone interview.</p>

<p><strong>The 10th floor gives the best solution</strong>:</p>

<blockquote><p><strong>BFS from every box</strong>. in each box, a non-blocking cell (include box position, but exclude hazard position) will have a weight value, stand for the distance to the box.</p>

<p>after bfs from all the boxes, each cell will have k weight, k is the number of boxes. sum all the weight in each cell, and find the cell with smallest sum of weight.</p>

<p>One problem of this solution may lead to a cell of a box. We can then sort the cell by sum of weight and find the first position that is not a box.</p>

<p>complexity O(k*n<sup>2</sup>)</p></blockquote>

<h3>Code</h3>

<p><strong>not written</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Arithmetic Progression Triplet]]></title>
    <link href="http://okckd.github.io/blog/2014/09/11/arithmetic-progression-triplet/"/>
    <updated>2014-09-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/11/arithmetic-progression-triplet</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/">link</a></p>

<blockquote><p>Given a sorted set, find if there exist three elements in Arithmetic Progression or not.</p></blockquote>

<h3>Solution</h3>

<p><strong>This is a rather simple Arithmetic Progression question</strong>.</p>

<blockquote><p><a href="http://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/">To find the three elements</a>, we first fix an element as middle element and search for other two (one smaller and one greater).</p></blockquote>

<p>O(n<sup>2</sup>) time.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public boolean longest(int[] A) {
    int len = A.length;
    for (int i = 1; i &lt; len - 1; i++) {
        int left = i - 1;
        int right = i + 1;
        while (left &gt;= 0 &amp;&amp; right &lt; len) {
            int total = A[left] + A[right];
            if (total &gt; 2 * A[i]) {
                left--;
            } else if (total &lt; 2 * A[i]) {
                right++;
            } else {
                return true;
            }
        }
    }
    return false;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Arithmetic Progression Longest]]></title>
    <link href="http://okckd.github.io/blog/2014/09/11/arithmetic-progression-longest/"/>
    <updated>2014-09-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/11/arithmetic-progression-longest</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=8211177">link</a></p>

<blockquote><p>Given an array of integers A, give an algorithm to find the longest Arithmetic progression in it, i.e find a sequence i1 &lt; i2 &lt; … &lt; ik, such that</p>

<p>A[i1], A[i2], …, A[ik] forms an arithmetic progression, and k is the largest possible.</p>

<p>The sequence S1, S2, …, Sk is called an arithmetic progression if S(j+1) – S(j) is a constant.</p></blockquote>

<h3>Solution</h3>

<p><strong>This is a rather difficult Arithmetic Progression question</strong>.</p>

<p>The solution is 2-D DP.</p>

<blockquote><p><a href="http://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/">The idea is</a> to create a 2D table dp[n][n]. An entry dp[i][j] in this table stores LLAP with input[i] and input[j] as first two elements of AP(j > i).</p>

<p>The last column of the table is always 2. Rest of the table is filled <strong>from bottom right to top left</strong>.</p>

<p>To fill rest of the table, j (second element in AP) is first fixed. i and k are searched for a fixed j. If i and k are found such that i, j, k form an AP, then <strong>the value of dp[i][j] is set as dp[j][k] + 1</strong>.</p>

<p><strong>Note that the value of dp[j][k] must have been filled</strong> before as the loop traverses from right to left columns.</p></blockquote>

<p>The 2 difficult points of this question:</p>

<ol>
<li>how to come up with the transation formula. (i.e. <strong>dp[i][j] = dp[j][k] + 1</strong>, when (i, j, k) forms a AP).</li>
<li>how to fill up all dp[i][j] in each loop of j. (Once inside the if-else, once outside the main while-loop)</li>
</ol>


<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public int longest(int[] A) {
    int len = A.length;
    int[][] dp = new int[len][len];
    for (int i = 0; i &lt; len; i++) {
        // the pair ending at last position is always a progression
        dp[i][len - 1] = 2;
    }
    int longest = 1;
    for (int j = len - 2; j &gt;= 0; j--) {
        // for each j, find i and k that makes 1 progression
        int i = j - 1;
        int k = j + 1;
        while (i &gt;= 0 &amp;&amp; k &lt; len) {
            int total = A[i] + A[k];
            if (total &gt; 2 * A[j]) {
                // this is important!
                dp[i][j] = 2;
                i--;
            } else if (total &lt; 2 * A[j]) {
                k++;
            } else {
                // found a valid progression triplet A(i, j, k)
                dp[i][j] = dp[j][k] + 1;
                longest = Math.max(longest, dp[i][j]);
                i--;
                k++;
            }
        }
        // this is important!
        while (i &gt;= 0) {
            dp[i][j] = 2;
            i--;
            // If the loop was stopped due to k becoming more than
            // n-1, set the remaining dp[i][j] as 2
        }
    }
    return longest;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Winner of Tic-tac-toe]]></title>
    <link href="http://okckd.github.io/blog/2014/09/09/Winner-tic-tac-toe/"/>
    <updated>2014-09-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/09/Winner-tic-tac-toe</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.glassdoor.com/Interview/How-would-you-determine-if-someone-has-won-a-game-of-tic-tac-toe-on-a-board-of-any-size-QTN_1104.htm">link</a></p>

<blockquote><p>How would you determine if someone has won a game of tic-tac-toe on a board of any size?</p></blockquote>

<p>(This is also on CC150v4 19.2 and CC150v4 17.2)</p>

<h3>Solution</h3>

<p>First, confirm that when the number of pieces in a line equals to the dimension of the board, one person wins. Eg. for 10 * 10 board, 10 pieces need to be in 1 line.</p>

<p><strong><a href="http://www.glassdoor.com/Interview/How-would-you-determine-if-someone-has-won-a-game-of-tic-tac-toe-on-a-board-of-any-size-QTN_1104.htm">We can determine</a> if someone has won during a game in real time</strong>, as in checking after every move.</p>

<blockquote><p>Create an array of size 2n+2 at the beginning of the game and fill it with zeros. Each spot in the array will be a sum of X&rsquo;s or O&rsquo;s horizontally (the first n places in the array), vertically (the second n places in the array) and diagonally (the last 2 places). Then with every move, you add 1 to the 2 places (or 3 if on a diagnol) of the array if X, and subtract 1 if its an O. After adding you check and see if the value of the array is equal to n or -n, if it is, n mean X has won and -n means O has won.</p></blockquote>

<p>This is uses O(2n+2) space, but it&rsquo;s the best solution I can find online. I wrote code posted below.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>enum Piece {
    Empty, Red, Blue
};

public static Piece hasWon3(Piece[][] board) {

    int N = board.length;

    // O(2n+2) space to store count info
    int[] rowCnt = new int[N];
    int[] colCnt = new int[N];
    int[] digCnt = new int[2];

    for (int i = 0; i &lt; N; i++) {
        for (int j = 0; j &lt; N; j++) {

            int pieceValue = 0;
            if (board[i][j] == Piece.Blue) {
                pieceValue = 1;
            } else if (board[i][j] == Piece.Red) {
                pieceValue = -1;
            }

            // if empty, pieceValue is 0
            // if blue, add 1 in count
            // if red, subtract 1 in count
            rowCnt[i] += pieceValue;
            if (checkFinish(rowCnt[i], N) != null) {
                return checkFinish(rowCnt[i], N);
            }

            // after adding the count, check if the game finishes
            colCnt[j] += pieceValue;
            if (checkFinish(colCnt[j], N) != null) {
                return checkFinish(colCnt[j], N);
            }

            if (i == j) {
                digCnt[0] += pieceValue;
                if (checkFinish(digCnt[0], N) != null) {
                    return checkFinish(digCnt[0], N);
                }
            } else if (i + j == N) {
                digCnt[1] += pieceValue;
                if (checkFinish(digCnt[1], N) != null) {
                    return checkFinish(digCnt[1], N);
                }
            }
        }
    }
    // game not finished, continue
    return Piece.Empty;
}

private static Piece checkFinish(int count, int N) {
    if (count == N)
        return Piece.Blue;
    else if (count == -1 * N)
        return Piece.Red;
    else
        return null;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Form a Palindrome With Insertion]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/Form-palindrome-with-insertion/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/Form-palindrome-with-insertion</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.glassdoor.com/Interview/Given-a-string-convert-it-into-a-palindrome-with-the-lease-number-of-insertions-possible-QTN_729122.htm">link</a></p>

<blockquote><p>Given a string, convert it into a palindrome with the lease number of insertions possible.</p></blockquote>

<h3>Solution</h3>

<p>This is a DP question. There&rsquo;re 2 approaches.</p>

<p><strong>First, is direct DP</strong>. This is the nicest solution, not intuitive at first, but actually good.</p>

<blockquote><p>P[i, j] = P[i+1, j-1], if S[i] = S[j]</p>

<p>P[i, j] = 1 + min(P[i,j-1], P[i+1,j]), otherwise</p></blockquote>

<p>contributed by <a href="http://stackoverflow.com/a/10732879">this guy</a>.</p>

<p><strong>Second approach is to calculate the longest palindrome subsequence</strong>, and the answer would be string length minus this value.</p>

<p>I wrote code for both apporaches.</p>

<p>According to <a href="http://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/">G4G</a>, we can actually calculate the <strong>Longest Common Subsequence of the string and its reverse</strong>, and this value shall be same as the longest palindrome subsequence that we got in second approach. It&rsquo;s nice to know this idea.</p>

<h3>Code</h3>

<p><strong>direct</strong></p>

<pre><code>public int solve1(String str) {
    // direct dp
    if (str == null)
        return 0;
    int len = str.length();
    int[][] dp = new int[len][len];
    for (int i = len - 1; i &gt;= 0; i--) {
        for (int j = i; j &lt; len; j++) {
            if (i == j) {
                dp[i][j] = 0;
            } else if (i + 1 == j) {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? 0 : 1;
            } else {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? dp[i + 1][j - 1]
                        : 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);
            }
        }
    }
    return dp[0][len - 1];
}
</code></pre>

<p><strong>longest palindrome subsequence</strong></p>

<pre><code>public int solve2(String str) {
    // longest palindrome subsequence
    if (str == null)
        return 0;
    int len = str.length();
    int[][] dp = new int[len][len];
    for (int i = len - 1; i &gt;= 0; i--) {
        for (int j = i; j &lt; len; j++) {
            if (i == j) {
                dp[i][j] = 1;
            } else if (i + 1 == j) {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? 2 : 1;
            } else {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? 2 + dp[i + 1][j - 1]
                        : Math.max(dp[i + 1][j], dp[i][j - 1]);
            }
        }
    }
    return len - dp[0][len - 1];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Unsolved Mystery of UTF8 Encoding]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/unsolved-mystery-of-utf8/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/unsolved-mystery-of-utf8</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://algorithmguru.com/blog/?p=148">link</a></p>

<blockquote><p>UTF-8 is a variable-length encoding of letters or runes. If the most significant bit of the first byte is 0, the letter is 1 byte long. Otherwise, its length is the number of leading 1’s in the first byte. If a letter is more than one byte long, all subsequent runes start with 10. Here’s a chart:</p>

<p>UTF-8 encoding scheme is described below:</p></blockquote>

<pre><code>0XXXXXXX = this is the entire rune
10XXXXXX = this is a continuation of the rune from the previous byte
110XXXXX = this is the start of a 2-byte rune.
1110XXXX = this is the start of a 3-byte rune.
11110XXX = this is the start of a 4-byte rune.
111110XX = this is the start of a 5-byte rune.
1111110X = this is the start of a 6-byte rune.
11111110 = this is the start of a 7-byte rune.
11111111 = this is the start of a 8-byte rune.
</code></pre>

<blockquote><p>For example, a 3-byte rune would be 1110XXXX 10XXXXXX 10XXXXXX.</p>

<p>Write a function that decides whether a given byte array (or string) is valid UTF-8 encoded text.</p></blockquote>

<h3>Solution</h3>

<p>This is an easy question, just put here for reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Find Second Shortest Path]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/Find-second-shortest-path/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/Find-second-shortest-path</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=16922663">link</a></p>

<blockquote><p>You are given a graph and an algorithm that can find the shortest path b/w any two nodes.</p>

<p>Now you have to find the second shortest path between same two nodes.</p></blockquote>

<h3>Solution</h3>

<p>From the top answer:</p>

<blockquote><p><strong>Find the shortest path</strong> between any two nodes. Let them be A and B.</p>

<p>Now to get second shortest path between the same nodes, <strong>remove any one edge that is involved in the shortest path</strong> between the same nodes and calculate the shortest path.</p>

<p>Do the above process for each of the node involved in shortest path and keep track of the minimum second shortest path found.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Code a HashMap]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/Code-a-hashmap/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/Code-a-hashmap</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.glassdoor.com/Interview/Code-a-hashmap-which-you-would-be-happy-to-place-into-a-production-environment-QTN_725885.htm">link</a></p>

<blockquote><p>Code a hashmap which you would be happy to place into a production environment.</p></blockquote>

<h3>Solution</h3>

<p>We already write 2 post before:</p>

<ol>
<li><p><strong>[Question] Implement a HashMap</strong></p></li>
<li><p><strong>[CC150v5] 8.10 Implement a Hashmap</strong></p></li>
</ol>


<p>But still, this is not an easy question when asked at an interview. It won&rsquo;t harm to do a little recap:</p>

<ol>
<li>The basic structure is an array. It can be:

<ol>
<li>An array of linked nodes (with a next pointer).</li>
<li>An array of linked list.</li>
</ol>
</li>
<li>There should be a hash function.</li>
<li>There should be a function to convert the hash value to corresponding array index.</li>
<li>Remember there&rsquo;s <strong>a concept of Load factor</strong>. It means to what percentage the hashmap is filled.</li>
<li>h &amp; (length – 1) means h % length, which maps a hashcode to an array index.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Weird Sort Array]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/weird-sort-array/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/weird-sort-array</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t0/JobHunting/32772813.html">link</a></p>

<blockquote><p>数组排序， 排成 a1<a2>a3<a4>a5。。。这种形式。</p></blockquote>

<h3>Solution</h3>

<p><strong>The are 2 solutions</strong>. The easy one is this:</p>

<blockquote><p>sort first, then 把临近的奇数换到偶数(index)上, O(nlog n).</p></blockquote>

<p><strong>There&rsquo;s a great O(n) solution however</strong>, not easy to think:</p>

<blockquote><p>两两比较相邻数字，把大的数字放到下标为奇数的位置。 O(n).</p></blockquote>

<h3>Code</h3>

<p><strong>O(nlgn) solution</strong></p>

<pre><code>public void solutionOnlgn(int[] A) {
    // this is a O(nlgn) solution
    Arrays.sort(A);
    for (int i = 2; i &lt; A.length; i += 2) {
        swap(A, i - 1, i);
    }
}

private void swap(int[] A, int a, int b) {
    A[a] ^= A[b];
    A[b] ^= A[a];
    A[a] ^= A[b];
}
</code></pre>

<p><strong>O(n) solution</strong></p>

<pre><code>public void solutionOn(int[] A) {
    // this is a O(n) solution
    for (int i = 1; i &lt; A.length; i++) {
        // compare (i)th with (i-1)th, and put the large value
        // at odd-indexed positions
        if ((A[i - 1] &lt; A[i] &amp;&amp; i % 2 == 0)
                || (A[i - 1] &gt; A[i] &amp;&amp; i % 2 == 1)) {
            swap(A, i - 1, i);
        }
    }
}

private void swap(int[] A, int a, int b) {
    A[a] ^= A[b];
    A[b] ^= A[a];
    A[a] ^= A[b];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] String Replacement Question]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/String-replacement-question/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/String-replacement-question</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32766461.html">link</a></p>

<blockquote><p>String replace, 给一个原string，一个target，一个替换的新str，把所有出现
target str的地方都换成新的str， 长度可以任意.</p></blockquote>

<h3>Solution</h3>

<p>If the question asks for an in-place algo, then we can refer to <strong>Question 1.5 in CC150v4</strong>.</p>

<h3>Question</h3>

<blockquote><p>1.5 Write a method to replace all spaces in a string with ‘%20’.</p></blockquote>

<h3>Solution</h3>

<ol>
<li><strong>pre-processing</strong>, count the number of spaces in string</li>
<li>parse the string from end to beginning.</li>
</ol>


<p>Need 2 pass.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>public static void ReplaceFun(char[] str, int length) {
    int spaceCount = 0, newLength, i = 0;
    for (i = 0; i &lt; length; i++) {
        if (str[i] == ' ') {
            spaceCount++;
        }
    }
    newLength = length + spaceCount * 2;
    str[newLength] = '\0';
    for (i = length - 1; i &gt;= 0; i--) {
        if (str[i] == ' ') {
            str[newLength - 1] = '0';
            str[newLength - 2] = '2';
            str[newLength - 3] = '%';
            newLength = newLength - 3;
        } else {
            str[newLength - 1] = str[i];
            newLength = newLength - 1;
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Leader Election]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/Leader-election/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/Leader-election</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p>(this question is from MIT handouts B)</p>

<blockquote><p>Describe a technique to identify a &ldquo;leader&rdquo; among a group of 10 identical servers that are all connected to every other server.</p>

<p>There are no prior distinguishing characteristics of any of them and the same program to identify the leader starts running on all of them at the same time. After an answer is given, ask how much network traffic it requires and, if &ldquo;ties&rdquo; are possible, ask how you can break ties.</p></blockquote>

<h3>Leader Election</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Leader_election">Leader Election</a></strong> is the process of designating a single process as the organizer of some task distributed among several computers. After running this algorithm, each node throughout the network recognizes a unique node as the task leader.</p>

<p>The good answer would be:</p>

<p>Have each server wait a random amount of time and then say &ldquo;I&rsquo;m it.&rdquo; The &ldquo;I&rsquo;m it&rdquo; <strong>announcement is time‐stamped</strong>, and the computer that <strong>time‐stamped its announcement first</strong> is elected the leader.</p>

<p>This approach requires sending out 9 messages. <strong>If there is a tie</strong>, the computers can repeat the procedure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Listener / Observer Pattern]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Listener-Observer-pattern/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Listener-Observer-pattern</id>
    <content type="html"><![CDATA[<h3>Observer pattern</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Observer_pattern">The observer pattern</a></strong> is a software design pattern in which an object(subject) maintains a list of dependents(observers), and notifies them automatically of any state changes (usually by calling one of their methods).</p>

<p>The Observer pattern is mainly used to implement distributed event handling systems. It&rsquo;s also a key part in MVC architectural.</p>

<h3>Example</h3>

<p>A mailing list example.</p>

<p>Each student in the mailing list would be a listener/observer, and teacher would be announcer/subject.</p>

<p>So in the code, there&rsquo;s a Listener Interface that all students implement. There&rsquo;s a update() method in the interface, where each student define their own implementation.</p>

<p>Teacher would keep a list of Listeners. When there&rsquo;s any news, teacher would call update() on each object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Find Anagrams in Dictionary]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Find-anagrams-in-dictionary/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Find-anagrams-in-dictionary</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=3088">link</a></p>

<blockquote><p>Imagine you had a dictionary. How would you print all anagrams of a word? What if you had to do this repeatedly? Could you optimize it?</p></blockquote>

<h3>Solution</h3>

<p>A very <a href="http://stackoverflow.com/a/12477976">nice solution</a>:</p>

<ol>
<li><p>Open dictionary</p></li>
<li><p>Create empty hashmap H</p></li>
<li><p>For each word in dictionary:</p>

<ol>
<li><p>Create a key that is the word&rsquo;s letters sorted alphabetically (and forced to one case)</p></li>
<li><p>Add the word to the list of words accessed by the hash key in H</p></li>
</ol>
</li>
</ol>


<p>There&rsquo;s another <a href="http://karmaandcoding.blogspot.sg/2012/02/print-all-anagrams-for-word-from.html">very interesting idea</a>, if the length of the word is not too long.</p>

<blockquote><p>Another approach could be we can assign each letters from a..z a prime numbers (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, .. so on)</p>

<p>and then for any word, we can calculate its key as the multiples of all the prime number corresponding to characters in the word.</p>

<p>The char &ndash;> int assignment may look like:</p></blockquote>

<pre><code>a=2, b=3, c=5, d=7, e=11, f=13, g=17, h=19, i=23, j=29, 
k=31, l=37, m=41, n=43, o=47, p=53, q=59, r=61, s=67, t=71, 
u=73, v=79, w=83, x=89, y=97, z=101
</code></pre>

<h3>Code</h3>

<p><strong>not written by me</strong>, <a href="http://karmaandcoding.blogspot.sg/2012/02/print-all-anagrams-for-word-from.html">link</a></p>

<pre><code>private static HashMap&lt;String, ArrayList&lt;String&gt;&gt; anagramMap = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();

public static void findAnagrams(String[] dictionary) {
    int len = dictionary.length;

    for (int i = 0; i &lt; len; i++) {
        String sortedWord = sortWordLexicographically(dictionary[i]);
        ArrayList&lt;String&gt; wordList = anagramMap.get(sortedWord);
        if (wordList == null) {
            wordList = new ArrayList&lt;String&gt;();
        }
        wordList.add(dictionary[i]);
        anagramMap.put(sortedWord, wordList);
    }
}

public ArrayList&lt;String&gt; getAnagrams(String word) {
    if (word == null) {
        return null;
    }

    String sortedWord = sortWordLexicographically(word);
    return anagramMap.get(sortedWord);
}

public void printAnagrams(String word) {
    if (word == null) {
        System.out.println("Input word is null!");
    } else {
        ArrayList&lt;String&gt; wordList = getAnagrams(word);
        if (wordList == null) {
            System.out.println("No anagrams exists for : " + word);
        } else {
            Iterator&lt;String&gt; iter = wordList.iterator();
            while (iter.hasNext()) {
                System.out.print(iter.next());
            }
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Array Distance A(i)+A(j)+(j-i)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Array-distance-A(i)+A(j)+(j-i)/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Array-distance-A(i)+A(j)+(j-i)</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article/JobHunting/32772225_3.html">link</a></p>

<blockquote><p>Given an int array A[], define:</p>

<p>distance = A[i] + A[j] + (j-i), j >= i.</p>

<p>Find max distance in A[]</p></blockquote>

<h3>Solution</h3>

<p>Solution suggested on floor 8 of <a href="http://www.mitbbs.com/mitbbs_article_t.php?board=JobHunting&amp;gid=32772225&amp;ftype=0">this post</a>.</p>

<ol>
<li><p>distance = (A[i] &ndash; i) + (A[j] + j), so we do 2 iteration in the array and calculate (A[i] &ndash; i) and (A[j] + j) respectively.</p></li>
<li><p>save the max value of (A[i] &ndash; i) from left to right</p></li>
<li><p>save the max value of (A[j] + j) from right to left</p></li>
<li><p>last iteration, calculate result.</p></li>
</ol>


<p>Eg. input = {3, 3, 3, 5, 6, 4}</p>

<blockquote><p>max value of (A[i] &ndash; i) from left to right: {3, 3, 3, 3, 3, 3}</p>

<p>max value of (A[j] + j) from right to left: {10, 10, 10, 10, 10, 9}</p>

<p>final result: 13</p></blockquote>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public int distance(int[] A) {
    int len = A.length;
    int[] arrayI = new int[len];
    int[] arrayJ = new int[len];

    arrayI[0] = A[0] - 0;
    // arrayI stores max value of (A[i]-i) from left to right
    arrayJ[len - 1] = A[len - 1] + (len - 1);
    // arrayJ stores max value of (A[i]+i) from right to left

    for (int i = 1; i &lt; len; i++) {
        arrayI[i] = Math.max(arrayI[i - 1], A[i] - i);
    }

    for (int i = len - 2; i &gt;= 0; i--) {
        arrayJ[i] = Math.max(arrayJ[i + 1], A[i] + i);
    }

    Common.printArray(arrayI);
    Common.printArray(arrayJ);

    int max = Integer.MIN_VALUE;
    for (int i = 0; i &lt; len; i++) {
        max = Math.max(max, arrayI[i] + arrayJ[i]);
    }
    return max;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Multithreading - Deadlock Prevention]]></title>
    <link href="http://okckd.github.io/blog/2014/09/01/Multithreading-deadlock-prevention/"/>
    <updated>2014-09-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/01/Multithreading-deadlock-prevention</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>How to prevent deadlock? (question from MIT handouts 1)</p></blockquote>

<h3>Analysis</h3>

<p>Preventing one of the 4 conditions will prevent deadlock:</p>

<ol>
<li><p>Removing the <strong>mutual exclusion condition</strong>, but not very possible.</p></li>
<li><p>The <strong>hold and wait</strong> conditions may be removed by requiring processes to request all the resources they will need before starting up.</p></li>
<li><p>The <strong>no preemption condition</strong> may also be difficult or impossible to avoid as a process has to be able to have a resource for a certain amount of time, or the processing outcome may be inconsistent or thrashing may occur.</p></li>
<li><p>The final condition is the <strong>circular wait condition</strong>. Approaches that avoid circular waits include disabling interrupts during critical sections and using a hierarchy to determine a partial ordering of resources.</p></li>
</ol>


<h3>Answer</h3>

<p><strong>Assign an order to our locks</strong> (require that the locks always acquired in order).</p>

<p>This prevent 2 thread waiting to get the resource in each other&rsquo;s hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Crosswod Solver]]></title>
    <link href="http://okckd.github.io/blog/2014/09/01/Crossword-solver/"/>
    <updated>2014-09-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/01/Crossword-solver</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/8585090/algorithm-for-crossword-puzzle-with-given-grid">link</a></p>

<blockquote><p>Given a wordlist like this:</p></blockquote>

<pre><code>1. ccaa
1. baca
1. baaa
1. bbbb
</code></pre>

<blockquote><p>and a Grid like this:</p></blockquote>

<pre><code>X X 
XXXX
X X 
XXXX
</code></pre>

<blockquote><p>Now solve this crossword. One possible solution:</p></blockquote>

<pre><code>b c 
baca
b a 
baaa
</code></pre>

<h3>Solution</h3>

<p><a href="http://stackoverflow.com/a/8586102">The corssword problem</a> is NP-Complete, so your best shot is brute force: just try all possibilities, and stop when a possibility is a valid. Return failure when you exhausted all possible solutions.</p>

<h3>Code</h3>

<p><strong>Pseudo code for brute force</strong>. (this just serve as a guide, not a complete/correct solution)</p>

<pre><code>solve(words,grid):
   if words is empty:
       if grid.isValudSol():
          return grid
       else:
          return None
   for each word in words:
       possibleSol &lt;- grid.fillFirst(word)
       ret &lt;- solve(words\{word},possibleSol)
       if (ret != None):
          return ret
   return None
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Classic] Travelling Salesman Problem]]></title>
    <link href="http://okckd.github.io/blog/2014/08/30/Travelling-salesman-problem/"/>
    <updated>2014-08-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/30/Travelling-salesman-problem</id>
    <content type="html"><![CDATA[<h3>TSP problem</h3>

<p><a href="http://en.wikipedia.org/wiki/Travelling_salesman_problem">Given a list of cities</a> and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?</p>

<p>It is an NP-hard problem in combinatorial optimization. We will discuss 2 category of solutions:</p>

<ol>
<li>Exact algorithms</li>
<li>Heuristic and approximation algorithms</li>
</ol>


<h3>Exact algorithms</h3>

<ol>
<li><p><strong>Brute force search</strong>, which the run time is O(n!), which is impossible for 20 cities.</p></li>
<li><p><strong>DP</strong> Held–Karp algorithm. O(n<sup>2</sup> x 2<sup>n</sup>).</p></li>
<li><p><strong>Branch-and-bound</strong> algorithm. This can process 40-60 cities.</p></li>
</ol>


<h3>Heuristic and approximation algorithms</h3>

<ol>
<li><p><strong>Greedy</strong>, or Nearest Neighbour algorithm. (an improved version is called Nearest Fragment algorithm, which connect NN in groups)</p></li>
<li><p><strong>Minimum Spanning Tree (MST)</strong>, build the <a href="http://en.m.wikipedia.org/wiki/Minimum_spanning_tree">MST</a> using <a href="http://en.wikipedia.org/wiki/Kruskal's_algorithm">Kruskal&rsquo;s algorithm</a> and then do a <strong>Depth-first Tree Tour</strong>. <a href="http://www.youtube.com/watch?v=HWHZAtQl1vI">link</a> to video.</p>

<ol>
<li><p>Sort all edges from small to large, then add edges into MST as long as no cycle is created. In the end, a MST is achieved.</p></li>
<li><p>Do Depth-first Tree Tour(DFTT)</p></li>
<li><p>Length of DFTT is 2 x weight of MST.</p></li>
<li><p>Skip some nodes that&rsquo;s only visited once.</p></li>
<li><p>We get an legitimate solution.</p></li>
</ol>
</li>
</ol>


<h3>Iterative improvement</h3>

<p>Now these are the solutions. However we can improve it by doing <strong>2-opt Swap</strong>.</p>

<p>It means selecting 2 edges at random. If swapping results in an improvement, then keep it. Keep doing this. <a href="http://www.youtube.com/watch?v=SC5CX8drAtU">link</a> to video.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Classic] MinMax Algorithm]]></title>
    <link href="http://okckd.github.io/blog/2014/08/30/Man-max-algorithm/"/>
    <updated>2014-08-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/30/Man-max-algorithm</id>
    <content type="html"><![CDATA[<h3>Definition</h3>

<p>For every two-person, zero-sum game with finitely many strategies, there exists a value V and a mixed strategy for each player, such that</p>

<ol>
<li>Given player 2&rsquo;s strategy, the best payoff possible for player 1 is V, and</li>
<li>Given player 1&rsquo;s strategy, the best payoff possible for player 2 is −V.</li>
</ol>


<p>Equivalently, Player 1&rsquo;s strategy guarantees him a payoff of V regardless of Player 2&rsquo;s strategy.</p>

<p>Put it in a simple way: MAX tries to <strong>max the utility</strong>, and MIN try to <strong>min it</strong>.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-1.png"></p>

<h3>Steps</h3>

<ol>
<li>Have a <strong>heuristic evaluation function</strong>, which gives a value to non-final game states.</li>
<li>Generate the values down to terminal states.</li>
<li>Min-max calculate the utility, like this:</li>
</ol>


<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-2.png"></p>

<h3>An example</h3>

<p>Othello game:</p>

<blockquote><p>A player can place a new piece in a position if there exists at least one straight (horizontal, vertical, or diagonal) occupied line between the new piece and another piece of the same kind, with one or more contiguous pieces from the opponent player between them.</p>

<p>After placing the new piece, the pieces from the opponent player will be captured and become the pieces from the same player.</p>

<p>The player with the most pieces on the board wins.</p></blockquote>

<p>First, the <strong>heuristic evaluation function</strong>:</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-2.png"></p>

<p>Now, generate terminal level utility values:</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-3.png"></p>

<p>Now, do min-max algorithm:</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-example-4.png"></p>

<h3>Pruning</h3>

<p>The performance of the naïve minimax algorithm may be improved dramatically, without affecting the result, <a href="http://en.wikipedia.org/wiki/Minimax#Minimax_algorithm_with_alternate_moves">by the use of</a> <strong>alpha-beta pruning</strong>.</p>

<p><a href="http://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning">Alpha–beta pruning</a> is a search algorithm that seeks to decrease the number of nodes that are evaluated by the minimax algorithm in its search tree.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/minmax-ab-pruning.png"></p>
]]></content>
  </entry>
  
</feed>
