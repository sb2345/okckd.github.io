<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shuatiblog.com]]></title>
  <link href="http://www.shuatiblog.com/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-10-14T22:25:36-05:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Query II ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query-II/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query-II</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-query-ii/">link</a></p>

<blockquote><p>For an array, we can build a SegmentTree for it, each node stores an extra attribute count to denote the number of elements in the the array which value is between interval start and end. (The array may not fully filled by elements)</p>

<p>Design a query method with three parameters root, start and end, find the number of elements in the in array&rsquo;s interval [start, end] by the given root of value SegmentTree.</p></blockquote>

<h3>Solution</h3>

<p>Similar.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, count;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int count) {
 *         this.start = start;
 *         this.end = end;
 *         this.count = count;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The count number in the interval [start, end]
     */
    public int query(SegmentTreeNode root, int start, int end) {
        if (root == null || start &gt; end) {
            return 0;
        } else if (root.start &gt; end || root.end &lt; start) {
            return 0;
        } else if (start &lt;= root.start &amp;&amp; root.end &lt;= end) {
            return root.count;
        }
        int mid = (root.start + root.end) / 2;
        return query(root.left, start, Math.min(mid, end)) + 
                query(root.right, Math.max(mid + 1, start), end);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Query ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Query</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-query/">link</a></p>

<blockquote><p>For an integer array (index from 0 to n-1, where n is the size of this array), in the corresponding SegmentTree, each node stores an extra attribute max to denote the maximum number in the interval of the array (index from start to end).</p>

<p>Design a query method with three parameters root, start and end, find the maximum number in the interval [start, end] by the given root of segment tree.</p></blockquote>

<h3>Solution</h3>

<p>Slightly difficult as we need to keep in mind the following:</p>

<ol>
<li><p>what&rsquo;s the return condition? (start and end is large enough to cover the entire range)</p></li>
<li><p>how to handle overlapping case? (find min-point first and then analyse case by case)</p></li>
</ol>


<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The maximum number in the interval [start, end]
     */
    public int query(SegmentTreeNode root, int start, int end) {
        // write your code here
        if (root == null || start &gt; end) {
            return -1;
        } else if (root.start &gt; end || root.end &lt; start) {
            return -1;
        } else if (root.start &gt;= start &amp;&amp; root.end &lt;= end) {
            return root.max;
        }
        int mid = (root.start + root.end) / 2;
        return Math.max(query(root.left, start, Math.min(mid, end)), 
                        query(root.right, Math.max(mid + 1, start), end));
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Modify ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Modify/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Modify</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-modify/#">link</a></p>

<blockquote><p>For a Maximum Segment Tree, which each node has an extra value max to store the maximum value in this node&rsquo;s interval.</p>

<p>Implement a modify function with three parameter root, index and value to change the node&rsquo;s value with [start, end] = [index, index] to the new given value. Make sure after this change, every node in segment tree still has the max attribute with the correct value.</p></blockquote>

<h3>Solution</h3>

<p>It&rsquo;s very similar to <strong>Segment Tree Modify/search</strong>.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, index, value: The root of segment tree and 
     *@ change the node's value with [index, index] to the new given value
     *@return: void
     */
    public void modify(SegmentTreeNode root, int index, int value) {
        helper(root, index, value);
    }

    private int helper(SegmentTreeNode node, int target, int val) {
        if (node.start &gt; target || node.end &lt; target) {
            // no update, then just return max as normal
            return node.max;
        } else if (node.start == node.end &amp;&amp; node.start == target) {
            node.max = val;
            return val;
        } else {
            // check left and right, and update max value accordingly
            node.max = Math.max(helper(node.left, target, val), 
                                helper(node.right, target, val));
            return node.max;
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Build II ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build-II/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build-II</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segmemt-tree-build-ii/">link</a></p>

<blockquote><p>The structure of Segment Tree is a binary tree which each node has two attributes start and end denote an segment / interval.</p>

<p>start and end are both integers, they should be assigned in following rules:</p>

<p>The root&rsquo;s start and end is given by build method.
The left child of node A has start=A.left, end=(A.left + A.right) / 2.
The right child of node A has start=(A.left + A.right) / 2 + 1, end=A.right.
if start equals to end, there will be no children for this node.</p>

<p>Implement a build method with a given array, so that we can create a corresponding segment tree with every node value represent the corresponding interval max value in the array, return the root of this segment tree.</p></blockquote>

<h3>Solution</h3>

<p>Similar.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param A: a list of integer
     *@return: The root of Segment Tree
     */
    public SegmentTreeNode build(int[] A) {
        if (A == null || A.length == 0) {
            return null;
        }
        return helper(A, 0, A.length - 1);
    }

    private SegmentTreeNode helper(int[] A, int start, int end) {
        if (start &gt; end) {
            return null;
        }
        SegmentTreeNode node = new SegmentTreeNode(start, end);
        if (start == end) {
            node.max = A[start];
            return node;
        } else {
            node.left = helper(A, start, (start + end) / 2);
            node.right = helper(A, (start + end) / 2 + 1, end);
            if (node.right != null) {
                node.max = Math.max(node.left.max, node.right.max);
            } else {
                node.max = node.left.max;
            }
        }
        return node;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LintCode] Segment Tree Build ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build/"/>
    <updated>2015-10-13T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/13/Segment-Tree-Build</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.lintcode.com/en/problem/segment-tree-build/">link</a></p>

<blockquote><p>The structure of Segment Tree is a binary tree which each node has two attributes start and end denote an segment / interval.</p>

<p>start and end are both integers, they should be assigned in following rules:</p>

<p>The root&rsquo;s start and end is given by build method.
The left child of node A has start=A.left, end=(A.left + A.right) / 2.
The right child of node A has start=(A.left + A.right) / 2 + 1, end=A.right.
if start equals to end, there will be no children for this node.</p>

<p>Implement a build method with two parameters start and end, so that we can create a corresponding segment tree with every node has the correct start and end value, return the root of this segment tree.</p></blockquote>

<h3>Solution</h3>

<p>A simple top-down run through.</p>

<h3>Code</h3>

<pre><code>/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end) {
 *         this.start = start, this.end = end;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param start, end: Denote an segment / interval
     *@return: The root of Segment Tree
     */
    public SegmentTreeNode build(int start, int end) {
        // write your code here
        if (start &gt; end) {
            return null;
        }
        SegmentTreeNode node = new SegmentTreeNode(start, end);
        if (start &lt; end) {
            node.left = build(start, (start + end) / 2);
            node.right = build((start + end) / 2 + 1, end);
        }
        return node;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] Segment Tree ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/08/segment-tree/"/>
    <updated>2015-10-08T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/08/segment-tree</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong><a href="https://en.wikipedia.org/wiki/Segment_tree">Segment tree</a></strong> is a tree data structure for storing intervals, or segments.</p>

<p>Can be used to search <strong>the max/min or sum values in a range</strong>.</p>

<ol>
<li><p>modify = O(log n)</p></li>
<li><p>query = O(log n)</p></li>
<li><p>build = O(n)</p></li>
</ol>


<h2>question list</h2>

<ol>
<li><p>[LintCode] Segment Tree Build</p></li>
<li><p>[LintCode] Segment Tree Build II</p></li>
<li><p>[LintCode] Segment Tree Modify</p></li>
<li><p>[LintCode] Segment Tree Query</p></li>
<li><p>[LintCode] Segment Tree Query II</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Largest Sub-square with Edges filled ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html">link</a></p>

<blockquote><p>Given a matrix where every element is either ‘O’ or ‘X’, find the largest sub-square surrounded by ‘X’. (meaning that the 4 edges are filled with &lsquo;X&rsquo;)</p>

<p>Example Input:</p></blockquote>

<pre><code> {'X', 'O', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'O', 'X', 'O'},
 {'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'O', 'O'},
</code></pre>

<blockquote><p>Output: 3. The square submatrix starting at (1, 1) is the largest sub-squre.</p>

<p>Example Input:</p></blockquote>

<pre><code> {'X', 'O', 'X', 'X', 'X', 'X'},
 {'X', 'O', 'X', 'X', 'O', 'X'},
 {'X', 'X', 'X', 'O', 'O', 'X'},
 {'X', 'X', 'X', 'X', 'X', 'X'},
 {'X', 'X', 'X', 'O', 'X', 'O'},
</code></pre>

<blockquote><p>Output: 4. The square submatrix starting at (0, 2) is the largest</p></blockquote>

<h3>Solution</h3>

<p>Read a very similar question &ndash; <strong>[Question] Maximum Square Sub-matrix With All 1s</strong></p>

<p>Typical DP question. Now the solution is to build 2 arrays to cache info. One horizontally and one, vertical.</p>

<blockquote><p>create two auxiliary arrays hor[N][N] and ver[N][N].</p>

<p>hor[i][j] is the number of horizontal continuous ‘X’ characters till mat[i][j] in mat[][].</p>

<p>ver[i][j] is the number of vertical continuous ‘X’ characters till mat[i][j] in mat[][].</p></blockquote>

<pre><code>mat[6][6] =  X  O  X  X  X  X
             X  O  X  X  O  X
             X  X  X  O  O  X
             O  X  X  X  X  X
             X  X  X  O  X  O
             O  O  X  O  O  O

hor[6][6] = 1  0  1  2  3  4
            1  0  1  2  0  1
            1  2  3  0  0  1
            0  1  2  3  4  5
            1  2  3  0  1  0
            0  0  1  0  0  0

ver[6][6] = 1  0  1  1  1  1
            2  0  2  2  0  2
            3  1  3  0  0  3
            0  2  4  1  1  4
            1  3  5  0  2  0
            0  0  6  0  0  0
</code></pre>

<p>After we got these, start from the bottom-right corner row by row up&hellip; For every mat[i][j], we compare hor[i][j] with ver[i][j] and pick the smaller one.</p>

<p>All we need to do next, is to check the other 2 edges. This solution is O(n<sup>3</sup>).</p>

<h3>Code</h3>

<p>C++ code provided by <a href="www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html">G4G</a>:</p>

<pre><code>int findSubSquare(int mat[][N])
{
    int max = 1; // Initialize result

    // Initialize the left-top value in hor[][] and ver[][]
    int hor[N][N], ver[N][N];
    hor[0][0] = ver[0][0] = (mat[0][0] == 'X');

    // Fill values in hor[][] and ver[][]
    for (int i=0; i&lt;N; i++)
    {
        for (int j=0; j&lt;N; j++)
        {
            if (mat[i][j] == 'O')
                ver[i][j] = hor[i][j] = 0;
            else
            {
                hor[i][j] = (j==0)? 1: hor[i][j-1] + 1;
                ver[i][j] = (i==0)? 1: ver[i-1][j] + 1;
            }
        }
    }

    // Start from the rightmost-bottommost corner element and find
    // the largest ssubsquare with the help of hor[][] and ver[][]
    for (int i = N-1; i&gt;=1; i--)
    {
        for (int j = N-1; j&gt;=1; j--)
        {
            // Find smaller of values in hor[][] and ver[][]
            // A Square can only be made by taking smaller
            // value
            int small = getMin(hor[i][j], ver[i][j]);

            // At this point, we are sure that there is a right
            // vertical line and bottom horizontal line of length
            // at least 'small'.

            // We found a bigger square if following conditions
            // are met:
            // 1)If side of square is greater than max.
            // 2)There is a left vertical line of length &gt;= 'small'
            // 3)There is a top horizontal line of length &gt;= 'small'
            while (small &gt; max)
            {
                if (ver[i][j-small+1] &gt;= small &amp;&amp;
                    hor[i-small+1][j] &gt;= small)
                {
                    max = small;
                }
                small--;
            }
        }
    }
    return max;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Cloest Leaf in Binary Tree ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html">link</a></p>

<blockquote><p>Given a Binary Tree and a key, find distance of the closest leaf.</p>

<p>Examples:</p></blockquote>

<pre><code>          1
        /    \    
       2       3
             /   \  
            5     6   
           /       \
          7         8
         / \       /
        9  10     11

Closest key to '8' is '11', so distance is 1 for '8'
Closest key to '3' is '2', so distance is 2 for '3'
Closest key to '5' is either '9' or '10', so distance is 2 for '5'
Closest key to '2' is '2' itself, so distance is 0 for '2' 
</code></pre>

<h3>Solution</h3>

<blockquote><p>traverse the given tree in preorder and keep track of ancestors (in a caching data struture, either it&rsquo;s List or an array with a correct pointer)</p></blockquote>

<p>When we find our target, we do 2 things:</p>

<ol>
<li><p>find <strong>closest distance on lower subtrees of current node</strong>.</p></li>
<li><p>for every ancester, find the <strong>closest distance on lower subtrees</strong>, then add with <strong>distance to ancester</strong>.</p></li>
</ol>


<p>Finally, return the smallest value seen above.</p>

<h3>Code</h3>

<p>Inspired by the code from <a href="www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html">G4G</a></p>

<pre><code>int answer;

public int findClosest(TreeNode root, int key) {
    answer = Integer.MAX_VALUE;
    helper(root, key, new ArrayList&lt;TreeNode&gt;());
    return answer;
}

private void helper(TreeNode node, int key, List&lt;TreeNode&gt; path) {
    if (node == null) {
        return;
    } else if (node.val != key) {
        path.add(node);
        helper(node.left, key, path);
        helper(node.right, key, path);
        path.remove(path.size() - 1);
    } else {
        // key matches with current node value
        answer = lenToLowerLeaf(node);
        // answer initially = cloest leaf from lower

        int len = path.size();
        for (int i = 0; i &lt; len; i++) {
            // for every ancestor, calculate distance and compare
            int ithToLowerLeaf = lenToLowerLeaf(path.get(i));
            answer = Math.min(answer, (len - i) + ithToLowerLeaf);
        }
    }
}

private int lenToLowerLeaf(TreeNode node) {
    if (node == null) {
        return Integer.MAX_VALUE;
    } else if (node.left == null &amp;&amp; node.right == null) {
        return 0;
    } else {
        return 1 + Math.min(lenToLowerLeaf(node.left), lenToLowerLeaf(node.right));
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] All Strings by Placing Spaces ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="www.geeksforgeeks.org/print-possible-strings-can-made-placing-spaces/index.html">link</a></p>

<blockquote><p>Given a string, print all possible strings that can be made by placing spaces (zero or one) in between them.</p>

<p>Input:  str[] = &ldquo;ABC&rdquo;</p>

<p>Output:</p></blockquote>

<pre><code>    ABC
    AB C
    A BC
    A B C
</code></pre>

<h3>Solution</h3>

<p>recursion.</p>

<h3>Code</h3>

<pre><code>public void printAll(String input) {
    if (input == null || input.length() &lt;= 1) {
        // since we insert space in-between chars, so
        return;
    }
    int len = input.length();
    // len &gt;= 2
    helper(input, len - 1);
}

private void helper(String s, int p) {
    if (p == 1) {
        System.out.println(s);
        // no insertion
        System.out.println(s.substring(0, 1) + " " + s.substring(1));
        // insert at position 1
    } else {
        helper(s, p - 1);
        helper(s.substring(0, p) + " " + s.substring(p), p - 1);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Fundamental] The 7 Bridges Problem ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/04/seven-bridge/"/>
    <updated>2015-10-04T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/04/seven-bridge</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>In East Prussia(普鲁士), people try to walk all <a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg">7 bridges</a> w/o crossing a bridge twice.</p>

<p>Leonhard Euler (pronounced &ldquo;oiler&rdquo;) – Swiss</p>

<h1>Euler path</h1>

<p>An Euler path, also called an Eulerian trail, is a walk on the graph edges of a graph which uses each graph edge in the original graph exactly once.</p>

<h2>Degree</h2>

<p>Node degree of a vertex: the number of edges incident with it.</p>

<h2>Euler Theorem</h2>

<p>A graph contains an euler path iffeither of the following cases hold:</p>

<ol>
<li>All except for two nodes have even degrees – the 2 odd-degree nodes must be start and end points</li>
<li>all nodes have even degrees.</li>
</ol>


<h1>Application</h1>

<p>networks, distributed systems, coding theory</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Shortest Manhattan Distance ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/02/shorest-manhattan-distance/"/>
    <updated>2015-10-02T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/02/shorest-manhattan-distance</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/33054861.html">link</a></p>

<blockquote><p>给一个 n*m 的房间，房间里存在各种可能的墙，房间的格子里已经放了 e 个器材，要
求新放一个器材，放置位置距其它 e 个器材的距离最近。Breadth-first search.</p></blockquote>

<h3>Solution</h3>

<blockquote><p>对 e个设备 BFS, 求每个设备到每个可以放新器材的点的距离，然后叠加。</p>

<p>最后O（n<sup>2</sup>）一遍找最小值。复杂度O（e*n<sup>2</sup>）</p></blockquote>

<p>As for whether we choose to check each equipment position, or check each vacant position, it&rsquo;s decided by how many equipment is there. If very little equipments (e is small), then this solution should work.</p>

<p>However, what is there is obstacles in the matrix?</p>

<p>We have to use BFS then. It took more space usage, but the time complexity should be same.</p>

<h3>Code</h3>

<pre><code>public void findCenter(int[][] input, int numberOfEquip) {
    int m = input.length;
    int n = input[0].length;

    // there's gonna be m * n positions
    // we gonna cumulate (numberOfEquip) distances for each position
    int[] dis = new int[m * n];

    // from the input map, find Equipments
    for (int i = 0; i &lt; m; i++) {
        for (int j = 0; j &lt; n; j++) {
            if (input[i][j] == 1) {
                // 1 represents equipment
                // when found, add the distance to every position
                cumulateDistance(i, j, dis, m, n);
            }
        }
    }

    // find the smallest cumulated distance from dis[].
    int sIndex = 0;
    int smallest = dis[0];
    for (int i = 0; i &lt; m * n; i++) {
        if (dis[i] &lt; smallest) {
            smallest = dis[i];
            sIndex = i;
        }
    }

    // index sIndex is the final answer
    System.out.println("Answer: " + (sIndex / n) + " " + (sIndex % n));
}

private void cumulateDistance(int x, int y, int[] dis, int m, int n) {
    for (int i = 0; i &lt; m * n; i++) {
        int a = i / n;
        int b = i % n;
        dis[i] += Math.abs(a - x) + Math.abs(b - y);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 21] bbbbbbbbbbbbbbbbbbbb ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/21/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/21</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="cccccccccccccccccccccccccccccccccccccccccccc">link</a></p>

<p>ddddddddddddddddddddddddddddddddddddddd</p>

<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 209] Minimum Size Subarray Sum ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/209/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/209</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/">link</a></p>

<div class="question-content">
              <p></p><p>
Given an array of <strong>n</strong> positive integers and a positive integer <strong>s</strong>, find the minimal length of a subarray of which the sum ≥ <strong>s</strong>. If there isn&#8217;t one, return 0 instead.
</p>
<p>
For example, given the array <code>[2,3,1,2,4,3]</code> and <code>s = 7</code>,<br>
the subarray <code>[4,3]</code> has the minimal length under the problem constraint.
</p>

<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show more practice.</a></p>

<div class="spoilers" style="display: none;"><b>More practice:</b>

<p>If you have figured out the <i>O</i>(<i>n</i>) solution, try coding another solution of which the time complexity is <i>O</i>(<i>n</i> log <i>n</i>).</p>
</div>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/Freezen">@Freezen</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/array/">Array</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/two-pointers/">Two Pointers</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/binary-search/">Binary Search</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/minimum-window-substring/"> (H) Minimum Window Substring</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 208] Implement Trie (Prefix Tree) ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/208/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/208</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/implement-trie-prefix-tree/">link</a></p>

<div class="question-content">
              <p></p><p>
Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.
</p>

<p>
<b>Note:</b><br>
You may assume that all inputs are consist of lowercase letters <code>a-z</code>.
</p><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/trie/">Trie</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/design/">Design</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/add-and-search-word-data-structure-design/"> (M) Add and Search Word - Data structure design</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 207] Course Schedule  ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/207/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/207</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/course-schedule/">link</a></p>

<div class="question-content">
              <p></p><p>
There are a total of <i>n</i> courses you have to take, labeled from <code>0</code> to <code>n - 1</code>.</p>

<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>

<p>
Given the total number of courses and a list of prerequisite <b>pairs</b>, is it possible for you to finish all courses?
</p>

<p>For example:</p>
<pre>2, [[1,0]]</pre>
<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</p>

<pre>2, [[1,0],[0,1]]</pre>
<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</p>

<p><b>Note:</b><br>
The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href="https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs" target="_blank">how a graph is represented</a>.
</p>

<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show more hints.</a></p>

<div class="spoilers" style="display: none;"><b>Hints:</b>
<ol>
<li>This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.</li>
<li><a href="https://class.coursera.org/algo-003/lecture/52" target="_blank">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.</li>
<li>Topological sort could also be done via <a href="http://en.wikipedia.org/wiki/Topological_sorting#Algorithms" target="_blank">BFS</a>.</li>
</ol>
</div><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/depth-first-search/">Depth-first Search</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/breadth-first-search/">Breadth-first Search</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/graph/">Graph</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/topological-sort/">Topological Sort</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/course-schedule-ii/"> (M) Course Schedule II</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/graph-valid-tree/"> (M) Graph Valid Tree</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 206] Reverse Linked List  ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/206/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/206</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/reverse-linked-list/">link</a></p>

<div class="question-content">
              <p></p><p>Reverse a singly linked list.</p>

<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show more hints.</a></p>

<div class="spoilers" style="display: none;"><b>Hint:</b>
<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>
</div><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/linked-list/">Linked List</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/reverse-linked-list-ii/"> (M) Reverse Linked List II</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/binary-tree-upside-down/"> (M) Binary Tree Upside Down</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/palindrome-linked-list/"> (E) Palindrome Linked List</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 205] Isomorphic Strings  ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/205/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/205</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/isomorphic-strings/">link</a></p>

<div class="question-content">
              <p></p><p>Given two strings <b><i>s</i></b> and <b><i>t</i></b>, determine if they are isomorphic.</p>

<p>Two strings are isomorphic if the characters in <b><i>s</i></b> can be replaced to get <b><i>t</i></b>.</p>

<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>

<p>For example,<br>
Given <code>"egg"</code>, <code>"add"</code>, return true.</p>

<p>Given <code>"foo"</code>, <code>"bar"</code>, return false.</p>

<p>Given <code>"paper"</code>, <code>"title"</code>, return true.</p>

<p><b>Note:</b><br>
You may assume both <b><i>s</i></b> and <b><i>t</i></b> have the same length.</p><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/hash-table/">Hash Table</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/word-pattern/"> (E) Word Pattern</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 204] Count Primes  ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/204/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/204</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/count-primes/">link</a></p>

<div class="question-content">
              <p></p><p><b>Description:</b></p>
<p>Count the number of prime numbers less than a non-negative number, <b><i>n</i></b>.</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://leetcode.com/discuss/user/mithmatt">@mithmatt</a> for adding this problem and creating all test cases.</p>

<p style="display:none"><b>Hint:</b></p><a class="btn-left-space btn btn-outline btn-alt" style="margin-bottom:15px;margin-top:15px" href="#">Show Hint <i class="fa fa-chevron-right"></i></a><ol id="hints">
  <li class="hint animated fadeInLeft"><p>Let&#8217;s start with a <i>isPrime</i> function. To determine if a number is prime, we need to check if it is not divisible by any number less than <i>n</i>. The runtime complexity of <i>isPrime</i> function would be O(<i>n</i>) and hence counting the total prime numbers up to <i>n</i> would be O(<i>n</i><sup>2</sup>). Could we do better?</p>
  <a class="btn-left-space btn btn-outline btn-alt" href="#">Show More Hint <i class="fa fa-chevron-right"></i></a></li>
  <li class="hint animated fadeInLeft"><p>As we know the number must not be divisible by any number &gt; <i>n</i> / 2, we can immediately cut the total iterations half by dividing only up to <i>n</i> / 2. Could we still do better?</p>
  <a class="btn-left-space btn btn-outline btn-alt" href="#">Show More Hint <i class="fa fa-chevron-right"></i></a></li>
  <li class="hint animated fadeInLeft"><p>Let&#8217;s write down all of 12&#8217;s factors:</p>
<pre>2 × 6 = 12
3 × 4 = 12
4 × 3 = 12
6 × 2 = 12
</pre>

<p>As you can see, calculations of 4 × 3 and 6 × 2 are not necessary. Therefore, we only need to consider factors up to √<i>n</i> because, if <i>n</i> is divisible by some number <i>p</i>, then <i>n</i> = <i>p</i> × <i>q</i> and since <i>p</i> ≤ <i>q</i>, we could derive that <i>p</i> ≤ √<i>n</i>.</p>

<p>Our total runtime has now improved to O(<i>n</i><sup>1.5</sup>), which is slightly better. Is there a faster approach?</p>

<pre>public int countPrimes(int n) {
   int count = 0;
   for (int i = 1; i &lt; n; i++) {
      if (isPrime(i)) count++;
   }
   return count;
}

private boolean isPrime(int num) {
   if (num &lt;= 1) return false;
   // Loop's ending condition is i * i &lt;= num instead of i &lt;= sqrt(num)
   // to avoid repeatedly calling an expensive function sqrt().
   for (int i = 2; i * i &lt;= num; i++) {
      if (num % i == 0) return false;
   }
   return true;
}
</pre>
  <a class="btn-left-space btn btn-outline btn-alt" href="#">Show More Hint <i class="fa fa-chevron-right"></i></a></li>
  <li class="hint animated fadeInLeft"><p>The <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank">Sieve of Eratosthenes</a> is one of the most efficient ways to find all prime numbers up to <i>n</i>. But don&#8217;t let that name scare you, I promise that the concept is surprisingly simple.</p>

<p>
<img src="http://www.shuatiblog.com/static/images/solutions/Sieve_of_Eratosthenes_animation.gif"><br>
<small>Sieve of Eratosthenes: algorithm steps for primes below 121. &#8221;<a href="http://commons.wikimedia.org/wiki/File:Sieve_of_Eratosthenes_animation.gif" target="_blank">Sieve of Eratosthenes Animation</a>&#8221; by <a href="http://de.wikipedia.org/wiki/Benutzer:SKopp" target="_blank">SKopp</a> is licensed under <a href="http://creativecommons.org/licenses/by/2.0/" target="_blank">CC BY 2.0</a>.</small>
</p>

<p>We start off with a table of <i>n</i> numbers. Let&#8217;s look at the first number, 2. We know all multiples of 2 must not be primes, so we mark them off as non-primes. Then we look at the next number, 3. Similarly, all multiples of 3 such as 3 × 2 = 6, 3 × 3 = 9, &#8230; must not be primes, so we mark them off as well. Now we look at the next number, 4, which was already marked off. What does this tell you? Should you mark off all multiples of 4 as well?</p>
  <a class="btn-left-space btn btn-outline btn-alt" href="#">Show More Hint <i class="fa fa-chevron-right"></i></a></li>
  <li class="hint animated fadeInLeft"><p>4 is not a prime because it is divisible by 2, which means all multiples of 4 must also be divisible by 2 and were already marked off. So we can skip 4 immediately and go to the next number, 5. Now, all multiples of 5 such as 5 × 2 = 10, 5 × 3 = 15, 5 × 4 = 20, 5 × 5 = 25, &#8230; can be marked off. There is a slight optimization here, we do not need to start from 5 × 2 = 10. Where should we start marking off?</p>
  <a class="btn-left-space btn btn-outline btn-alt" href="#">Show More Hint <i class="fa fa-chevron-right"></i></a></li>
  <li class="hint animated fadeInLeft"><p>In fact, we can mark off multiples of 5 starting at 5 × 5 = 25, because 5 × 2 = 10 was already marked off by multiple of 2, similarly 5 × 3 = 15 was already marked off by multiple of 3. Therefore, if the current number is <i>p</i>, we can always mark off multiples of <i>p</i> starting at <i>p</i><sup>2</sup>, then in increments of <i>p</i>: <i>p</i><sup>2</sup> + <i>p</i>, <i>p</i><sup>2</sup> + 2<i>p</i>, &#8230; Now what should be the terminating loop condition?</p>
  <a class="btn-left-space btn btn-outline btn-alt" href="#">Show More Hint <i class="fa fa-chevron-right"></i></a></li>
  <li class="hint animated fadeInLeft"><p>It is easy to say that the terminating loop condition is <i>p</i> &lt; <i>n</i>, which is certainly correct but not efficient. Do you still remember <i>Hint #3</i>?</p>
  <a class="btn-left-space btn btn-outline btn-alt" href="#">Show More Hint <i class="fa fa-chevron-right"></i></a></li>
  <li class="hint animated fadeInLeft"><p>Yes, the terminating loop condition can be <i>p</i> &lt; √<i>n</i>, as all non-primes ≥ √<i>n</i> must have already been marked off. When the loop terminates, all the numbers in the table that are non-marked are prime.</p>

<p>The Sieve of Eratosthenes uses an extra O(<i>n</i>) memory and its runtime complexity is O(<i>n</i> log log <i>n</i>). For the more mathematically inclined readers, you can read more about its algorithm complexity on <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Algorithm_complexity" target="_blank">Wikipedia</a>.</p>

<pre>public int countPrimes(int n) {
   boolean[] isPrime = new boolean[n];
   for (int i = 2; i &lt; n; i++) {
      isPrime[i] = true;
   }
   // Loop's ending condition is i * i &lt; n instead of i &lt; sqrt(n)
   // to avoid repeatedly calling an expensive function sqrt().
   for (int i = 2; i * i &lt; n; i++) {
      if (!isPrime[i]) continue;
      for (int j = i * i; j &lt; n; j += i) {
         isPrime[j] = false;
      }
   }
   int count = 0;
   for (int i = 2; i &lt; n; i++) {
      if (isPrime[i]) count++;
   }
   return count;
}
</pre>
  </li>
</ol><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/hash-table/">Hash Table</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/math/">Math</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/ugly-number/"> (E) Ugly Number</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/ugly-number-ii/"> (M) Ugly Number II</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/perfect-squares/"> (M) Perfect Squares</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 203] Remove Linked List Elements  ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/203/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/203</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/remove-linked-list-elements/">link</a></p>

<div class="question-content">
              <p></p><p>Remove all elements from a linked list of integers that have value <b><i>val</i></b>.</p>
<p>
<b>Example</b><br>
<i><b>Given:</b></i> 1 &#8211;&gt; 2 &#8211;&gt; 6 &#8211;&gt; 3 &#8211;&gt; 4 &#8211;&gt; 5 &#8211;&gt; 6,  <b><i>val</i></b> = 6<br>
<i><b>Return:</b></i> 1 &#8211;&gt; 2 &#8211;&gt; 3 &#8211;&gt; 4 &#8211;&gt; 5
</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://leetcode.com/discuss/user/mithmatt">@mithmatt</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/linked-list/">Linked List</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/remove-element/"> (E) Remove Element</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/delete-node-in-a-linked-list/"> (E) Delete Node in a Linked List</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 202] Happy Number  ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/01/202/"/>
    <updated>2015-10-01T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/01/202</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="https://leetcode.com/problems/happy-number/">link</a></p>

<div class="question-content">
              <p></p><p>Write an algorithm to determine if a number is &#8220;happy&#8221;.</p>

<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>

<p><b>Example:&nbsp;</b>19 is a happy number</p>

<ul style="list-style: none;">
<li>1<sup>2</sup> + 9<sup>2</sup> = 82</li>
<li>8<sup>2</sup> + 2<sup>2</sup> = 68</li>
<li>6<sup>2</sup> + 8<sup>2</sup> = 100</li>
<li>1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1</li>
</ul>

<p><b>Credits:</b><br>Special thanks to <a href="https://leetcode.com/discuss/user/mithmatt">@mithmatt</a> and <a href="https://leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div>
                  <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/hash-table/">Hash Table</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/math/">Math</a>
                    
                  </span>
                </div>
              

              
                <div>
                  <div id="similar" class="btn btn-xs btn-warning">Show Similar Problems</div>
                  <span class="hidebutton">
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/add-digits/"> (E) Add Digits</a>
                    
                    <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/problems/ugly-number/"> (E) Ugly Number</a>
                    
                  </span>
                </div>
              

            </div>


<h3>Analysis</h3>

<h3>Solution</h3>

<h3>Code</h3>
]]></content>
  </entry>
  
</feed>
