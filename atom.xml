<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woodstock Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-09-08T01:36:05+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 10.4 Implement Mathematical Operators]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/implement-math-operators/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/implement-math-operators</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write a method to implement *, &ndash; , / operations You should use only the + operator.</p></blockquote>

<h3>Solution</h3>

<p><strong>First it&rsquo;s important to write a &lsquo;negate&rsquo; operator</strong>. This is used in all other operations.</p>

<pre><code>public static int FnNegate(int a) {
    int neg = 0;
    int d = a &lt; 0 ? 1 : -1;
    while (a != 0) {
        neg += d;
        a += d;
    }
    return neg;
}
</code></pre>

<p>Although we can only use +, the author also used > and &lt; comparison operators.</p>

<p>This is a borning question, I did not write code myself.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>/* Flip a positive sign to negative, or a negative sign to pos */
public static int FnNegate(int a) {
    int neg = 0;
    int d = a &lt; 0 ? 1 : -1;
    while (a != 0) {
        neg += d;
        a += d;
    }
    return neg;
}

/* Subtract two numbers by negating b and adding them */
public static int FnMinus(int a, int b) {
    return a + FnNegate(b);
}

/* Check if a and b are different signs */
public static boolean DifferentSigns(int a, int b) {
    return ((a &lt; 0 &amp;&amp; b &gt; 0) || (a &gt; 0 &amp;&amp; b &lt; 0)) ? true : false;
}

/* Return absolute value */
public static int abs(int a) {
    if (a &lt; 0)
        return FnNegate(a);
    else
        return a;
}

/* Multiply a by b by adding a to itself b times */
public static int FnTimes(int a, int b) {
    if (a &lt; b)
        return FnTimes(b, a); // algo is faster if b &lt; a
    int sum = 0;
    for (int iter = abs(b); iter &gt; 0; --iter)
        sum += a;
    if (b &lt; 0)
        sum = FnNegate(sum);
    return sum;
}

// returns 1, if a/b &gt;= 0.5, and 0 otherwise
public static int DefineAndRoundFraction(int a, int b) {
    if (FnTimes(abs(a), 2) &gt;= abs(b))
        return 1;
    else
        return 0;
}

/*
 * Divide a by b by literally counting how many times does b go into a. That
 * is, count how many times you can subtract b from a until you hit 0.
 */
public static int FnDivide(int a, int b)
        throws java.lang.ArithmeticException {
    if (b == 0) {
        throw new java.lang.ArithmeticException("ERROR: Divide by zero.");
    }
    int quotient = 0;
    int divisor = FnNegate(abs(b));
    int divend; /* dividend */
    for (divend = abs(a); divend &gt;= abs(divisor); divend += divisor) {
        ++quotient;
    }
    if (DifferentSigns(a, b))
        quotient = FnNegate(quotient);
    return quotient;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] Chap9 Example - Sort Persons]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/sort-persons/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/sort-persons</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>You have a very large array of ‘Person’ objects. Sort the people in increasing order of age.</p></blockquote>

<h3>Solution</h3>

<p>First we look at the nature of this question:</p>

<ol>
<li>large input array</li>
<li>sort based on age (<strong>which is between 1 and 100</strong>, this is important)</li>
</ol>


<p><strong>This exactly matches the charasteristics of Bucket Sort</strong>. Time complexity in average case is O(n + k) where k is the number of buckets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 9.5 Search Array Containing Empty String]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/search-array-containing-empty-string/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/search-array-containing-empty-string</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Given a sorted array of strings which is interspersed with empty strings, write a method to find the location of a given string.</p>

<p>Example: find “ball” in [“at”, “”, “”, “”, “ball”, “”, “”, “car”, “”, “”, “dad”, “”, “”] will return 4</p>

<p>Example: find “ballcar” in [“at”, “”, “”, “”, “”, “ball”, “car”, “”, “”, “dad”, “”, “”] will return -1</p></blockquote>

<h3>Solution</h3>

<p>The solution is binary search, but when reads empty, <strong>advance to the next non-empty string</strong>.</p>

<p>But wait, <strong>there can be a very big problem that causes looping forever</strong>. Eg.</p>

<blockquote><p>&ldquo;a&rdquo;, &ldquo;&rdquo;, &ldquo;&rdquo;, &ldquo;&rdquo;, &ldquo;c&rdquo; (5 items), look for &ldquo;b&rdquo;</p>

<p>Now &lsquo;left&rsquo; points to 1st string(&ldquo;a&rdquo;) and &lsquo;right&rsquo; points to 4th(&ldquo;&rdquo;). If we read read &lsquo;mid&rsquo; value and advance to the next non-empty string, it&rsquo;ll be &ldquo;c&rdquo;.</p>

<p>since &ldquo;c&rdquo; is large than &ldquo;b&rdquo;, &lsquo;right&rsquo; is set to the 4th index. It&rsquo;s a endless loop!</p></blockquote>

<p>There&rsquo;re various ways to solve this. The book suggests</p>

<p>My approach is to use 2 instances of &lsquo;mid&rsquo;:</p>

<ol>
<li>calculatedMid</li>
<li>comparisonMid</li>
</ol>


<h3>Code</h3>

<pre><code>public static int search(String[] input, String target) {
    if (target == null || target.length() == 0) {
        return -1;
    }
    int len = input.length;
    int left = 0, right = len - 1;
    while (left &lt; right) {
        int calculatedMid = left + (right - left) / 2;
        int comparisonMid = calculatedMid;
        while (comparisonMid &lt; len &amp;&amp; input[comparisonMid].length() == 0) {
            comparisonMid++;
        }
        if (input[comparisonMid].equals(target)) {
            return comparisonMid;
        } else if (input[comparisonMid].compareTo(target) &lt; 0) {
            left = comparisonMid + 1;
        } else {
            right = calculatedMid - 1;
        }
    }
    if (left &lt; len &amp;&amp; input[left].equals(target)) {
        return left;
    } else {
        return -1;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 8.4 Generate Permutation Recursively]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/generate-permutation-recursively/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/generate-permutation-recursively</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write a method to compute all permutations of a string.</p>

<p>Do it recursively.</p></blockquote>

<h3>Solution</h3>

<ol>
<li><p>Get first char.</p></li>
<li><p>Permute the reminder of the string.</p></li>
<li><p>Insert that char into all possible positions.</p></li>
</ol>


<p>The code is more concise that doing it iteratively, <strong>and no visited array needed</strong>!</p>

<h3>Code</h3>

<pre><code>public static ArrayList&lt;String&gt; getPerms(String s) {
    ArrayList&lt;String&gt; ans = new ArrayList&lt;String&gt;();
    if (s.length() == 1) {
        ans.add(s);
        return ans;
    }
    char single = s.charAt(0);
    ArrayList&lt;String&gt; partialPerms = getPerms(s.substring(1));
    for (String part : partialPerms) {
        for (int i = 0; i &lt;= part.length(); i++) {
            ans.add(part.substring(0, i) + single + part.substring(i));
        }
    }
    return ans;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 5.7 Find Missing Number]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/find-missing-number/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/find-missing-number</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>An array A[1&hellip;n] contains all the integers from 0 to n except for one number which is missing. In this problem, we cannot access an entire integer in A with a single operation.</p>

<p>The elements of A are represented in binary, and the only operation we can use to access them is “fetch the jth bit of A[i]”, which takes constant time. Write code to find the missing integer. Can you do it in O(n) time?</p></blockquote>

<h3>Solution</h3>

<p><strong>This is a difficult bit operation question</strong>.</p>

<p>The main thing to understand is, for a particular bit:</p>

<blockquote><p>if the bit value of the removed number is 0, then count(0) &lt;= count(1)</p>

<p>if the bit value of the removed number is 1, then count(0) > count(1)</p></blockquote>

<p>By using this principle, we can easily find the missing value for each bit.</p>

<p><strong>However, we must know when to stop checking</strong>. For example:</p>

<blockquote><p>input: 000, 001, 011</p></blockquote>

<p>We know that the last bit is 0, second last is 1. We shall stop here and return the result &ldquo;010&rdquo;. If we did not stop, the result value would be &ldquo;110&rdquo;, which is wrong. How this is handled is by <strong>passing only half of the input list each time</strong>, and we also add one condition at the beginning:</p>

<pre><code>if (list.size() == 0)
    return 0;
</code></pre>

<p>By doing this, we always limit the input list to a smaller range, until we finish finding all bits.</p>

<h3>Code</h3>

<p><strong>hard to write</strong></p>

<pre><code>public static int findMissing(List&lt;BitInteger&gt; list) {
    return helper(list, BitInteger.INTEGER_SIZE - 1);
}

private static int helper(List&lt;BitInteger&gt; list, int col) {
    if (list.size() == 0)
        return 0;
    List&lt;BitInteger&gt; zeroList = new ArrayList&lt;BitInteger&gt;();
    List&lt;BitInteger&gt; oneList = new ArrayList&lt;BitInteger&gt;();
    for (BitInteger bit : list) {
        if (bit.fetch(col) == 0) {
            zeroList.add(bit);
        } else {
            oneList.add(bit);
        }
    }
    if (zeroList.size() &lt;= oneList.size()) {
        // this means the missing value contains a 0
        return helper(zeroList, col - 1) &lt;&lt; 1;
    } else {
        // the missing value contains 1
        return helper(oneList, col - 1) &lt;&lt; 1 | 1;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 6.2 Cover the Chess Board]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/cover-the-chess-board/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/cover-the-chess-board</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>There is an 8x8 chess board in which two diagonally opposite squares have been cut off. You are given 31 dominos, and a single domino can cover exactly two squares.</p>

<p>Can you use the 31 dominos to cover the entire board? Prove your answer (by providing an example, or showing why it’s impossible).</p></blockquote>

<h3>Solution</h3>

<p>The chess board initially has 32 black and 32 white squares. By removing opposite corners, we&rsquo;re left with 30 of one color and 32 of the other color.</p>

<p>31 dominos must cover 31 of one color and 31 of the other color.</p>

<p>So, impossible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 5.2 Convert Integer to Binary Form]]></title>
    <link href="http://okckd.github.io/blog/2014/09/07/convert-integer-to-binary/"/>
    <updated>2014-09-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/07/convert-integer-to-binary</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Given a (decimal &ndash; e.g. 3.72) number that is passed in as a string, print the binary representation.</p>

<p>If the number can not be represented accurately in binary, print “ERROR”</p></blockquote>

<h3>Solution</h3>

<p>Convert the integer part is easy.</p>

<p><strong>The difficulty is how to convert a floating point (the decimal part) to binary form</strong>. The idea suggested in the book is to keep x2, and subtract 1 when necessary. Eg.</p>

<blockquote><p>0.625 x 2 = 1.25, append 1</p>

<p>0.25 x 2 = 0.5, append 0</p>

<p>0.5 x 2 = 1, append 1</p>

<p>the binary form of 0.625 would be 0.101.</p></blockquote>

<p>We must declarify the max number of digits in the decimal part. In the book, <strong>the answer assumes a maximum digits of 32 bits</strong> (i.e. when binary length grows more than 32 bits, return &ldquo;Error&rdquo;).</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static String printBinary(String n) {
    String[] num = n.split("\\.");
    int integer = Integer.parseInt(num[0]);
    double decimal = Double.parseDouble("0." + num[1]);

    // now convert decimal part, if can't convert, return ERROR
    StringBuilder sb = new StringBuilder();
    while (decimal != 0) {
        if (sb.length() &gt; 32) {
            return "ERROR";
        }
        double newDoub = 2 * decimal;
        sb.append(newDoub &gt;= 1 ? "1" : "0");
        decimal = newDoub % 1;
    }

    // now convert integer part
    String intStr = "";
    while (integer != 0) {
        intStr = ((integer &amp; 1) == 1 ? "1" : "0") + intStr;
        integer = integer &gt;&gt; 1;
    }

    // return the 2 parts connected with a dot
    return intStr + "." + sb.toString();
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 3.6 Sort Stack]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/sort-stack/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/sort-stack</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write a program to sort a stack in ascending order. You should not make any assumptions about how the stack is implemented.</p>

<p>The following are the only functions that should be used to write this program: push | pop | peek | isEmpty.</p></blockquote>

<h3>Solution</h3>

<p>This is a very good question that tests stack operations.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static Stack&lt;Integer&gt; sort(Stack&lt;Integer&gt; s) {
    Stack&lt;Integer&gt; result = new Stack&lt;Integer&gt;();
    while (!s.isEmpty()) {
        Integer nextNum = s.pop();
        while (!result.isEmpty() &amp;&amp; result.peek() &lt; nextNum) {
            s.push(result.pop());
        }
        result.push(nextNum);
    }
    return result;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 4.8 Print Path Sum to Value]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/print-path-sum-to-value/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/print-path-sum-to-value</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>You are given a binary tree in which each node contains a value. Design an algorithm to print all paths which sum up to that value. Note that it can be any path in the tree &ndash; it does not have to start at the root.</p></blockquote>

<h3>Solution</h3>

<p><strong>Keep a list of items as buffer</strong>, and check the following condition:</p>

<blockquote><p>“does this node complete a path with the sum?”</p></blockquote>

<p>There&rsquo;re n nodes in total, and the max size of buffer is lg(n), so the time complexity is O(nlgn).</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static void find(TreeNode head, int target) {
    findSum(head, target, new ArrayList&lt;Integer&gt;());
}

private static void findSum(TreeNode node, int target, List&lt;Integer&gt; buffer) {
    if (node == null)
        return;

    buffer.add(node.data);
    int sum = 0;
    for (int i = buffer.size() - 1; i &gt;= 0; i--) {
        sum += buffer.get(i);
        if (sum == target) {
            // from (i)th element until the last element is a valid path
            printPath(buffer, i);
        }
    }

    List&lt;Integer&gt; clone1 = new ArrayList&lt;Integer&gt;(buffer);
    findSum(node.left, target, clone1);

    List&lt;Integer&gt; clone2 = new ArrayList&lt;Integer&gt;(buffer);
    findSum(node.right, target, clone2);
}

private static void printPath(List&lt;Integer&gt; buffer, int start) {
    System.out.print("Path: ");
    for (int i = start; i &lt; buffer.size(); i++) {
        System.out.print(buffer.get(i) + " ");
    }
    System.out.println();
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 3.4 Towers of Hanoi]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/hanoi-tower/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/hanoi-tower</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>In the classic problem of the Towers of Hanoi, you have 3 rods and N disks of di!erent sizes which can slide onto any tower. The puzzle starts with disks sorted in ascending order of size from top to bottom (e.g., each disk sits on top of an even larger one). You have the following constraints:</p></blockquote>

<ol>
<li>Only one disk can be moved at a time.</li>
<li>A disk is slid o! the top of one rod onto the next rod.</li>
<li>A disk can only be placed on top of a larger disk.</li>
</ol>


<blockquote><p>Write a program to move the disks from the &ldquo;rst rod to the last using Stacks.</p></blockquote>

<h3>Solution</h3>

<p>This is a <strong>classic recursive question</strong>. The solution code is supposed to be very concise.</p>

<h3>Code</h3>

<p><strong>written by me</strong>, slightly different from the answer in the book, but good.</p>

<p>Main class:</p>

<pre><code>public class HanoiMyAnswer {

    private static Rod r0, r1, r2;
    private static final int NUM_DISKS = 5;

    public static void main(String[] args) {
        // Hanoi Tower always have 3 rods
        r0 = new Rod(0);
        r1 = new Rod(1);
        r2 = new Rod(2);

        // Put some disks on the 1st rod, leaving 2nd and 3rd rod empty
        r0.setDisks(NUM_DISKS);

        // start main algorithm
        System.out.println("My answer: ");
        moveDisks(NUM_DISKS, r0, r2, r1);
    }

    private static void moveDisks(int number, Rod from, Rod to, Rod buffer) {
        if (number == 1) {
            int topValue = from.disks.pop();
            to.disks.push(topValue);
            displayMessage(topValue, from.name, to.name);
        } else {
            moveDisks(number - 1, from, buffer, to);
            int bottomValue = from.disks.pop();
            to.disks.push(bottomValue);
            displayMessage(bottomValue, from.name, to.name);
            moveDisks(number - 1, buffer, to, from);
        }
    }

    private static void displayMessage(int disk, int from, int to) {
        System.out.println("Disk[" + disk + "]: Rod" + from + "--&gt;" + to);
    }
}
</code></pre>

<p>Rod.java</p>

<pre><code>class Rod {

    int name;
    Stack&lt;Integer&gt; disks = new Stack&lt;Integer&gt;();

    public Rod(int rodIndex) {
        this.name = rodIndex;
    }

    public void setDisks(int n) {
        // this method will insert n disks on this Rod
        // the bottom disk is indexed as (n-1) and top one is 0
        disks.clear();
        for (int i = n - 1; i &gt;= 0; i--) {
            disks.push(i);
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 4.5 Find Next Node in BST]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/find-next-node-bst/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/find-next-node-bst</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>Write an algorithm to find the ‘next’ node (i.e., in-order successor) of a given node in a binary search tree where each node has a link to its parent.</p></blockquote>

<h3>Solution</h3>

<ol>
<li><p><strong>If current node have a right child</strong>, return the leftmost leaf of right child.</p></li>
<li><p><strong>If current node have no right child</strong>:</p>

<ol>
<li><p>If current is parent&rsquo;s left child, then return parent node.</p></li>
<li><p>If current is parent&rsquo;s right child, look all the way up until find a right-turning parent.</p></li>
<li><p>If all parent is not right-turning. Return null.</p></li>
</ol>
</li>
</ol>


<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static TreeNode inorderSucc(TreeNode e) {
    if (e == null)
        return null;
    if (e.right != null) {
        TreeNode p = e.right;
        while (p.left != null) {
            p = p.left;
        }
        return p;
    } else {
        TreeNode p = e.parent;
        while (p != null &amp;&amp; p.right == e) {
            e = p;
            p = e.parent;
        }
        return p;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 4.7 Check Subtree]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/check-subtree/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/check-subtree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>You have two very large binary trees: T1, with millions of nodes, and T2, with hundreds of nodes. Create an algorithm to decide if T2 is a subtree of T1.</p></blockquote>

<h3>Solution</h3>

<p><strong>The best solution is to print inorder and preorder traversal</strong> of both trees. Find whether the 2 traversal string of T2 <strong>is substring of the traversal of T1</strong>.</p>

<p>This is a very good idea of checking subtree of a Binary Tree. However, this solution is very <strong>memory intensive</strong>.</p>

<p><strong>The alternative solution</strong> simply checks the tree similarity for each and every node.</p>

<p>Time complexity:</p>

<p>If k is the number of occurrences of T2’s root in T1, the worst case runtime can be characterized as O(n + k * m). So it&rsquo;s slower.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public static boolean containsTree(TreeNode t1, TreeNode t2) {
    if (t1 == null) {
        return false;
    } else if (matchTree(t1, t2)) {
        return true;
    } else {
        return containsTree(t1.left, t2) || containsTree(t1.right, t2);
    }
}

private static boolean matchTree(TreeNode t1, TreeNode t2) {
    if (t2 == null) {
        return true;
    } else if (t1 == null) {
        return false;
    } else if (t1.data != t2.data) {
        return false;
    } else {
        return matchTree(t1.left, t2.left) &amp;&amp; matchTree(t1.right, t2.right);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Form a Palindrome With Insertion]]></title>
    <link href="http://okckd.github.io/blog/2014/09/06/Form-palindrome-with-insertion/"/>
    <updated>2014-09-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/06/Form-palindrome-with-insertion</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.glassdoor.com/Interview/Given-a-string-convert-it-into-a-palindrome-with-the-lease-number-of-insertions-possible-QTN_729122.htm">link</a></p>

<blockquote><p>Given a string, convert it into a palindrome with the lease number of insertions possible.</p></blockquote>

<h3>Solution</h3>

<p>This is a DP question. There&rsquo;re 2 approaches.</p>

<p><strong>First, is direct DP</strong>. This is the nicest solution, not intuitive at first, but actually good.</p>

<blockquote><p>P[i, j] = P[i+1, j-1], if S[i] = S[j]</p>

<p>P[i, j] = 1 + min(P[i,j-1], P[i+1,j]), otherwise</p></blockquote>

<p>contributed by <a href="http://stackoverflow.com/a/10732879">this guy</a>.</p>

<p><strong>Second approach is to calculate the longest palindrome subsequence</strong>, and the answer would be string length minus this value.</p>

<p>I wrote code for both apporaches.</p>

<p>According to <a href="http://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/">G4G</a>, we can actually calculate the <strong>Longest Common Subsequence of the string and its reverse</strong>, and this value shall be same as the longest palindrome subsequence that we got in second approach. It&rsquo;s nice to know this idea.</p>

<h3>Code</h3>

<p><strong>direct</strong></p>

<pre><code>public int solve1(String str) {
    // direct dp
    if (str == null)
        return 0;
    int len = str.length();
    int[][] dp = new int[len][len];
    for (int i = len - 1; i &gt;= 0; i--) {
        for (int j = i; j &lt; len; j++) {
            if (i == j) {
                dp[i][j] = 0;
            } else if (i + 1 == j) {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? 0 : 1;
            } else {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? dp[i + 1][j - 1]
                        : 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);
            }
        }
    }
    return dp[0][len - 1];
}
</code></pre>

<p><strong>longest palindrome subsequence</strong></p>

<pre><code>public int solve2(String str) {
    // longest palindrome subsequence
    if (str == null)
        return 0;
    int len = str.length();
    int[][] dp = new int[len][len];
    for (int i = len - 1; i &gt;= 0; i--) {
        for (int j = i; j &lt; len; j++) {
            if (i == j) {
                dp[i][j] = 1;
            } else if (i + 1 == j) {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? 2 : 1;
            } else {
                dp[i][j] = str.charAt(i) == str.charAt(j) ? 2 + dp[i + 1][j - 1]
                        : Math.max(dp[i + 1][j], dp[i][j - 1]);
            }
        }
    }
    return len - dp[0][len - 1];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Unsolved Mystery of UTF8 Encoding]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/unsolved-mystery-of-utf8/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/unsolved-mystery-of-utf8</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://algorithmguru.com/blog/?p=148">link</a></p>

<blockquote><p>UTF-8 is a variable-length encoding of letters or runes. If the most significant bit of the first byte is 0, the letter is 1 byte long. Otherwise, its length is the number of leading 1’s in the first byte. If a letter is more than one byte long, all subsequent runes start with 10. Here’s a chart:</p>

<p>UTF-8 encoding scheme is described below:</p></blockquote>

<pre><code>0XXXXXXX = this is the entire rune
10XXXXXX = this is a continuation of the rune from the previous byte
110XXXXX = this is the start of a 2-byte rune.
1110XXXX = this is the start of a 3-byte rune.
11110XXX = this is the start of a 4-byte rune.
111110XX = this is the start of a 5-byte rune.
1111110X = this is the start of a 6-byte rune.
11111110 = this is the start of a 7-byte rune.
11111111 = this is the start of a 8-byte rune.
</code></pre>

<blockquote><p>For example, a 3-byte rune would be 1110XXXX 10XXXXXX 10XXXXXX.</p>

<p>Write a function that decides whether a given byte array (or string) is valid UTF-8 encoded text.</p></blockquote>

<h3>Solution</h3>

<p>This is an easy question, just put here for reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Print Numbers Containing 5]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/print-numbers-containing-5/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/print-numbers-containing-5</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32651839.html">link</a></p>

<blockquote><p>写一个function，对于参数n，输出从0到n之间所有含5的数字。eg. func(30) 应该输出5，15，25</p>

<p>this is Groupon interview question</p></blockquote>

<h3>Solution</h3>

<p>Suggested by level 10 of <a href="http://www.mitbbs.com/article_t/JobHunting/32651839.html">this forum</a>. It&rsquo;s (surprisingly) a DFS question.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public void mySolution(int num) {
    if (num &gt;= 5) {
        String str = String.valueOf(num);
        helper(num, "", 0, str.length(), false);
    }
}

private void helper(int max, String prefix, int pos, int len, boolean have5) {
    if (pos == len) {
        int cur = Integer.parseInt(prefix);
        if (cur &lt;= max) {
            System.out.print(cur + ", ");
        }
        return;
    }
    for (int i = 0; i &lt; 10; i++) {
        if (pos == len - 1 &amp;&amp; !have5 &amp;&amp; i != 5) {
            continue;
        }
        helper(max, prefix + i, pos + 1, len, have5 || i == 5);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Find Second Shortest Path]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/Find-second-shortest-path/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/Find-second-shortest-path</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=16922663">link</a></p>

<blockquote><p>You are given a graph and an algorithm that can find the shortest path b/w any two nodes.</p>

<p>Now you have to find the second shortest path between same two nodes.</p></blockquote>

<h3>Solution</h3>

<p>From the top answer:</p>

<blockquote><p><strong>Find the shortest path</strong> between any two nodes. Let them be A and B.</p>

<p>Now to get second shortest path between the same nodes, <strong>remove any one edge that is involved in the shortest path</strong> between the same nodes and calculate the shortest path.</p>

<p>Do the above process for each of the node involved in shortest path and keep track of the minimum second shortest path found.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Code a HashMap]]></title>
    <link href="http://okckd.github.io/blog/2014/09/04/Code-a-hashmap/"/>
    <updated>2014-09-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/04/Code-a-hashmap</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.glassdoor.com/Interview/Code-a-hashmap-which-you-would-be-happy-to-place-into-a-production-environment-QTN_725885.htm">link</a></p>

<blockquote><p>Code a hashmap which you would be happy to place into a production environment.</p></blockquote>

<h3>Solution</h3>

<p>We already write 2 post before:</p>

<ol>
<li><p><strong>[Question] Implement a HashMap</strong></p></li>
<li><p><strong>[CC150v5] 8.10 Implement a Hashmap</strong></p></li>
</ol>


<p>But still, this is not an easy question when asked at an interview. It won&rsquo;t harm to do a little recap:</p>

<ol>
<li>The basic structure is an array. It can be:

<ol>
<li>An array of linked nodes (with a next pointer).</li>
<li>An array of linked list.</li>
</ol>
</li>
<li>There should be a hash function.</li>
<li>There should be a function to convert the hash value to corresponding array index.</li>
<li>Remember there&rsquo;s <strong>a concept of Load factor</strong>. It means to what percentage the hashmap is filled.</li>
<li>h &amp; (length – 1) means h % length, which maps a hashcode to an array index.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Weird Sort Array]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/weird-sort-array/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/weird-sort-array</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t0/JobHunting/32772813.html">link</a></p>

<blockquote><p>数组排序， 排成 a1<a2>a3<a4>a5。。。这种形式。</p></blockquote>

<h3>Solution</h3>

<p><strong>The are 2 solutions</strong>. The easy one is this:</p>

<blockquote><p>sort first, then 把临近的奇数换到偶数(index)上, O(nlog n).</p></blockquote>

<p><strong>There&rsquo;s a great O(n) solution however</strong>, not easy to think:</p>

<blockquote><p>两两比较相邻数字，把大的数字放到下标为奇数的位置。 O(n).</p></blockquote>

<h3>Code</h3>

<p><strong>O(nlgn) solution</strong></p>

<pre><code>public void solutionOnlgn(int[] A) {
    // this is a O(nlgn) solution
    Arrays.sort(A);
    for (int i = 2; i &lt; A.length; i += 2) {
        swap(A, i - 1, i);
    }
}

private void swap(int[] A, int a, int b) {
    A[a] ^= A[b];
    A[b] ^= A[a];
    A[a] ^= A[b];
}
</code></pre>

<p><strong>O(n) solution</strong></p>

<pre><code>public void solutionOn(int[] A) {
    // this is a O(n) solution
    for (int i = 1; i &lt; A.length; i++) {
        // compare (i)th with (i-1)th, and put the large value
        // at odd-indexed positions
        if ((A[i - 1] &lt; A[i] &amp;&amp; i % 2 == 0)
                || (A[i - 1] &gt; A[i] &amp;&amp; i % 2 == 1)) {
            swap(A, i - 1, i);
        }
    }
}

private void swap(int[] A, int a, int b) {
    A[a] ^= A[b];
    A[b] ^= A[a];
    A[a] ^= A[b];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] String Replacement Question]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/String-replacement-question/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/String-replacement-question</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.mitbbs.com/article_t/JobHunting/32766461.html">link</a></p>

<blockquote><p>String replace, 给一个原string，一个target，一个替换的新str，把所有出现
target str的地方都换成新的str， 长度可以任意.</p></blockquote>

<h3>Solution</h3>

<p>If the question asks for an in-place algo, then we can refer to <strong>Question 1.5 in CC150v4</strong>.</p>

<h3>Question</h3>

<blockquote><p>1.5 Write a method to replace all spaces in a string with ‘%20’.</p></blockquote>

<h3>Solution</h3>

<ol>
<li><strong>pre-processing</strong>, count the number of spaces in string</li>
<li>parse the string from end to beginning.</li>
</ol>


<p>Need 2 pass.</p>

<h3>Code</h3>

<p><strong>not written by me</strong></p>

<pre><code>public static void ReplaceFun(char[] str, int length) {
    int spaceCount = 0, newLength, i = 0;
    for (i = 0; i &lt; length; i++) {
        if (str[i] == ' ') {
            spaceCount++;
        }
    }
    newLength = length + spaceCount * 2;
    str[newLength] = '\0';
    for (i = length - 1; i &gt;= 0; i--) {
        if (str[i] == ' ') {
            str[newLength - 1] = '0';
            str[newLength - 2] = '2';
            str[newLength - 3] = '%';
            newLength = newLength - 3;
        } else {
            str[newLength - 1] = str[i];
            newLength = newLength - 1;
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Leader Election]]></title>
    <link href="http://okckd.github.io/blog/2014/09/03/Leader-election/"/>
    <updated>2014-09-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/03/Leader-election</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p>(this question is from MIT handouts B)</p>

<blockquote><p>Describe a technique to identify a &ldquo;leader&rdquo; among a group of 10 identical servers that are all connected to every other server.</p>

<p>There are no prior distinguishing characteristics of any of them and the same program to identify the leader starts running on all of them at the same time. After an answer is given, ask how much network traffic it requires and, if &ldquo;ties&rdquo; are possible, ask how you can break ties.</p></blockquote>

<h3>Leader Election</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Leader_election">Leader Election</a></strong> is the process of designating a single process as the organizer of some task distributed among several computers. After running this algorithm, each node throughout the network recognizes a unique node as the task leader.</p>

<p>The good answer would be:</p>

<p>Have each server wait a random amount of time and then say &ldquo;I&rsquo;m it.&rdquo; The &ldquo;I&rsquo;m it&rdquo; <strong>announcement is time‐stamped</strong>, and the computer that <strong>time‐stamped its announcement first</strong> is elected the leader.</p>

<p>This approach requires sending out 9 messages. <strong>If there is a tie</strong>, the computers can repeat the procedure.</p>
]]></content>
  </entry>
  
</feed>
