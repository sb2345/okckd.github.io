<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://okckd.github.io/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-13T15:25:58+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design]]]></title>
    <link href="http://okckd.github.io/blog/2014/08/12/From-ClientServer-to-Multi-Tier/"/>
    <updated>2014-08-12T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/12/From-ClientServer-to-Multi-Tier</id>
    <content type="html"><![CDATA[<p><a href="http://wiki.remobjects.com/wiki/From_Client/Server_to_Multi-Tier">http://wiki.remobjects.com/wiki/From_Client/Server_to_Multi-Tier</a></p>

<p>From Client/Server to Multi-Tier</p>

<p>Client/Server</p>

<p>Have direct and full access to the physical database based on their login string. This is the major weakness of the Client/Server paradigm. The system is vulnerable to attacks.</p>

<p>Because all business logic was implemented on the client application, changes to business logic means redeploying new client software to all users again.</p>

<p>Another drawback is that the network interface provided by most back-end database systems has been designed for access over the local network, using fast connections and no firewalls. Nowadays, many clients’ software needs to run from employee&rsquo;s home offices or from airport lounges. In many cases such connections will be unreliable or inefficient to work on.</p>

<p>Multi-Tier</p>

<p>The communication between clients and middle-tier server is no longer tied to a protocol dictated by the database (no database drivers or connection string on the client). Client applications can authenticate with a username and password.</p>

<p>Communication can be done via HTTP or HTTPS, alternatively or additionally, open standards such as SOAP, OData and JSON can be used to expose a middle tier to different clients using protocols that are widely understood</p>

<p>Biggest advantage is that <strong>all the business logic is transferred from client application into the middle tier</strong>. And the middle tier holds the final control over what data goes in or out.</p>

<p>Still, there&rsquo;re still some business logic on the client tier as well. But it only complement the rules that are enforced on the server. Eg. Twitter enforce the 140 character limit locally, and stop you from sending a tweet that is too long (by graying out the Send button).</p>

<p>As a rule of thumb, client side checks are for convenience, and for convenience only; the middle tier server is and must be authoritative for what is allowed and what is not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150] 9.7 Sort Large Files]]></title>
    <link href="http://okckd.github.io/blog/2014/08/12/9-7-circus-man-ordering/"/>
    <updated>2014-08-12T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/12/9-7-circus-man-ordering</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<blockquote><p>A circus is designing a tower routine consisting of people standing atop one another’s shoulders. For practical and aesthetic reasons, each person must be both shorter and lighter than the person below him or her. Given the heights and weights of each person in the circus, write a method to compute the largest possible number of people in such a tower.</p>

<p>EXAMPLE:</p>

<p>Input: (ht, wt): (65, 100) (70, 150) (56, 90) (75, 190) (60, 95) (68, 110)</p>

<p>Output: The longest tower is length 6 and includes from top to bottom: (56, 90) (60,95) (65,100) (68,110) (70,150) (75,190)</p></blockquote>

<h3>Solution</h3>

<p>The solution given in the book is unclear, but it&rsquo;s a very simple idea which is pointed out <a href="http://www.careercup.com/question?id=9339758">here</a> and <a href="http://hawstein.com/posts/9.7.html">here</a>.</p>

<ol>
<li>sort the input persons by &lsquo;height&rsquo;. O(nlogn)</li>
<li>find the longest increasing &lsquo;weight&rsquo; sequence in the sorted list. This can be done in O(nlogn) with DP.</li>
</ol>


<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public int longestTower(List&lt;Man&gt; list) {
    Collections.sort(list, new ManComparator());
    // now find the longest increasing sequence of 'weight' property
    int len = list.size();
    int maxLen = 1;
    int[] dp = new int[len];
    for (int i = 1; i &lt; len; i++) {
        dp[i] = 1;
        for (int j = 0; j &lt; i; j++) {
            if (list.get(i).weight &gt; list.get(j).weight) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
        maxLen = Math.max(maxLen, dp[i]);
    }
    return maxLen;
}

class ManComparator implements Comparator&lt;Man&gt; {
    @Override
    public int compare(Man o1, Man o2) {
        return o1.height - o2.height;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Maximum Circular Subarray Sum]]></title>
    <link href="http://okckd.github.io/blog/2014/08/11/max-circular-subarray/"/>
    <updated>2014-08-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/11/max-circular-subarray</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#9">link</a></p>

<blockquote><p>Given n numbers (both +ve and -ve), arranged in a circle, fnd the maximum sum of consecutive number</p></blockquote>

<h3>Solution</h3>

<p>First pass: find max subarray sum.</p>

<p>Second pass: find min subarray sum, and subtract it from total sum.</p>

<p>Suggested on <a href="http://www.geeksforgeeks.org/maximum-contiguous-circular-sum/">G4G</a></p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public int maxConsSum2(int[] arr) {
    if (arr == null || arr.length == 0) {
        return 0;
    }
    int soFar = 0;
    int max = 0;
    int totalSum = 0;
    for (Integer i: arr) {
        totalSum += i;
        // totalSum is used in next step
        soFar += i;
        soFar = Math.max(soFar, 0);
        max = Math.max(max, soFar);
    }
    int min = 0;
    // calculate the min subarray
    for (Integer i: arr) {
        soFar += i;
        soFar = Math.min(soFar, 0);
        min = Math.min(min, soFar);
    }
    return Math.max(max, totalSum - min);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] TCP 3-Way Handshake]]></title>
    <link href="http://okckd.github.io/blog/2014/08/11/Tcp-3way-handshake/"/>
    <updated>2014-08-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/11/Tcp-3way-handshake</id>
    <content type="html"><![CDATA[<h3>Handshaking</h3>

<p><strong><a href="http://en.wikipedia.org/wiki/Handshaking">Handshaking</a> is an automated process of negotiation</strong> that dynamically sets parameters of a communications channel established between two entities before normal communication over the channel begins.</p>

<p>It is usually a process that takes place when a computer is about to communicate with a foreign device to establish rules for communication.</p>

<h3>TCP three-way handshake</h3>

<p><strong><a href="http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml">TCP three-way handshake</a></strong> is the method used by TCP set up a TCP/IP connection over an Internet Protocol based network.</p>

<p>It&rsquo;s commonly referred to as &ldquo;<strong>SYN-SYN-ACK</strong>&rdquo;.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/3way-Tcp-handshake.png"></p>

<h3>Process</h3>

<ol>
<li>Host A sends a TCP <strong>SYN</strong>chronize packet to Host B</li>
<li>Host B receives A&rsquo;s SYN</li>
<li>Host B sends a <strong>SYN</strong>chronize-<strong>ACK</strong>nowledgement</li>
<li>Host A receives B&rsquo;s SYN-ACK</li>
<li>Host A sends <strong>ACK</strong>nowledge</li>
<li>Host B receives ACK.</li>
<li>TCP socket connection is ESTABLISHED.</li>
</ol>


<p>Alternatively, there&rsquo;s a good illustration on <a href="http://en.wikipedia.org/wiki/Handshaking">wiki</a>:</p>

<blockquote><p>Establishing a normal TCP connection requires three separate steps:</p>

<ol>
<li><p>The first host (Alice) sends the second host (Bob) a &ldquo;synchronize&rdquo; (SYN) message with its own sequence number x, which Bob receives.</p></li>
<li><p>Bob replies with a synchronize-acknowledgment (SYN-ACK) message with its own sequence number y and acknowledgement number x + 1, which Alice receives.</p></li>
<li><p>Alice replies with an acknowledgment message with acknowledgement number y + 1, which Bob receives and to which he doesn&rsquo;t need to reply.</p></li>
</ol>
</blockquote>

<h3>Two more thing</h3>

<p>Note that <strong>FTP, Telnet, HTTP, HTTPS, SMTP, POP3, IMAP, SSH</strong> and any other protocol that rides over TCP <strong>also has a three way handshake</strong> performed as connection is opened.</p>

<p>TCP &lsquo;rides&rsquo; on top of Internet Protocol (IP) in the protocol stack. IP handles <strong>IP addressing and routing</strong> and gets the packets from one place to another, but TCP manages the <strong>actual communication sockets</strong> between endpoints.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Count Complete Binary Tree]]></title>
    <link href="http://okckd.github.io/blog/2014/08/11/Count-complete-binary-tree/"/>
    <updated>2014-08-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/11/Count-complete-binary-tree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.itint5.com/oj/#4">link</a></p>

<blockquote><p>给定一棵<a href="http://baike.baidu.com/view/427107.htm">完全二叉树</a>（complete binary tree）的根结点，统计该树的结点总数。</p>

<p>提示：使用O(n)的递归算法统计二叉树的结点数是一种显而易见的方法，此题中请利用完全二叉树的性质，想出效率更高的算法。</p></blockquote>

<h3>Solution</h3>

<p>Similar to binary search, O(lgn) complexity.</p>

<p>The idea is, sum up 1 branch of nodes at a time. Do it recursively. The following code is refactored and written by me.</p>

<h3>Code</h3>

<p><strong>read it from <a href="http://www.itint5.com/discuss/125/%E5%A4%A7%E7%89%9B%E8%AF%B7%E6%8C%87%E7%82%B9%EF%BC%8C%E6%95%B0%E6%8D%AE37%E8%BF%90%E8%A1%8C%E8%B6%85%E6%97%B6%EF%BC%88%E9%99%84%E4%BB%A3%E7%A0%81%EF%BC%89">here</a></strong></p>

<pre><code>//使用TreeNodeUtil.getLeftChildNode(TreeNode)获得左儿子结点
//使用TreeNodeUtil.getRightChildNode(TreeNode)获得右儿子结点
//使用TreeNodeUtil.isNullNode(TreeNode)判断结点是否为空
public class CountCompleteBinayTreeNodes {
    public int countNodes(TreeNode root) {
        if (TreeNodeUtil.isNullNode(root)) {
            return 0;
        }
        int hl = height(TreeNodeUtil.getLeftChildNode(root));
        int hr = height(TreeNodeUtil.getRightChildNode(root));
        if (hl == hr) {
            return (int) Math.pow(2, hl) + countNodes(TreeNodeUtil.getRightChildNode(root));
        } else {
            return (int) Math.pow(2, hr) + countNodes(TreeNodeUtil.getLeftChildNode(root));
        }
    }

    private int height(TreeNode root) {
        int count = 0;
        while (!TreeNodeUtil.isNullNode(root)) {
            root = TreeNodeUtil.getLeftChildNode(root);
            count++;
        }
        return count;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Big Data - Top K Questions (Summarize)]]></title>
    <link href="http://okckd.github.io/blog/2014/08/10/big-data-top-k-questions-summarize/"/>
    <updated>2014-08-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/10/big-data-top-k-questions-summarize</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://dongxicheng.org/big-data/select-ten-from-billions/">link</a></p>

<blockquote><p>在海量数据中找出出现频率最高的前K个数，或者从海量数据中找出最大的前K个数，这类问题通常称为“top K”问题，</p>

<ol>
<li>top K value</li>
<li>top K frequency</li>
</ol>
</blockquote>

<h3>Analysis</h3>

<p><strong>Standard solution</strong> is 【分治+trie树/hash+小顶堆】, which I covered in another post <a href="http://okckd.github.io/blog/2014/07/25/big-data-Top-k-frequency/">Big Data &ndash; Top k Frequency</a>. Briefly it is 3 steps:</p>

<ol>
<li>先将数据集按照hash方法分解成多个小数据集，</li>
<li>使用trie树或者hash统计每个小数据集中的query词频，</li>
<li>用小顶堆求出每个数据集中出频率最高的前K个数</li>
</ol>


<p>But, there&rsquo;re other senarios where different solutions may apply. Consider:</p>

<ol>
<li><p>Single core vs. multiple core</p></li>
<li><p>Single PC vs. multiple PC</p></li>
<li><p>Large RAM vs. limited RAM</p></li>
<li><p>Distributed system</p></li>
</ol>


<h3>1. 单机+单核+足够大内存</h3>

<p>设每个查询词平均占8Byte，则10亿个查询词所需的内存大约是10<sup>9</sup>*8=8G内存。如果你有这么大的内存，直接在内存中对查询词进行排序，顺序遍历找出10个出现频率最大的10个即可。这种方法简单快速，更加实用。当然，也可以先用HashMap求出每个词出现的频率，然后求出出现频率最大的10个词。</p>

<h3>2. 单机+单核+受限内存</h3>

<p>这种情况下，需要将原数据文件切割成一个一个小文件，如，采用hash(x)%M，将原文件中的数据切割成M小文件，如果小文件仍大于内存大小，继续采用hash的方法对数据文件进行切割，直到每个小文件小于内存大小，这样，每个文件可放到内存中处理。采用3.1节的方法依次处理每个小文件。</p>

<h3>3. 单机+多核+足够大内存</h3>

<p>这时可以直接在内存中实用hash方法将数据划分成n个partition，每个partition交给一个线程处理，线程的处理逻辑是同[1]节类似，最后一个线程将结果归并。</p>

<p>该方法存在一个瓶颈会明显影响效率，即数据倾斜，每个线程的处理速度可能不同，快的线程需要等待慢的线程，最终的处理速度取决于慢的线程。解决方法是，<strong>将数据划分成 (c x n)个partition（c>1），每个线程处理完当前partition后主动取下一个partition继续处理</strong>，直到所有数据处理完毕，最后由一个线程进行归并。</p>

<h3>4. 多机+受限内存</h3>

<p>这种情况下，为了合理利用多台机器的资源，可将数据分发到多台机器上，每台机器采用[3]节中的策略解决本地的数据。可采用<strong>hash + socket</strong>方法进行数据分发。</p>

<h3>5. Distributed</h3>

<p>Top k问题很适合采用<strong>MapReduce框架</strong>解决，用户只需编写一个map函数和两个reduce 函数，然后提交到Hadoop（采用mapchain和reducechain）上即可解决该问题。</p>

<p>A map function. 对于map函数，采用hash算法，将hash值相同的数据交给同一个reduce task.</p>

<p>2 reduce functions. 对于<strong>第一个reduce函数</strong>，采用HashMap统计出每个词出现的频率，对于<strong>第二个reduce函数</strong>，统计所有reduce task输出数据中的top k即可。</p>

<h3>6. Other</h3>

<p>公司一般不会自己写个程序进行计算，而是提交到自己核心的数据处理平台上计算，该平台的计算效率可能不如直接写程序高，但它具有<strong>良好的扩展性和容错性</strong>，而这才是企业最看重的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Big Data - Top K Frequency 2]]></title>
    <link href="http://okckd.github.io/blog/2014/08/10/big-data-top-k-frequency-2/"/>
    <updated>2014-08-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/10/big-data-top-k-frequency-2</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/v_july_v/article/details/7382693">link</a></p>

<blockquote><p>一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析。</p></blockquote>

<h3>Analysis</h3>

<p><strong>The basic solution for &lsquo;Top K&rsquo; questions</strong> is 【分治+trie树/hash+小顶堆】.</p>

<p>In the previous post <a href="http://okckd.github.io/blog/2014/07/25/big-data-Top-k-frequency/">Big Data &ndash; Top k Frequency</a>, we used HashMap for calculating query frequency. Now we <strong>use Trie to do it</strong>.</p>

<blockquote><p>这题是考虑时间效率。用trie树统计每个词出现的次数，时间复杂度是O(n x le)（le表示单词的平准长度）。然后是找出出现最频繁的前10个词，可以用堆来实现，前面的题中已经讲到了，时间复杂度是O(n x lg10)。所以总的时间复杂度，是O(n x le)与O(n x lg10)中较大的哪一个。</p></blockquote>

<h4>How to use Trie to calculate word frequency?</h4>

<p>在Trie的node节点中<a href="http://blog.csdn.net/ohmygirl/article/details/7953814">添加count域后</a>，可以统计单词出现的次数。统计的方法就是在插入单词的时候，令相应的count域加1（初始化为0）.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Big Data - Fuzzy Search Url]]></title>
    <link href="http://okckd.github.io/blog/2014/08/10/big-data-fuzzy-search-url/"/>
    <updated>2014-08-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/10/big-data-fuzzy-search-url</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/v_july_v/article/details/7382693">link</a></p>

<blockquote><p>给你A,B两个文件，各存放50亿条URL，每条URL占用64字节，内存限制是4G，让你找出A,B文件共同的URL。如果是三个乃至n个文件呢？</p></blockquote>

<h3>Bloom Filter</h3>

<p>自从Burton Bloom在70年代提出<a href="http://blog.csdn.net/v_july_v/article/details/6685894">Bloom Filter</a>之后，Bloom Filter就被广泛用于<strong>拼写检查和数据库系统中</strong>。</p>

<h4>基本原理及要点</h4>

<p>An empty Bloom filter is <strong>a bit array of m bits</strong>, all set to 0. There must also be <strong>k different hash functions</strong> defined, each of which maps or hashes some set element to one of the m array positions with a uniform random distribution.</p>

<p>很明显这个过程并不保证查找的结果是100%正确的。同时也不支持删除一个已经插入的关键字，因为该关键字对应的位会牵动到其他的关键字。</p>

<p>所以一个简单的改进就是 counting Bloom filter，用一个counter数组代替位数组，就可以支持删除了。</p>

<h3>Error rate</h3>

<pre><code>m: length of BF array (in bits)
n: number of input elements
k: number of hash functions
</code></pre>

<p>A Bloom filter <a href="http://en.wikipedia.org/wiki/Bloom_filter#Space_and_time_advantages">with 1% error</a> and an optimal value of k, in contrast, requires only about 9.6 bits per element (means m = 9.6 x n).</p>

<h4>Usage</h4>

<p>Bloom Filter可以用来实现数据字典，进行数据的判重，或者集合求交集.</p>

<h3>Solution</h3>

<p>Of course we can always use <strong>【分治+trie树/hash+小顶堆】</strong> standard solution, but for <strong>Fuzzy search, BF is the best</strong>.</p>

<p>4G = 2<sup>32</sup> 大概是40亿 x 8大概是340亿bit，n = 50亿，如果按出错率0.01算需要的大概是480亿个bit。现在可用的是340亿，相差并不多，这样可能会使出错率上升些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Big Data - Find Median Numbers]]></title>
    <link href="http://okckd.github.io/blog/2014/08/10/big-data-find-median/"/>
    <updated>2014-08-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/10/big-data-find-median</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/v_july_v/article/details/7382693">link</a></p>

<blockquote><p>5亿个int找它们的中位数.</p></blockquote>

<h3>Analysis</h3>

<p>Categorized under <strong>双层桶划分</strong>.</p>

<p>Idea: 首先我们将int划分为2<sup>16</sup>个区域，然后读取数据统计落到各个区域里的数的个数，之后我们根据统计结果就可以判断中位数落到那个区域，同时知道这个区域中的第几大数刚好是中位数。然后第二次扫描我们只统计落在这个区域中的那些数就可以了。</p>

<h3>Details</h3>

<p>开一个大小为65536的Int数组，第一遍读取，统计Int32的高16位的情况(就相当于用该数除以65536)。每读取一个数，数组中对应的计数+1。第一遍统计之后，遍历数组，逐个累加统计，看中位数处于哪个区间。</p>

<p>第二遍统计同上面的方法类似，但这次只统计处于区间k的情况，这次计数之后，再统计一下，看中位数所处的区间，最后将高位和低位组合一下就是结果了。</p>

<p>And this can be done more than 2 times, depending on the input size (eg. if input is int64, then do 24/20/20 bits).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Big Data - Find Existence of a Number]]></title>
    <link href="http://okckd.github.io/blog/2014/08/10/big-data-find-existence-of-number/"/>
    <updated>2014-08-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/10/big-data-find-existence-of-number</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/v_july_v/article/details/7382693">link</a></p>

<blockquote><p>给40亿个不重复的unsigned int的整数，没排过序的，然后再给一个数，如何快速判断这个数是否在那40亿个数当中？</p></blockquote>

<h3>Analysis</h3>

<p>Categorized under <strong>BitMap</strong>.</p>

<p>There&rsquo;re 4.3 billion unsigned integers in Java. This is a perfect question to use BitMap.</p>

<p>申请512M的内存，一个bit位代表一个unsigned int值。读入40亿个数，设置相应的bit位，读入要查询的数，查看相应bit位是否为1，为1表示存在，为0表示不存在。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Big Data - Remove Duplicate Numbers]]></title>
    <link href="http://okckd.github.io/blog/2014/08/10/big-data-Remove-Duplicate-Numbers/"/>
    <updated>2014-08-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/10/big-data-Remove-Duplicate-Numbers</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://blog.csdn.net/v_JULY_v/article/details/6279498">link</a></p>

<blockquote><p>2.5亿个整数中找出不重复的整数的个数，内存空间不足以容纳这2.5亿个整数。</p></blockquote>

<h3>Analysis</h3>

<p>Categorized under <strong>双层桶划分</strong> or <strong>BitMap</strong>.</p>

<p>整数个数为2<sup>32</sup>,也就是，我们可以将这2<sup>32</sup>个数，划分为2<sup>8</sup>个区域(比如用单个文件代表一个区域)，然后将数据分离到不同的区域，然后不同的区域在利用bitmap就可以直接解决了。</p>

<p><strong>But how exactly to use BitMap</strong>? 将bit-map扩展一下，用2bit表示一个数即可，0表示未出现，1表示出现一次，2表示出现2次及以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Test Command Line Copy]]></title>
    <link href="http://okckd.github.io/blog/2014/08/09/Test-command-line-copy/"/>
    <updated>2014-08-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/09/Test-command-line-copy</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/6591652/how-do-i-test-the-copy-command-in-the-windows-environment">link</a></p>

<blockquote><p>testing the copy command in windows environment</p></blockquote>

<h3>Solution</h3>

<p><a href="http://stackoverflow.com/a/6591999">The most important point</a> is to <strong>come up with different domains of inputs and scenarios</strong>.</p>

<h3>Copying between:</h3>

<ol>
<li>network share</li>
<li>A really slow network share across the Internet</li>
<li>partitions</li>
<li>disks</li>
<li>disks of different types (flash, usb, external sata, SSD, etc&hellip;)</li>
<li>directories</li>
<li>within the same directory</li>
</ol>


<h3>Naming</h3>

<ol>
<li>Normal file name</li>
<li>Filename that exceeds 8.3 (verylongfilename.whatever)</li>
<li>Copying a very long file name, but referencing it by it&rsquo;s 8.3 name (copy verylo~1.wha d:)</li>
<li>A full directory path that exeeds MAX_PATH (260) characters (e.g. c:\a\very\long\directory\name\that\goes\on\forever\in\length&hellip;&hellip;foo.txt)</li>
<li>By absolute addressing (\?\c:\foo\foo.txt)</li>
<li>wildcards (e.g. <em>.</em> *.txt foo?.txt )</li>
<li>A filename with unicode characters</li>
<li>A filename with illegal characters in it (there are creative ways to get these files on disk)</li>
</ol>


<h3>Attributes</h3>

<ol>
<li>Testing with different file attributes (read-only, hidden, system, archive, etc&hellip;)</li>
<li>Validate timestamp is preserved across copies</li>
<li>Validate timestamp is preserved across network file share copies when the destination machine is in another timezone</li>
<li>NTFS ACLs are preserved</li>
</ol>


<h3>Addressing types</h3>

<ol>
<li>reference by absolute path (e.g. copy c:\some\directory\foo.txt c:\other\place\foo.txt)</li>
<li>reference by relative path (e.g. copy &#8230;.\documents\whatever\foo.txt subdirectory/foo.txt)</li>
<li>By absolute drive letter into current working directoroy of destination (with no path (e.g. copy foo.txt d:)</li>
<li>Network share mounted to a drive letter</li>
</ol>


<h3>Failure cases, edge cases, and hack attacks</h3>

<ol>
<li>Try to copy a file onto itself (e.g copy c:\foo.txt c:\foo.txt)</li>
<li>Copy when the network share is down.</li>
<li>Unplug the network cable in the middle of a network file copy</li>
<li>copy to a read only directory</li>
<li>copy when the source file is locked.</li>
<li>copy the when destination file exists but the destination file exists and is read only</li>
<li>Detach the external disk right before the file copy starts</li>
<li>disk is near full (But would be full before the entire copy finishes)</li>
<li>disk is full</li>
<li>Unplug the power cable in the middle of the copy!</li>
<li>During a very long copy, start another copy with the same source file, but to another destination</li>
<li>During a very long copy, start another copy with a different source file, but the the same destination</li>
<li>During a very long copy, start another copy with the same source and destination files!</li>
</ol>


<h3>File types</h3>

<ol>
<li>ascii file</li>
<li>unicode file</li>
<li>binary file</li>
</ol>


<h3>Environments</h3>

<ol>
<li>RAID configurations</li>
<li>FAT and NTFS</li>
<li>Windows XP, Vista, 7, Server 2003, etc&hellip; (you can quantify this by asking the requirement of &ldquo;which OS&rdquo; up front)</li>
<li>Virtual Machine (VMWare, virtual PC, hypervisor, etc&hellip;)</li>
<li>Intel and AMD</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Process vs. Thread]]></title>
    <link href="http://okckd.github.io/blog/2014/08/09/Process-and-thread/"/>
    <updated>2014-08-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/09/Process-and-thread</id>
    <content type="html"><![CDATA[<h3>First difference</h3>

<p><strong><a href="http://www.programmerinterview.com/index.php/operating-systems/thread-vs-process/">A process</a> can contain multiple threads</strong>. When you open Microsoft Word, you start <strong>a process</strong> that runs Word. The OS creates a process and begins executing the <strong>primary thread</strong> of that process.</p>

<p>Since a process can consist of multiple threads, a thread could be considered <strong>a ‘lightweight’ process</strong>.</p>

<h3>Second difference</h3>

<p>Another difference is that <strong>threads</strong> within the same process <strong>share the same address space</strong>, whereas different <strong>processes</strong> do not.</p>

<p>This allows threads to read from and write to the same data structures and variables, and also <strong>facilitates communication between threads</strong>. Communication between processes – also known as IPC, or <strong>inter-process communication</strong> – is quite difficult and resource-intensive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Median of Array in Distributed Computers]]></title>
    <link href="http://okckd.github.io/blog/2014/08/09/Median-in-distributed-computers/"/>
    <updated>2014-08-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/09/Median-in-distributed-computers</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.quora.com/Distributed-Algorithms/What-is-the-distributed-algorithm-to-determine-the-median-of-arrays-of-integers-located-on-different-computers">link</a></p>

<blockquote><p>What is the <strong>distributed algorithm</strong> to determine the median of arrays of 1 billion integers located on different computers?</p></blockquote>

<h3>Solution</h3>

<ol>
<li><p>Suppose you have <strong>a master node</strong> (or are able to use a consensus protocol to elect a master from among your servers).</p></li>
<li><p>The master queries all servers for the size of their sets of data, so that it knows to look for the k = n/2 largest element.</p></li>
<li><p>The master then selects a random server and queries <strong>a random element</strong>.</p></li>
<li><p>The master broadcasts this element to each server.</p></li>
<li><p>Each server partitions its elements into those larger than or equal to the broadcasted element and those smaller than the broadcasted element.</p></li>
<li><p>Each server returns to the master the <strong>size of the larger-than partition</strong>, call this m.</p>

<ol>
<li><p>If the sum of these sizes is greater than k, the master indicates to each server to disregard the &lsquo;less-than&rsquo; set.</p></li>
<li><p>If it is less than k, the master indicates to disregard the larger-than sets and updates k = k &ndash; m.</p></li>
<li><p>If it is exactly k, the algorithm terminates and the value returned is the pivot selected at the beginning of the iteration.</p></li>
</ol>
</li>
<li><p>Recurse beginning with selecting a new random pivot from the remaining elements.</p></li>
</ol>


<p><a href="http://qr.ae/k2DcS">ref</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Functional Programming]]></title>
    <link href="http://okckd.github.io/blog/2014/08/09/Functional-programming/"/>
    <updated>2014-08-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/09/Functional-programming</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p><strong><a href="http://stackoverflow.com/a/23290">A functional language</a> allows you to write a mathematical function</strong>, i.e. a function that takes n arguments and returns a value. If the program is executed, this function is evaluated.</p>

<p>A purely functional program <strong>always yields the same value for an input</strong>, and the order of evaluation is not well-defined; which means that uncertain values like user input or random values are hard to model in purely functional languages.</p>

<h3>One Sentence</h3>

<p><strong>Functional programming is like describing your <a href="http://stackoverflow.com/a/23475">problem to a mathematician</a>. Imperative programming is like giving instructions to an idiot</strong>.</p>

<h3>Pros and Cons</h3>

<p>Functional Programming allows coding <a href="http://stackoverflow.com/a/24294">with fewer potentials for bugs</a> because each component is completely isolated. Also, using recursion and first-class functions allows for <strong>simple proofs of correctness</strong> which typically mirror the structure of the code.</p>

<p>Functional programming languages are typically <a href="http://en.wikipedia.org/wiki/Functional_programming#Efficiency_issues">less efficient</a> in their use of CPU and memory than imperative languages such as C and Pascal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Thread Pool Pattern]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Thread-pool-pattern/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Thread-pool-pattern</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p><a href="http://programmers.stackexchange.com/a/173580">Thread pool</a> is a collection of managed threads usually organized in a queue, which execute the tasks in the task queue.</p>

<p><img class="middle" src="http://okckd.github.io/assets/images/thread-pool.png"></p>

<p><a href="http://en.wikipedia.org/wiki/Thread_pool_pattern">A sample thread pool</a> (green boxes) with waiting tasks (blue) and completed tasks (yellow)</p>

<h3>Why Thread Pool?</h3>

<p><a href="http://www.ibm.com/developerworks/library/j-jtp0730/">Many server applications</a>, such as <strong>Web servers (eg. Tomcat)</strong>, database servers, file servers, or mail servers must process a large number of tasks received from a network protocol. Often, the task is short-lived and the number of requests is large.</p>

<p><strong>Thread Pools are useful when you need to limit the number of threads</strong> running in your application at the same time.</p>

<h3>More details</h3>

<p>A thread pool is a group of pre-instantiated, idle threads which stand ready to be given work. These are preferred over instantiating new threads for each task when there is <strong>a large number of short tasks</strong> to be done <strong>rather than a small number of long ones</strong>.</p>

<p>Instead of starting a new thread for every task to execute concurrently, the <strong>task can be passed to a thread pool</strong>. As soon as the pool has any idle threads the task is assigned to one of them and executed.</p>

<p>Thread pools are often used in multi threaded servers. Each connection <strong>arriving at the server via the network is wrapped as a task</strong> and passed on to a thread pool. The threads in the thread pool will process the requests on the connections concurrently.</p>

<h3>Code</h3>

<p><strong>a <a href="http://tutorials.jenkov.com/java-concurrency/thread-pools.html">simple thread pool implementation</a></strong></p>

<p>Pool Class:</p>

<pre><code>public class ThreadPool {

  private BlockingQueue taskQueue = null;
  private List&lt;PoolThread&gt; threads = new ArrayList&lt;PoolThread&gt;();
  private boolean isStopped = false;

  public ThreadPool(int noOfThreads, int maxNoOfTasks){
    taskQueue = new BlockingQueue(maxNoOfTasks);

    for(int i=0; i&lt;noOfThreads; i++){
      threads.add(new PoolThread(taskQueue));
    }
    for(PoolThread thread : threads){
      thread.start();
    }
  }

  public void synchronized execute(Runnable task){
    if(this.isStopped) throw
      new IllegalStateException("ThreadPool is stopped");

    this.taskQueue.enqueue(task);
  }

  public synchronized void stop(){
    this.isStopped = true;
    for(PoolThread thread : threads){
      thread.stop();
    }
  }
}
</code></pre>

<p>Thread Class:</p>

<pre><code>public class PoolThread extends Thread {

  private BlockingQueue taskQueue = null;
  private boolean       isStopped = false;

  public PoolThread(BlockingQueue queue){
    taskQueue = queue;
  }

  public void run(){
    while(!isStopped()){
      try{
        Runnable runnable = (Runnable) taskQueue.dequeue();
        runnable.run();
      } catch(Exception e){
        //log or otherwise report exception,
        //but keep pool thread alive.
      }
    }
  }

  public synchronized void stop(){
    isStopped = true;
    this.interrupt(); //break pool thread out of dequeue() call.
  }

  public synchronized void isStopped(){
    return isStopped;
  }
}
</code></pre>

<p>An explanation:</p>

<blockquote><p>The thread pool implementation consists of two parts. A ThreadPool class which is the public interface to the thread pool, and a PoolThread class which implements the threads that execute the tasks.</p>

<p>To execute a task the method ThreadPool.execute(Runnable r) is called with a Runnable implementation as parameter. The Runnable is enqueued in the blocking queue internally, waiting to be dequeued.</p>

<p>The Runnable will be dequeued by an idle PoolThread and executed. You can see this in the PoolThread.run() method. After execution the PoolThread loops and tries to dequeue a task again, until stopped.</p>

<p>To stop the ThreadPool the method ThreadPool.stop() is called. The stop called is noted internally in the isStopped member. Then each thread in the pool is stopped by calling PoolThread.stop(). Notice how the execute() method will throw an IllegalStateException if execute() is called after stop() has been called.</p>

<p>The threads will stop after finishing any task they are currently executing. Notice the this.interrupt() call in PoolThread.stop(). This makes sure that a thread blocked in a wait() call inside the taskQueue.dequeue() call breaks out of the wait() call, and leaves the dequeue() method call with an InterruptedException thrown. This exception is caught in the PoolThread.run() method, reported, and then the isStopped variable is checked. Since isStopped is now true, the PoolThread.run() will exit and the thread dies.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Producer Consumer Problem]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Producer-consumer-problem/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Producer-consumer-problem</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>Producer-consumer problem illustrates the need for <strong>synchronization</strong> in systems where <strong>many processes share a resource</strong>.</p>

<p><a href="http://cs.gmu.edu/cne/modules/ipc/aqua/producer.html">In the problem</a>, two processes share a fixed-size buffer. One process produces information and puts it in the buffer, while the other process consumes information from the buffer. These processes do not take turns accessing the buffer, they both work concurrently.</p>

<h3>Inadequate Solution</h3>

<p><img class="middle" src="http://okckd.github.io/assets/images/producer-workflow.gif"></p>

<p><img class="middle" src="http://okckd.github.io/assets/images/consumer-workflow.gif"></p>

<p><strong>The code might look like this</strong>:</p>

<pre><code>BufferSize = 3;
  count = 0;

Producer()
{
    int widget;
    WHILE (true) {                   // loop forever
      make_new(widget);              // create a new widget to put in the buffer
      IF(count==BufferSize)
           Sleep();                  // if the buffer is full, sleep
      put_item(widget);              // put the item in the buffer
      count = count + 1;             // increment count of items
      IF (count==1)
         Wakeup(Consumer);           // if the buffer was previously empty, wake
   }                                 //  the consumer
}

Consumer()
{
    int widget;
    WHILE(true) {                    // loop forever
      IF(count==0)
           Sleep();                  // if the buffer is empty, sleep
      remove_item(widget);           // take an item from the buffer
      count = count + 1;             // decrement count of items
      IF(count==N-1)
            Wakeup(Producer);        // if buffer was previously full, wake
                                     //  the producer
      Consume_item(widget);          // consume the item
    }
}
</code></pre>

<p>This <a href="http://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem#Inadequate_implementation">will cause problems</a>, because <strong>it contains a race condition</strong> that can lead to a deadlock. Or in simply words, it has the potential of <a href="http://cs.gmu.edu/cne/modules/ipc/purple/prodsem.html">losing wakeups</a>.</p>

<p>An alternative analysis is that if the programming language does not define the semantics of <strong>concurrent accesses to shared variables (in this case itemCount)</strong> without use of synchronization, then the solution is unsatisfactory for that reason, without needing to explicitly demonstrate a race condition.</p>

<p>Solutions are: <strong>semaphores or monitors</strong>.</p>

<h3>Semaphore</h3>

<pre><code>semaphore mutex = 1;
semaphore fillCount = 0;
semaphore emptyCount = BUFFER_SIZE;

procedure producer() {
    while (true) {
        item = produceItem();
        down(emptyCount);
            down(mutex);
                putItemIntoBuffer(item);
            up(mutex);
        up(fillCount);
    }
}

procedure consumer() {
    while (true) {
        down(fillCount);
            down(mutex);
                item = removeItemFromBuffer();
            up(mutex);
        up(emptyCount);
        consumeItem(item);
    }
}
</code></pre>

<h3>Monitor</h3>

<pre><code>monitor ProducerConsumer {
    int itemCount;
    condition full;
    condition empty;

    procedure add(item) {
        while (itemCount == BUFFER_SIZE) {
            wait(full);
        }

        putItemIntoBuffer(item);
        itemCount = itemCount + 1;

        if (itemCount == BUFFER_SIZE -1) {
            notify(full);
        }
    }
    procedure remove() {
        while (itemCount == 0) {
            wait(empty);
        }

        item = removeItemFromBuffer();
        itemCount = itemCount - 1;

        if (itemCount == 1) {
            notify(empty);
        }


        return item;
    }
}

procedure producer() {
    while (true) {
        item = produceItem();
        ProducerConsumer.add(item);
    }
}

procedure consumer() {
    while (true) {
        item = ProducerConsumer.remove();
        consumeItem(item);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Max Sum of Non-Consecutive Elements]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Max-sum-non-consecutive/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Max-sum-non-consecutive</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://tech-queries.blogspot.sg/2009/05/max-possible-sum-of-non-consecutive.html">link</a></p>

<blockquote><p>There is an integer array consisting positive numbers only.</p>

<p>Find maximum possible sum of elements such that there are no 2 consecutive elements present in the sum.</p></blockquote>

<h3>Solution</h3>

<p>It&rsquo;s a little tricky to write the equation. Always remember the <strong>basic principle of DP</strong> is to assume that solution is found for (i -1), and then we calculate solution for input (i).</p>

<p><strong>Don&rsquo;t miss the (i-1) part</strong>.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>public int maxSumNonConsec(int[] input) {
    int len = input.length;
    int[] dp = new int[len];
    dp[0] = input[0];
    dp[1] = Math.max(input[0], input[1]);
    for (int i = 2; i &lt; len; i++) {
        dp[i] = Math.max(dp[i - 1], input[i] + dp[i - 2]);
    }
    return dp[len - 1];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Decimal to Hexadecimal]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Decimal-to-Hex/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Decimal-to-Hex</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/13465098/decimal-to-hexadecimal-converter-in-java">link</a></p>

<blockquote><p>Decimal to Hexadecimal conversion.</p></blockquote>

<h3>Solution</h3>

<p>Convert binary to hex as a group of 4 bits.</p>

<p>Read code.</p>

<h3>Code</h3>

<p><strong>written by me</strong></p>

<pre><code>private final char[] hexDigits = { '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
private final int flag = 0x0F;

public String decToHex(int dec) {
    char[] hex = new char[8];
    for (int i = 7; i &gt;= 0; i--) {
        int oneDigit = flag &amp; dec;
        dec &gt;&gt;= 4;
        hex[i] = hexDigits[oneDigit];
    }
    return String.valueOf(hex);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Composition Over Inheritance]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Composition-over-inheritance/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Composition-over-inheritance</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p><a href="http://en.wikipedia.org/wiki/Composition_over_inheritance">Composition over inheritance</a> in OOP is a technique by which classes achieve <strong>polymorphic behavior and code reuse</strong> by containing other classes <strong>instead of</strong> through inheritance.</p>

<h3>Benefits</h3>

<p><a href="http://en.wikipedia.org/wiki/Composition_over_inheritance#Benefits">It gives</a> the design <strong>higher flexibility</strong>, giving business-domain classes and more stable business domain in the long term. In other words, HAS-A can be better than an IS-A relationship.</p>

<p><strong>And inheritance <a href="http://stackoverflow.com/a/891908">breaks encapsulation</a></strong>! This post also points out these (which is hard to understand):</p>

<blockquote><ol>
<li><p>You can&rsquo;t change the implementation inherited from super classes at runtime (obviously because inheritance is defined at compile time).</p></li>
<li><p>Inheritance exposes a subclass to details of its parent&rsquo;s class implementation, that&rsquo;s why it&rsquo;s often said that inheritance breaks encapsulation (in a sense that you really need to focus on interfaces only not implementation, so reusing by sub classing is not always preferred).</p></li>
<li><p>The tight coupling provided by inheritance makes the implementation of a subclass very bound up with the implementation of a super class that any change in the parent implementation will force the sub class to change.</p></li>
<li><p>Excessive reusing by sub-classing can make the inheritance stack very deep and very confusing too.</p></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
</feed>
