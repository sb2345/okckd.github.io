<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facebook | Shuatiblog.com]]></title>
  <link href="www.shuatiblog.com/blog/categories/facebook/atom.xml" rel="self"/>
  <link href="www.shuatiblog.com/"/>
  <updated>2015-05-20T20:08:00+08:00</updated>
  <id>www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Facebook] Generate number with Given probability ]]></title>
    <link href="www.shuatiblog.com/blog/2015/02/08/generate-number-with-given-probability/"/>
    <updated>2015-02-08T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/02/08/generate-number-with-given-probability</id>
    <content type="html"><![CDATA[### Question 

[link](http://blog.sina.com.cn/s/blog_b9285de20101h463.html)

> 给定一个随机函数可以按照0.5的概率返回true。

> 要求实现一个函数随机返回任意概率的true。

### Solution 

Eg. 0.25 true, then should be: 

1. generate once. If false, return false, else...

1. generate again, directly return.

So, always return result for the possibility larger than 0.5. This recursion might go on forever. 

Read code below. 

### Code

not my code

    boolean RNGwithGivenProb(double p, boolean expected)
    {
       if(p < 0.5)
           return RNGwithGivenProb(1 - p, !expected);  
       if(RNG() == expected)
           return expected;
       else
           return RNGwithGivenProb((p - 0.5) * 2, expected);
    }

    boolean RNG()
    {
       return T/F with 0.5 probability.
    }
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Scheduling Jobs with Max Cost ]]></title>
    <link href="www.shuatiblog.com/blog/2015/01/07/scheduling-jobs-with-max-cost/"/>
    <updated>2015-01-07T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/01/07/scheduling-jobs-with-max-cost</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.glassdoor.com/Interview/Given-a-set-of-n-jobs-with-start-time-end-time-cost-find-a-subset-so-that-no-2-jobs-overlap-and-the-cost-is-maximum-QTN_440168.htm)

> Given a set of n jobs with [start time, end time, cost], find a subset so that no 2 jobs overlap and the cost is maximum.

> Let's assume the input is already sorted by start_time. 

### Solution

[Somebody](http://cs.stackexchange.com/a/14237) mentioned __Interval Graph__, so check it out if you interested! 

I am going to discuss both DP and recursive solution. 

This question reminds me of __[Question] 0-1 Knapsack Problem__ and __[Question] Coin Change Problem__, cuz the basic idea is to compare 2 conditions: 

1. include current element
1. or, not include current element

A very good DP solution is presented in [here](http://cs.stackexchange.com/a/16842). The code below is written by me and it's very intuitive to read. 

Leave me a comment if you have questions. And one more thing~ Happy new year! 

### Code

Dp

	private int dpSolution(Job[] jobs, int size) {
		int[] dp = new int[size];
		dp[size - 1] = jobs[size - 1].cost;
		// cost of last job equals to just itself
		for (int k = size - 2; k >= 0; k--) {
			int next = findNextJob(jobs, k);
			int includeK = jobs[k].cost;
			if (next < size) {
				includeK += dp[next];
			}
			int excludeK = dp[k + 1];
			dp[k] = Math.max(includeK, excludeK);
		}
		return dp[0];
	}

	private int findNextJob(Job[] jobs, int k) {
		int finishTime = jobs[k].finish;
		int next = k + 1;
		while (next < jobs.length) {
			if (jobs[next].start < finishTime) {
				next++;
			} else {
				break;
			}
		}
		return next;
	}

Recursion

	public int recursiveSolution(Job[] jobs, int size, int k) {
		// max cost from (k)th job and onwards
		if (k == size) {
			return 0;
		}
		// (k)th job must not conflict with any previous job
		int next = findNextJob(jobs, k);
		int includeK = jobs[k].cost + recursiveSolution(jobs, size, next);
		int excludeK = recursiveSolution(jobs, size, k + 1);
		return Math.max(includeK, excludeK);
	}

	private int findNextJob(Job[] jobs, int k) {
		int finishTime = jobs[k].finish;
		int next = k + 1;
		while (next < jobs.length) {
			if (jobs[next].start < finishTime) {
				next++;
			} else {
				break;
			}
		}
		return next;
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Write a Json prettifier ]]></title>
    <link href="www.shuatiblog.com/blog/2015/01/06/Json-prettifier/"/>
    <updated>2015-01-06T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/01/06/Json-prettifier</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.glassdoor.com/Interview/Write-a-function-to-prettify-Json-objects-QTN_151361.htm)

Input:
	{"firstName":"John","lastName":"Smith","isAlive":true,"age" :25,"height_cm":167.6,"address":{"streetAddress":"212ndStre et","city":"NewYork","state":"NY","postalCode":"10021-3100" },"phoneNumbers":[{"type":"home","number":"212555-1234"},{" type":"office","number":"646555-4567"}],"children":[],"spou se":null}

Output:

	{
	  "firstName": "John",
	  "lastName": "Smith",
	  "isAlive": true,
	  "age": 25,
	  "height_cm": 167.6,
	  "address": {
	    "streetAddress": "21 2nd Street",
	    "city": "New York",
	    "state": "NY",
	    "postalCode": "10021-3100"
	  },
	  "phoneNumbers": [
	    {
	      "type": "home",
	      "number": "212 555-1234"
	    },
	    {
	      "type": "office",
	      "number": "646 555-4567"
	    }
	  ],
	  "children": [],
	  "spouse": null
	}

### Solution

Since I did not find anything useful online, I spent an hour writing the following code. These are the things to take into consideration:

1. __Line break__ after a comma, a left bracket, or prior to a right bracket. A special pattern is "}," - we only do line break once after the comma. 

1. __Indentation__ is important. It's a little complex cuz we reduce indentation __BEFORE__ printing out a right bracket, but increase indentation __AFTER the left bracket__. 

### Code

	public void prettify(String input) throws Exception {

		// observation the rules for Json format:
		// 1. each line end with either a { , or }
		// 2. indentation depends on number of brackets
		int len = input.length();
		int left = 0;
		int right = 0;
		int tab = 0;

		while (left < len) {
			// first, advance right pointer to the next line break point
			while (right < len) {
				if (input.charAt(right) == '}' || input.charAt(right) == ']') {
					// first case, if point to a closing bracket
					tab--;
					// indentation should change right away should we find a
					// closing bracket
					if (right + 1 < len && input.charAt(right + 1) != ',') {
						break;
					}
				} else if (input.charAt(right) == ','
						|| input.charAt(right) == '{'
						|| input.charAt(right) == '[') {
					// second case, break at , or {
					break;
				} else if (right + 1 < len
						&& (input.charAt(right + 1) == '}' || input
								.charAt(right + 1) == ']')) {
					// third case, break prior to }
					// we need not swap the order of first and third case,
					// because when we found a closing bracket, we need to
					// change indentation right away
					break;
				}
				right++;
			}

			// now print the chars from left pointer to right inclusively
			if (right == len) {
				// end of input
				if (tab != 0) {
					throw new Exception("Json format error!");
				}
				right--;
				// this is for the convenience of printing last line
			}
			printIndentation(tab);
			System.out.println(input.substring(left, right + 1));
			if (input.charAt(right) == '{' || input.charAt(right) == '[') {
				tab++;
			}

			// last, update pointers
			left = ++right;
		}
	}

	private void printIndentation(int tab) {
		for (int i = 0; i < tab; i++) {
			System.out.print("    ");
		}
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Maximum sum such that no two elements are adjacent ]]></title>
    <link href="www.shuatiblog.com/blog/2014/12/22/Maximum-sum-no-adjacent/"/>
    <updated>2014-12-22T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2014/12/22/Maximum-sum-no-adjacent</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.geeksforgeeks.org/maximum-sum-such-that-no-two-elements-are-adjacent/)

> Given an array of positive numbers, find the maximum sum of a subsequence that no 2 numbers should be adjacent. 

> Eg. (3, 2, 7, 10) should return 13 (3+10) 

> Eg. (3, 2, 5, 10, 7) should return 15 (3+5+7).

### Solution

It is an modified version of "max sum subsequence". Answer given on [gfg](http://www.geeksforgeeks.org/maximum-sum-such-that-no-two-elements-are-adjacent/) is: 

> Loop for all elements in arr[] and maintain two sums 'incl' and 'excl' where: 

> incl = Max sum including the previous element 
>
> excl = Max sum excluding the previous element

### Code

__written by me__

	public int solve(int[] A) {
		if (A == null || A.length == 0) {
			return 0;
		} else if (A.length == 1) {
			return A[0];
		} else if (A.length == 2) {
			return Math.max(A[0], A[1]);
		}

		// prePreMax is the max non-adjacency sequence ending 2 position ahead
		// preMax is the max non-adjacency sequence ending 1 position ahead
		int prePreMax = A[0];
		int preMax = A[1];
		int ans = 0;

		for (int i = 2; i < A.length; i++) {
			ans = Math.max(ans, prePreMax + A[i]);
			// set the 2 variables: prePreMax, preMax
			int temp = preMax;
			preMax = Math.max(0, prePreMax + A[i]);
			prePreMax = Math.max(prePreMax, temp);
		}
		return ans;
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Binary Search Tree 3Sum ]]></title>
    <link href="www.shuatiblog.com/blog/2014/12/18/Binary-Search-Tree-3Sum/"/>
    <updated>2014-12-18T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2014/12/18/Binary-Search-Tree-3Sum</id>
    <content type="html"><![CDATA[### Question 

DLL - [link](http://www.geeksforgeeks.org/find-if-there-is-a-triplet-in-bst-that-adds-to-0/)

Inorder - [link](http://www.geeksforgeeks.org/find-a-pair-with-given-sum-in-bst/)

> Given a BST, write a function that returns true if there is a triplet that sums to 0, returns false otherwise. 

### Solution

We will solve the question just like we do __[LeetCode 15] 3Sum__. What is missing is an random access of tree nodes, like we have in array.

In fact, we do not need random access. Tree traversal (one after another in sequence) would be good enough. 

Now there're 2 solution. __First is to convert the tree to Double-linked list__, then do 3Sum. The conversion takes O(n) time and O(logn) extra space, and 3Sum take O(n^2). however doing this modifies the original tree. 

__Second solution is to to inorder traversal and reversed inorder traversal__. This is a better solution, personally. And the time and space used is same. 

### Code

__DLL way, written by me__ 

	public void findTriplet(TreeNode root, int target) {
		TreeNode[] dll = convertToDll(root);
		TreeNode head = dll[0];
		TreeNode tail = dll[1];
		// note that the bst inorder dll should already in sorted by value
		TreeNode first = head;
		while (first.right != null) {
			TreeNode left = first.right;
			TreeNode right = tail;
			while (left.val < right.val) {
				int diff = first.val + left.val + right.val - target;
				if (diff == 0) {
					System.out.println("Found triplet: " + first.val + " "
							+ left.val + " " + right.val + " for sum of "
							+ target);
				}
				if (diff <= 0) {
					left = left.right;
				}
				if (diff >= 0) {
					right = right.left;
				}
			}
			first = first.right;
		}
	}

	private TreeNode[] convertToDll(TreeNode node) {
		TreeNode[] ans = new TreeNode[2];
		// do the left side of node
		if (node.left == null) {
			ans[0] = node;
		} else {
			TreeNode[] preAns = convertToDll(node.left);
			ans[0] = preAns[0];
			node.left = preAns[1];
			preAns[1].right = node;
		}
		// do the right side of node
		if (node.right == null) {
			ans[1] = node;
		} else {
			TreeNode[] postAns = convertToDll(node.right);
			ans[1] = postAns[1];
			node.right = postAns[0];
			postAns[0].left = node;
		}
		return ans;
	}

__inorder way__ - basically is just __iterator of binary tree__. 
]]></content>
  </entry>
  
</feed>
