<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: q-google | Shuatiblog.com]]></title>
  <link href="http://www.shuatiblog.com/blog/categories/q-google/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-10-22T16:47:28-05:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Google] Shortest Manhattan Distance ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/02/shorest-manhattan-distance/"/>
    <updated>2015-10-02T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/02/shorest-manhattan-distance</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.mitbbs.com/article_t/JobHunting/33054861.html)

> 给一个 n*m 的房间，房间里存在各种可能的墙，房间的格子里已经放了 e 个器材，要
求新放一个器材，放置位置距其它 e 个器材的距离最近。Breadth-first search.

### Solution 

> 对 e个设备 BFS, 求每个设备到每个可以放新器材的点的距离，然后叠加。

> 最后O（n^2）一遍找最小值。复杂度O（e*n^2）

As for whether we choose to check each equipment position, or check each vacant position, it's decided by how many equipment is there. If very little equipments (e is small), then this solution should work.

However, what is there is obstacles in the matrix?

We have to use BFS then. It took more space usage, but the time complexity should be same. 

### Code

	public void findCenter(int[][] input, int numberOfEquip) {
		int m = input.length;
		int n = input[0].length;
		
		// there's gonna be m * n positions
		// we gonna cumulate (numberOfEquip) distances for each position
		int[] dis = new int[m * n];
		
		// from the input map, find Equipments
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (input[i][j] == 1) {
					// 1 represents equipment
					// when found, add the distance to every position
					cumulateDistance(i, j, dis, m, n);
				}
			}
		}
		
		// find the smallest cumulated distance from dis[].
		int sIndex = 0;
		int smallest = dis[0];
		for (int i = 0; i < m * n; i++) {
			if (dis[i] < smallest) {
				smallest = dis[i];
				sIndex = i;
			}
		}
		
		// index sIndex is the final answer
		System.out.println("Answer: " + (sIndex / n) + " " + (sIndex % n));
	}
	
	private void cumulateDistance(int x, int y, int[] dis, int m, int n) {
		for (int i = 0; i < m * n; i++) {
			int a = i / n;
			int b = i % n;
			dis[i] += Math.abs(a - x) + Math.abs(b - y);
		}
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Minimum adjustments ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/02/13/minimum-adjustments/"/>
    <updated>2015-02-13T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/02/13/minimum-adjustments</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.careercup.com/question?id=6212066786410496)

> Given an integer array, adjust each integers so that the difference of every adjacent integers are not greater than a given number target. 

> If the array before adjustment is A, the array after adjustment is B, you should minimize the sum of |A[i]-B[i]| 

> Given [1,4,2,3] and target=1, one of the solutions is [2,3,2,3], the minimal adjustment cost is 2.

### Solution 

This is a difficult DP. Now we define 2D array like this: 

> dp[i][j]: the minimal adjust cost on changing A[i] to j

And the equation: 

> dp[i][j] = min{dp[i-1][k] + |j-A[i]|} s.t. |k-j| <= target

Refer to the post by [simon.zhangsm](http://www.careercup.com/question?id=6212066786410496)

### Code

Not written.

Available at [OJ](http://lintcode.com/en/problem/minimum-adjustment-cost/#)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Number of slices ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/02/09/number-of-slices/"/>
    <updated>2015-02-09T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/02/09/number-of-slices</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.careercup.com/question?id=5090693043191808)

> Calculate the number of slices. Slice means that the difference between the maximum and minimum in the slice <= 2.

> eg. Given array 3 5 7 6 3. 

> There're 10: (0,0) (1,1) (2,2) (3,3) (4,4) (5,5) (0,1) (1,2) (1,3) (2,3). 

### Solution 

If only asked to output the total number of such slices, we can do it in __O(n) using sliding-window-like algorithm__, with the help of addtional queue-like data structure. 

This is __a very difficult question__! Quoted from the [top answer](http://www.careercup.com/question?id=5090693043191808):

> The basic idea is that you can start with arr[0] and then see __how many more elements you can include before you violate the max -min <= K constraint__. When you reach some index j you can no longer include, you know the maximum subarray starting at index 0 is arr[0...j-1], and you can count j different subarrays there. 

> ... you then start with a[1]. Now [1...j-1] has to be valid, so you try to advance the right boundary again (try arr[1...j], then arr[1...j+1]) and so on until again you reach a point past which you can't advance. Then you'll try string at a[2], and so on. This is what they mean when they talk about __"crawling" over the array__. 

> The key issue here is how you will check whether a particular subarray is valid efficiently...

Sliding window is explained above. Now, __the minMaxQueue__ explain in [this pdf](https://codility.com/media/train/solution-count-bounded-slices.pdf): 

> The PDF ... have __1 queue each__ (i.e. 2 queues in total) for min and max (the min is treated analogous to the max case). 

> For maxQueue, whenever a new value comes in the max queue, they remove all values less than the value, since those __can never be the max__. For that reason the queue's values are in descending order. And the max at any given time is the first element.

In this way, getting min/max is O(1), thus entire solution is O(n). Nice question! 

### Code

Not written.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Heap and BST conversion ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/02/09/heap-bst-conversion/"/>
    <updated>2015-02-09T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/02/09/heap-bst-conversion</id>
    <content type="html"><![CDATA[### Question 1

[link](http://www.careercup.com/question?id=4281027)

> Convert a BST to max heap. 

### Solution 

The [second answer](http://www.careercup.com/question?id=4281027): 

> a simple (reversed) in-order traversal of the BST. It would produce a sorted array which is indeed a max-heap!

### Question 2

[link](http://stackoverflow.com/questions/14106821/converting-a-heap-to-a-bst-in-on-time)

> Converting a heap to a BST in O(n) time?

> possible? 

### Solution 

[Impossible](http://stackoverflow.com/a/14107362). Because otherwise, we can do this: 

1. Take an array and build the heap in O(n) time
1. Converting the heap to a BST in O(n) time (assuming) 
1. Walking the BST in O(n) time to get a sorted sequence.

Thus we sort array in O(n) time, it can't happen. 

Right way to do, is to repeatedly dequeueing maximum value from the BST, then generate the BST recursively (bottom-up approach). 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Array Signature ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/02/09/array-signature/"/>
    <updated>2015-02-09T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/02/09/array-signature</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.careercup.com/question?id=14912744)

> You are given an array of n elements [1,2,....n]. For example {3 2 1 4 6 5 7}. 

> Now we create a signature of this array by comparing every consecutive pair of elements. If they increase, write "I" else write "D". 

> For example for the above array, the signature would be "DDIIDI". The signature thus has a length of N-1. 

> Now given a signature, compute the lexicographically __smallest permutation__ of [1,2,....n]. 

### Solution 

A great [answer](http://qr.ae/BPfNw): 

> Take the above case. Signature = DDIIDI.

> Take original permutation as 1 2 3 4 5 6 7.

> Then for first continuous sequence DD reverse the strip 1 2 3 to 3 2 1 hence sequence becomes 3 2 1 4 5 6 7.

> Then for second sequence D reverse strip 5 6 to 6 5 hence sequence becomes 3 2 1 4 6 5 7.

> There is no continuous D left we are done and reached the answer.

### Code

Not written.
]]></content>
  </entry>
  
</feed>
