<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General | My Octopress Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/general/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-05T10:50:47+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[General] Application Server vs. Web Server]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/Web-server-application-server/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/Web-server-application-server</id>
    <content type="html"><![CDATA[## Overview

A Web server __exclusively handles HTTP requests__, whereas an application server __serves business logic__ to application programs through any number of protocols. 

### Web server

A [Web server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __handles the HTTP protocol__. When the Web server receives an HTTP request, it responds with an HTTP response, such as sending back an HTML page. 

To process a request, a Web server may __respond with a static HTML page__, or delegate the __dynamic response__ such as CGI scripts, JSPs (JavaServer Pages), servlets, ASPs (Active Server Pages), server-side JavaScripts, or some other server-side technology. 

### Application server

An [Application server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __exposes business logic to client applications__ through various protocols, possibly including HTTP. The clients can include GUIs (graphical user interface) running on a PC, a Web server, or even other application servers. 

In most cases, the server exposes this business logic through a component API, such as __the EJB (Enterprise JavaBean) component model__ found on J2EE (Java 2 Platform, Enterprise Edition) application servers. 

Moreover, the application server manages its own resources. Such gate-keeping duties include security, transaction processing, resource pooling, and messaging. 

There's [a nice example](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) as well. 

### Another explanation

Web server on the left. 

<table>
    <tbody><tr id="row1" title="Application Server vs Web Server comparison - What is it?"><td class="acol bg-color bg-img font-color">What is it?</td>                <td id="valtd1_1" class="vcol bg-color bg-img font-color">A server that exposes business logic to client applications through various protocols including HTTP.</td>
                <td id="valtd1_2" class="vcol bg-color bg-img font-color">A server that handles HTTP protocol.</td>
                </tr><tr id="row2" title="Application Server vs Web Server comparison - Job"><td class="acol bg-color bg-img font-color">Job</td>                <td id="valtd2_1" class="vcol bg-color bg-img font-color">Application server is used to serve web based applications and enterprise based applications(i.e servlets, jsps and ejbs...). Application servers may contain a web server internally.</td>
                <td id="valtd2_2" class="vcol bg-color bg-img font-color">Web server is used to serve web based applications.(i.e servlets and jsps)</td>
                </tr><tr id="row3" title="Application Server vs Web Server comparison - Functions"><td class="acol bg-color bg-img font-color">Functions</td>                <td id="valtd3_1" class="vcol bg-color bg-img font-color">To deliver various applications to another device, it allows everyone in the network to run software off of the same machine.</td>
                <td id="valtd3_2" class="vcol bg-color bg-img font-color">Keeping HTML, PHP, ASP etc  files available for the web browsers to view when a user accesses the site on the web, handles HTTP requests from clients.</td>
                </tr><tr id="row4" title="Application Server vs Web Server comparison - Supports"><td class="acol bg-color bg-img font-color">Supports</td>                <td id="valtd4_1" class="vcol bg-color bg-img font-color">distributed transaction and EJB's</td>
                <td id="valtd4_2" class="vcol bg-color bg-img font-color">Servlets and JSP</td>
                </tr><tr class="comparisonRow diff lastRow" id="row5" title="Application Server vs Web Server comparison - Resource utilization"><td class="acol bg-color bg-img font-color">Resource utilization</td>                <td id="valtd5_1" class="vcol bg-color bg-img font-color">High</td>
    <td id="valtd5_2" class="vcol bg-color bg-img font-color">Low</td>
</tr></tbody></table>

#### 

[[For J2EE](http://www.geekinterview.com/question_details/17043), Web server is used only for Jsp and Servlets and static functionality. It doesn't support EJB and JMS and JAAS.

Application server is basically: 

> AppServer = WebServer + EJB container. 

__Tomcat is web container__ where as Apache is web server.

An Application Server may include a Web Server inside it.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[General] Model–view–controller]]></title>
    <link href="http://okckd.github.io/blog/2014/08/04/MVC/"/>
    <updated>2014-08-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/04/MVC</id>
    <content type="html"><![CDATA[### Overview

[Model–view–controller]((http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) (MVC) is a software architectural pattern for implementing __user interfaces__. 

### Components 

The central component of MVC, __the model__, captures the application's behavior in terms of its problem domain, independent of the user interface. The model directly manages the application's data, logic and rules. 

__A view__ can be any output representation of information, such as a chart or a diagram; multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants. 

The third part, __the controller__, accepts input and converts it to commands for the model or view.

Early web MVC frameworks took a thin client approach that placed almost the entire MVC on server. As client technologies have matured, MVC components can be executed partly on the client(AJAX). 

### Other good explanation

MVC is a [user interface design pattern](http://geekswithblogs.net/gregorymalcolm/archive/2009/07/14/user-interface-patterns.aspx). 

1. Controller – Represents interactions, typically with the mouse or keyboard, or in the case of web applications, in the form of HTTP requests.
 
1. View – Renders the graphical output of the application
 
1. Model – Everything else. In particular this includes __the data and business logic__. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[General] Multilayered Architecture]]></title>
    <link href="http://okckd.github.io/blog/2014/08/03/Multilayered-architecture/"/>
    <updated>2014-08-03T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/03/Multilayered-architecture</id>
    <content type="html"><![CDATA[### First Word

A [multilayered software architecture](http://en.wikipedia.org/wiki/Multilayered_architecture) is a software architecture that uses many layers for allocating the different responsibilities of a software product.

### Layers

1. __Presentation layer__
    a. UI layer, view layer
    a. presentation tier in multitier architecture
1. __Application layer__
    a. also called service layer/GRASP Controller Layer
1. __Business layer__
    a. also called business logic layer/domain layer
1. Infrastructure layer
    1. data access layer/__persistence layer__
    1. logging, networking, and other services which are required to support a particular business layer

### Conventions

__Application layer__ (or service layer) is sometimes considered a sublayer of __business layer__. 

If there's no explicit distinction between first 3 tiers, then it's a __traditional client-server(two-tier) model__.

The __application/business layers__ can, in fact, be further subdivided to emphasize distinct responsibility (eg. MVC). 

Sometimes there's __business infrastructure layer(BI)__, located between the business layer and infrastructure layer. 

Infrastructure layer can be partitioned into different levels (high-level or low-level). __Developers focus on only the persistence capabilities__, therefore only talk about persistence layer or data access layer. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Shuffle a Given Array]]></title>
    <link href="http://okckd.github.io/blog/2014/08/01/Shuffle-an-array/"/>
    <updated>2014-08-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/01/Shuffle-an-array</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.geeksforgeeks.org/shuffle-a-given-array/)

> Given an array, generate a random permutation of array elements. 

### Analysis

This is called __[Fisher–Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)__. Proof can be seen at question post: 

> The probability that ith element goes to second last position can be proved to be 1/n by dividing it in two cases.

> Case 1: i = n-1 (index of last element):

> The probability of last element going to second last position is = (probability that last element doesn't stay at its original position) x (probability that the index picked in previous step is picked again so that the last element is swapped)

> So the probability = ((n-1)/n) x (1/(n-1)) = 1/n

> Case 2: 0 < i < n-1 (index of non-last):

> The probability of ith element going to second position = (probability that ith element is not picked in previous iteration) x (probability that ith element is picked in this iteration)

> So the probability = ((n-1)/n) x (1/(n-1)) = 1/n

> We can easily generalize above proof for any other position. 

### Solution

O(n) time complexity. 

	To shuffle an array a of n elements (indices 0..n-1):
	  for i from n − 1 downto 1 do
	       j ← random integer with 0 ≤ j ≤ i
	       exchange a[j] and a[i]

Note the RNG is having limit from 0 to i, and number i keeps decreasing. 

### Code

__not written by me__

	def sattoloCycle(items):
	    i = len(items)
	    while i > 1:
	        i = i - 1
	        j = randrange(i)  # 0 <= j <= i-1
	        items[j], items[i] = items[i], items[j]
	    return
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[General] Overriding Private Method]]></title>
    <link href="http://okckd.github.io/blog/2014/08/01/Overriding-private-method/"/>
    <updated>2014-08-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/01/Overriding-private-method</id>
    <content type="html"><![CDATA[### Question 

[link](http://stackoverflow.com/questions/2000137/overriding-private-methods-in-java)

> Can we overriding private method in Java? 

### Analysis

> Overriding private methods in Java is invalid because a parent class's private methods are "automatically final, and hidden from the derived class".  [source](http://www.linuxtopia.org/online_books/programming_books/thinking_in_java/TIJ309_006.htm)

### Solution

You can't override a private method, but you can introduce one in a derived class [without a problem](http://stackoverflow.com/a/2000156). Read more below. 

### Code

__not a problem__

	public class OverridePrivateMethod {
		private void foo() {
		}
	}
	
	class Child extends OverridePrivateMethod {
		private void foo() {
		}
	}

__add @Override annotation and get error__

	public class OverridePrivateMethod {
		private void foo() {
		}
	}
	
	class Child extends OverridePrivateMethod {
		@Override
		private void foo() {
		}
	}
]]></content>
  </entry>
  
</feed>
