<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General | My Octopress Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/general/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-01T08:02:44+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Max Sum in a 2D Array (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/08/01/Max-Sum-In-2D-Array/"/>
    <updated>2014-08-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/01/Max-Sum-In-2D-Array</id>
    <content type="html"><![CDATA[### Question 

[link](http://tech-queries.blogspot.sg/2010/05/find-max-sum-in-2d-array.html)

> Given a 2D array, find the maximum sum subarray in it. For example, in the following 2D array, the maximum sum subarray is highlighted with blue rectangle and sum of this subarray is 29.

<img class="left" src="/assets/images/max-sum-2d-matrix.png">

### Analysis

Try convert this question to "__max sum in 1D array__" by sum up all numbers in the same column. (we know that in 1D array, the algo runs O(n) time)

There's in total O(n^2) combinations of ways to sum up a column. So the __total time complexity is O(n^3)__. 

### Solution



### Code

__written by me__

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Run-Length Encoding]]></title>
    <link href="http://okckd.github.io/blog/2014/07/31/Run-Length-Encoding/"/>
    <updated>2014-07-31T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/31/Run-Length-Encoding</id>
    <content type="html"><![CDATA[### Question 

[link](http://tech-queries.blogspot.sg/2008/11/run-length-encoding.html)

> You are given a string like "aaaabbbcc", do an in place conversion which write frequency of each charater(which come continuosly) with that character. 

> Example:
>
>input: aaabbbcc
>
>output: a3b2c2

### Solution

The most important point is __whether or not you find the special cases__, and did you clarify how to handle them. 

__First special case is only 1 character__, should you append a '1' or not. Note that this question requires 'in place' conversion. So '1' is not supposed to be appended after single-occurance character. This is really important to know, if the question does not specify. (though sometimes, the question asks you to apppend a '1', eg. [here](http://www.geeksforgeeks.org/run-length-encoding/)). 

__Second case is when occurance >= 10__. We could not simply append ('0' + numberOfOccurance), because the number could be 12. This is another very important case to take note. 

The code can be seen anywhere. ]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Points on Globe Puzzle]]></title>
    <link href="http://okckd.github.io/blog/2014/07/31/Points-On-Globe/"/>
    <updated>2014-07-31T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/31/Points-On-Globe</id>
    <content type="html"><![CDATA[### Question 

[link](http://tech-queries.blogspot.sg/2009/08/points-on-globe.html)

> How many points are there on the globe where, by walking one mile south, one mile east, and one mile north, you reach the place where you started? 

### Solution

One point in the __North Pole__, and many circles in the __South Pole__. 

Read more at question post. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Number of Bus-Stations]]></title>
    <link href="http://okckd.github.io/blog/2014/07/31/Number-Of-Bus-Stations/"/>
    <updated>2014-07-31T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/31/Number-Of-Bus-Stations</id>
    <content type="html"><![CDATA[### Question 

[link](http://tech-queries.blogspot.sg/2009/05/number-of-bus-stations.html)

> At a bus-station, you have time-table for buses arrival and departure. You need to find the minimum number of platforms so that all the buses can be accommodated as per their schedule. 

> Example: Time table is like below:

    Bus         Arrival         Departure 
    BusA        0900 hrs        0930 hrs
    BusB        0915 hrs        1300 hrs
    BusC        1030 hrs        1100 hrs
    BusD        1045 hrs        1145 hrs

> The answer must be 3. 

### Solution

The answer is same as finding the maximum number of bus at the bus-station at the same time. 

__The suggestted solution__ from [here](http://tech-queries.blogspot.sg/2009/05/number-of-bus-stations.html): 

> So first sort all the arrival(A) and departure(D) time in an int array. Please save the corresponding arrival or departure in the array also. 

> After sorting our array will look like this:

    0900    0915    1930    1030    1045    1100    1145    1300
    A       A       D       A       A       D       D       D

Now use a counter. When sees an A, increment. When sees an D, decreament. In the end, return the largest counter value. 

Note: If you have a arriving and a departing at same time, put departure time first.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Inorder Successor in Binary Search Tree]]></title>
    <link href="http://okckd.github.io/blog/2014/07/31/Inorder-Successor-BST/"/>
    <updated>2014-07-31T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/07/31/Inorder-Successor-BST</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.geeksforgeeks.org/inorder-successor-in-binary-search-tree/)

> In Binary Tree, Inorder successor of a node is the next node in Inorder traversal of the Binary Tree. Inorder Successor is NULL for the last node in Inoorder traversal.

> Write a program with: 

> 1. parent pointer provided
> 1. parent pointer not provided

### Solution

__If have parent pointer, it's easy__. Read solution [here](http://tech-queries.blogspot.sg/2010/04/inorder-succesor-in-binary-tree.html). 

__If no parent pointer, then we make use of the property of BST, can get an O(h) solution__. h is the height. 

A very good solution from [this blog](http://algorithmsandme.blogspot.sg/2013/08/binary-search-tree-inorder-successor.html).

1. Start with root.
2. If the node is given has less than root, then search on left side __and update successor__.
3. If the node is greater than root, then search in right part, __don't update successor__.
4. If we find the node
	1. if the node has right sub tree, then the minimum node on the right sub tree of node is the in-order successor.
	1. otherwise, just return successor

The most important point is: we only update __successor__ during left turn, and don't update during right turn. 

### Code

__written by me__

	public TreeNode inorderSuccessor(TreeNode root, TreeNode target) {
		if (target.right != null) {
			return this.findLeftMost(target.right);
		} else {
			return this.traverse(root, new TreeNode(-1), target);
		}
	}

	private TreeNode traverse(TreeNode cur, TreeNode pre, TreeNode target) {
		if (cur.val == target.val) {
			return pre;
		} else if (cur.val < target.val) {
			cur = cur.right;
			return traverse(cur, pre, target);
		} else {
			pre = cur;
			cur = cur.left;
			return traverse(cur, pre, target);
		}
	}

	private TreeNode findLeftMost(TreeNode node) {
		while (node.left != null) {
			node = node.left;
		}
		return node;
	}
]]></content>
  </entry>
  
</feed>
