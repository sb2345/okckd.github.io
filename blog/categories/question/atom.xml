<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: question | Shuatiblog.com (formerly Woodstock Blog)]]></title>
  <link href="http://www.shuatiblog.com/blog/categories/question/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-11-23T20:42:09-06:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[Woodstock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Swizzle Sort ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/11/21/swizzle-sort/"/>
    <updated>2015-11-21T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/11/21/swizzle-sort</id>
    <content type="html"><![CDATA[# Question

[link](http://www.mitbbs.com/article_t/Recommend/31493121.html)

> 输入一个数组，要求输出满足：a[0]<=a[1]>=a[2]<=a[3]>=…

# Solution

> O(n)，一边扫描即可。发现不符合条件的只要跟前面一个数对调就可以，

# Code

	public int[] solve(int[] input) {
		boolean incr = true;
		int len = input.length;
		int p = 1;
		while (p < len) {
			if (incr ^ (input[p - 1] < input[p])) {
				Common.swap(input, p - 1, p);
			}
			p++;
			incr = !incr;
		}
		return input;
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Partition Problem (divide array into halves) ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/11/15/partition-problem/"/>
    <updated>2015-11-15T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/11/15/partition-problem</id>
    <content type="html"><![CDATA[# Question

[link](http://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/)

> [partition problem](https://en.wikipedia.org/wiki/Partition_problem) is the task of deciding whether a given multiset S of positive integers can be partitioned into two subsets S1 and S2 such that the sum of the numbers in S1 equals the sum of the numbers in S2.  

> Examples

    arr[] = {1, 5, 11, 5}
    Output: true 
    The array can be partitioned as {1, 5, 5} and {11}

    arr[] = {1, 5, 3}
    Output: false 
    The array cannot be partitioned into equal sum sets.

# Solution

__DP__ (only if sum of the elements is not too big).

> [We can create a 2D array](http://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/) of size (sum/2)*(n+1). And we can construct the solution in bottom up manner such that every filled entry has following property:

    part[i][j] = 
        true if a subset of {arr[0], arr[1], ..arr[j-1]} has sum equal to i
        false otherwise

Note that we always cares about __whether there exist a valid subset from beginning to index i__. 

Example DP array for input "3,1,1,2,2,1":

<img class="middle" src="/assets/images/partition-problem-dp.jpg">

# Code
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Largest Sub-square with Edges filled ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled</id>
    <content type="html"><![CDATA[### Question

[link](www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html)

> Given a matrix where every element is either ‘O’ or ‘X’, find the largest sub-square surrounded by ‘X’. (meaning that the 4 edges are filled with 'X')

> Example Input:

     {'X', 'O', 'X', 'X', 'X'},
     {'X', 'X', 'X', 'X', 'X'},
     {'X', 'X', 'O', 'X', 'O'},
     {'X', 'X', 'X', 'X', 'X'},
     {'X', 'X', 'X', 'O', 'O'},


> Output: 3. The square submatrix starting at (1, 1) is the largest sub-squre. 

> Example Input:

     {'X', 'O', 'X', 'X', 'X', 'X'},
     {'X', 'O', 'X', 'X', 'O', 'X'},
     {'X', 'X', 'X', 'O', 'O', 'X'},
     {'X', 'X', 'X', 'X', 'X', 'X'},
     {'X', 'X', 'X', 'O', 'X', 'O'},

> Output: 4. The square submatrix starting at (0, 2) is the largest

### Solution

Read a very similar question - __[Question] Maximum Square Sub-matrix With All 1s__

Typical DP question. Now the solution is to build 2 arrays to cache info. One horizontally and one, vertical. 

> create two auxiliary arrays hor[N][N] and ver[N][N]. 

> hor[i][j] is the number of horizontal continuous ‘X’ characters till mat[i][j] in mat[][]. 

> ver[i][j] is the number of vertical continuous ‘X’ characters till mat[i][j] in mat[][]. 

    mat[6][6] =  X  O  X  X  X  X
                 X  O  X  X  O  X
                 X  X  X  O  O  X
                 O  X  X  X  X  X
                 X  X  X  O  X  O
                 O  O  X  O  O  O

    hor[6][6] = 1  0  1  2  3  4
                1  0  1  2  0  1
                1  2  3  0  0  1
                0  1  2  3  4  5
                1  2  3  0  1  0
                0  0  1  0  0  0

    ver[6][6] = 1  0  1  1  1  1
                2  0  2  2  0  2
                3  1  3  0  0  3
                0  2  4  1  1  4
                1  3  5  0  2  0
                0  0  6  0  0  0

After we got these, start from the bottom-right corner row by row up... For every mat[i][j], we compare hor[i][j] with ver[i][j] and pick the smaller one. 

All we need to do next, is to check the other 2 edges. This solution is O(n^3).

### Code 

C++ code provided by [G4G](www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html):

    int findSubSquare(int mat[][N])
    {
        int max = 1; // Initialize result

        // Initialize the left-top value in hor[][] and ver[][]
        int hor[N][N], ver[N][N];
        hor[0][0] = ver[0][0] = (mat[0][0] == 'X');

        // Fill values in hor[][] and ver[][]
        for (int i=0; i<N; i++)
        {
            for (int j=0; j<N; j++)
            {
                if (mat[i][j] == 'O')
                    ver[i][j] = hor[i][j] = 0;
                else
                {
                    hor[i][j] = (j==0)? 1: hor[i][j-1] + 1;
                    ver[i][j] = (i==0)? 1: ver[i-1][j] + 1;
                }
            }
        }

        // Start from the rightmost-bottommost corner element and find
        // the largest ssubsquare with the help of hor[][] and ver[][]
        for (int i = N-1; i>=1; i--)
        {
            for (int j = N-1; j>=1; j--)
            {
                // Find smaller of values in hor[][] and ver[][]
                // A Square can only be made by taking smaller
                // value
                int small = getMin(hor[i][j], ver[i][j]);

                // At this point, we are sure that there is a right
                // vertical line and bottom horizontal line of length
                // at least 'small'.

                // We found a bigger square if following conditions
                // are met:
                // 1)If side of square is greater than max.
                // 2)There is a left vertical line of length >= 'small'
                // 3)There is a top horizontal line of length >= 'small'
                while (small > max)
                {
                    if (ver[i][j-small+1] >= small &&
                        hor[i-small+1][j] >= small)
                    {
                        max = small;
                    }
                    small--;
                }
            }
        }
        return max;
    }
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Cloest Leaf in Binary Tree ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree</id>
    <content type="html"><![CDATA[### Question

[link](www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html)

> Given a Binary Tree and a key, find distance of the closest leaf.

> Examples:

              1
            /    \    
           2       3
                 /   \  
                5     6   
               /       \
              7         8
             / \       /
            9  10     11
            
    Closest key to '8' is '11', so distance is 1 for '8'
    Closest key to '3' is '2', so distance is 2 for '3'
    Closest key to '5' is either '9' or '10', so distance is 2 for '5'
    Closest key to '2' is '2' itself, so distance is 0 for '2' 

### Solution

> traverse the given tree in preorder and keep track of ancestors (in a caching data struture, either it's List or an array with a correct pointer)

When we find our target, we do 2 things: 

1. find __closest distance on lower subtrees of current node__.

1. for every ancester, find the __closest distance on lower subtrees__, then add with __distance to ancester__. 

Finally, return the smallest value seen above. 

### Code

Inspired by the code from [G4G](www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html)

	int answer;

	public int findClosest(TreeNode root, int key) {
		answer = Integer.MAX_VALUE;
		helper(root, key, new ArrayList<TreeNode>());
		return answer;
	}

	private void helper(TreeNode node, int key, List<TreeNode> path) {
		if (node == null) {
			return;
		} else if (node.val != key) {
			path.add(node);
			helper(node.left, key, path);
			helper(node.right, key, path);
			path.remove(path.size() - 1);
		} else {
			// key matches with current node value
			answer = lenToLowerLeaf(node);
			// answer initially = cloest leaf from lower

			int len = path.size();
			for (int i = 0; i < len; i++) {
				// for every ancestor, calculate distance and compare
				int ithToLowerLeaf = lenToLowerLeaf(path.get(i));
				answer = Math.min(answer, (len - i) + ithToLowerLeaf);
			}
		}
	}

	private int lenToLowerLeaf(TreeNode node) {
		if (node == null) {
			return Integer.MAX_VALUE;
		} else if (node.left == null && node.right == null) {
			return 0;
		} else {
			return 1 + Math.min(lenToLowerLeaf(node.left), lenToLowerLeaf(node.right));
		}
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] All Strings by Placing Spaces ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space</id>
    <content type="html"><![CDATA[### Question

[link](www.geeksforgeeks.org/print-possible-strings-can-made-placing-spaces/index.html)

> Given a string, print all possible strings that can be made by placing spaces (zero or one) in between them.

> Input:  str[] = "ABC"

>Output:

        ABC
        AB C
        A BC
        A B C

### Solution

recursion.

### Code 


	public void printAll(String input) {
		if (input == null || input.length() <= 1) {
			// since we insert space in-between chars, so
			return;
		}
		int len = input.length();
		// len >= 2
		helper(input, len - 1);
	}

	private void helper(String s, int p) {
		if (p == 1) {
			System.out.println(s);
			// no insertion
			System.out.println(s.substring(0, 1) + " " + s.substring(1));
			// insert at position 1
		} else {
			helper(s, p - 1);
			helper(s.substring(0, p) + " " + s.substring(p), p - 1);
		}
	}
]]></content>
  </entry>
  
</feed>
