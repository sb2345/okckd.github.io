<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Question | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/question/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2015-01-11T22:58:10+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Number of Occurence of Given Sub-sequence]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/numer-of-occurrence-given-subsequence/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/numer-of-occurrence-given-subsequence</id>
    <content type="html"><![CDATA[### Question

[link](http://stackoverflow.com/questions/6877249/find-the-number-of-occurrences-of-a-subsequence-in-a-string)

> Given a digit '3141592653', find number of occurence of subsequence "123". Note that the sequence occurs twice:

    3141592653
     1    2  3
       1  2  3

> Output 2.

### Solution

Refer to __[LeetCode 115] Distinct Subsequences__. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Number of Distinct Sub-sequence]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/numer-of-distinct-subsequence/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/numer-of-distinct-subsequence</id>
    <content type="html"><![CDATA[### Question

[link](http://stackoverflow.com/questions/5151483/how-to-find-the-number-of-distinct-subsequences-of-a-string)

> Find the number of distinct subsequences of a string (include "" as a subsequence). 

> For example, Input 

    AAA 
    ABCDEFG 
    CODECRAFT 

> Output 

    4 
    128 
    496 

### Solution

In __[LeetCode 115] Distinct Subsequences__, we discuss finding occurence of a given subsequence. 

Now if we do not specify a subsequence, __we want the total number of distinct subsequence__. 

The solution is DP, with the following equation: 

    Let, 

    dp[i] = number of distinct subsequences ending with a[i]

    last[i] = last position of character i in the given string.

__Equation__: 

    dp[i] = dp[last[i] - 1] + ... + dp[i - 1]

The final result is: 

    Distinct Subsequences = dp[1] + ... dp[len - 1]

Example 1: 

    Input   : - A B C
    dp array: 1 1 2 4
    Total = 8

Example 2: 

    Input   : - A A C
    dp array: 1 1 1 3
    Total = 6

The code is posted below. 

### Optimize Solution

There is a good optimization of this DP solution, which is to __keep another dp array 'sum'__, which sum[i] = dp[1] + dp[2] + ... + dp[i]. The final answer would be sum[len - 1]. 

This nice idea is from [this post](http://stackoverflow.com/a/5152203). Credit goes to __IVlad__. 

### Code

to do
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] Longest Repeating Substring]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/longest-repeating-substring/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/longest-repeating-substring</id>
    <content type="html"><![CDATA[### Question

[link](http://www.careercup.com/question?id=9182781)

> Finding the longest repeated substring. 

> Example: "banana" ==> "ana"

### Solution

There are 2 solutions: Suffix array, and Suffix tree. 

__1. Suffix array__. Simple code, explained [here](http://www.careercup.com/question?id=9182781).

> Bentley's programming pearl book has the simplest implementation (less than 15 lines code) which sort all suffix, and then check common prefix length among adjacent suffix. The time complexity is O(n^2logn) for sorting the suffix (which has avg length of O(n)). 

A detailed step-by-step [explanation](http://nriverwang.blogspot.com/2013/04/longest-repeated-substring.html): 

    str = banana, its suffixes are:
    banana
    anana
    nana
    ana
    na
    a

after sort, the suffix array looks like:

    a
    ana
    anana
    banana
    na
    nana

Then for each two adjacent suffixes, check the length of the common prefix.

The answer is "ana" (if overlapping is allowed, otherwise, should be "an"). 

__2. Suffix tree__. Suggest by [this post](http://qr.ae/6W9yJ). 

> build a Suffix tree, then find the highest node with at least 2 descendants.

Or [this](http://www.careercup.com/question?id=9182781):

> a good solution is to create a suffix tree for the given word and then find the deepest internal node in that tree..

### Code

to do

http://stackoverflow.com/a/14422228]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LinkedIn] Find All Repeating Substring With Given Length]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/all-repeating-substring-given-length/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/all-repeating-substring-given-length</id>
    <content type="html"><![CDATA[### Question

[link](http://www.careercup.com/question?id=6495932900179968)

> Find all the repeating substring of specified length in a large string sequence.

> For e.g. 

    Input String: "ABCACBABC" 
    repeated sub-string length: 3 
    Output: ABC 

> eg. 

    Input String: "ABCABCA" 
    repeated sub-string length: 2 
    Output: AB, BC, CA

### Solution

Similar to __[Amazon] Longest Repeating Substring__, the best solution is to do __Suffix Tree__, or suffix array. We then need to print nodes on a certain level, who has more than 1 descendant. 

However, since the length of substring is given, we can also do simply iteration: insert all substring with given length into a HashSet, and check repetition. 

### Code

to do
https://github.com/techpanja/interviewproblems/blob/master/src/strings/repeatingstringsofspecifiedlength/RepeatingStringOfSpecificLength.java
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LinkedIn] All Distinct Subsequences With Given Length]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/all-distinct-subsequences-given-length%20-%20Copy/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/all-distinct-subsequences-given-length - Copy</id>
    <content type="html"><![CDATA[### Question

[link](http://11011110.livejournal.com/254164.html)

> Find a polynomial-time algorithm that takes a string of length n, and a number k, output the number of distinct k-character subsequences.

> For instance, input "food" and number k=2, output should be 4. There are four distinct 2-character subsequences of "food": "fo", "fd", "oo", and "od".

### Solution

Similar to __[Question] Number of distinct sub-sequence__, we solve this problem with DP. The dp equation is a bit difficult to write. 

The idea come from comment from [gareth_rees](http://11011110.livejournal.com/254164.html): 

> Let θ(S, k) be the number of distinct k-character subsequences in the string S of length n. 

> Clearly θ(S, k) = 1 if n = k or k = 0 

> and θ(S, k) = 0 if n < k. 

> Otherwise, choose 1 unique char from S, and deduct k by 1, then do the DP calculation with the remaining part of S. 

Look at this example: 

    θ("food", 2) = θ("ood", 1) + θ("od", 1) + θ("", 1)
    = (θ("od", 0) + θ("", 0)) + (θ("d", 0) + θ("", 0)) + 0
    = (1 + 1) + (1 + 1)
    = 4

__"food" is divided into 3 parts__. First part we choose "f" to be the first char, thus the value is θ("ood", 1). Second part we choose "o", and final part we choose "d". 


This is a very difficult DP question, but this explanation really makes the answer easier. Read my implementation below. 

### Code

to do
]]></content>
  </entry>
  
</feed>
