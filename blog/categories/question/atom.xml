<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: question | Shuatiblog.com]]></title>
  <link href="http://www.shuatiblog.com/blog/categories/question/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-10-13T00:32:42-05:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Largest Sub-square with Edges filled ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/largest-subsquare-with-edge-filled</id>
    <content type="html"><![CDATA[### Question

[link](www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html)

> Given a matrix where every element is either ‘O’ or ‘X’, find the largest sub-square surrounded by ‘X’. (meaning that the 4 edges are filled with 'X')

> Example Input:

     {'X', 'O', 'X', 'X', 'X'},
     {'X', 'X', 'X', 'X', 'X'},
     {'X', 'X', 'O', 'X', 'O'},
     {'X', 'X', 'X', 'X', 'X'},
     {'X', 'X', 'X', 'O', 'O'},


> Output: 3. The square submatrix starting at (1, 1) is the largest sub-squre. 

> Example Input:

     {'X', 'O', 'X', 'X', 'X', 'X'},
     {'X', 'O', 'X', 'X', 'O', 'X'},
     {'X', 'X', 'X', 'O', 'O', 'X'},
     {'X', 'X', 'X', 'X', 'X', 'X'},
     {'X', 'X', 'X', 'O', 'X', 'O'},

> Output: 4. The square submatrix starting at (0, 2) is the largest

### Solution

Read a very similar question - __[Question] Maximum Square Sub-matrix With All 1s__

Typical DP question. Now the solution is to build 2 arrays to cache info. One horizontally and one, vertical. 

> create two auxiliary arrays hor[N][N] and ver[N][N]. 

> hor[i][j] is the number of horizontal continuous ‘X’ characters till mat[i][j] in mat[][]. 

> ver[i][j] is the number of vertical continuous ‘X’ characters till mat[i][j] in mat[][]. 

    mat[6][6] =  X  O  X  X  X  X
                 X  O  X  X  O  X
                 X  X  X  O  O  X
                 O  X  X  X  X  X
                 X  X  X  O  X  O
                 O  O  X  O  O  O

    hor[6][6] = 1  0  1  2  3  4
                1  0  1  2  0  1
                1  2  3  0  0  1
                0  1  2  3  4  5
                1  2  3  0  1  0
                0  0  1  0  0  0

    ver[6][6] = 1  0  1  1  1  1
                2  0  2  2  0  2
                3  1  3  0  0  3
                0  2  4  1  1  4
                1  3  5  0  2  0
                0  0  6  0  0  0

After we got these, start from the bottom-right corner row by row up... For every mat[i][j], we compare hor[i][j] with ver[i][j] and pick the smaller one. 

All we need to do next, is to check the other 2 edges. This solution is O(n^3).

### Code 

C++ code provided by [G4G](www.geeksforgeeks.org/given-matrix-o-x-find-largest-subsquare-surrounded-x/index.html):

    int findSubSquare(int mat[][N])
    {
        int max = 1; // Initialize result

        // Initialize the left-top value in hor[][] and ver[][]
        int hor[N][N], ver[N][N];
        hor[0][0] = ver[0][0] = (mat[0][0] == 'X');

        // Fill values in hor[][] and ver[][]
        for (int i=0; i<N; i++)
        {
            for (int j=0; j<N; j++)
            {
                if (mat[i][j] == 'O')
                    ver[i][j] = hor[i][j] = 0;
                else
                {
                    hor[i][j] = (j==0)? 1: hor[i][j-1] + 1;
                    ver[i][j] = (i==0)? 1: ver[i-1][j] + 1;
                }
            }
        }

        // Start from the rightmost-bottommost corner element and find
        // the largest ssubsquare with the help of hor[][] and ver[][]
        for (int i = N-1; i>=1; i--)
        {
            for (int j = N-1; j>=1; j--)
            {
                // Find smaller of values in hor[][] and ver[][]
                // A Square can only be made by taking smaller
                // value
                int small = getMin(hor[i][j], ver[i][j]);

                // At this point, we are sure that there is a right
                // vertical line and bottom horizontal line of length
                // at least 'small'.

                // We found a bigger square if following conditions
                // are met:
                // 1)If side of square is greater than max.
                // 2)There is a left vertical line of length >= 'small'
                // 3)There is a top horizontal line of length >= 'small'
                while (small > max)
                {
                    if (ver[i][j-small+1] >= small &&
                        hor[i-small+1][j] >= small)
                    {
                        max = small;
                    }
                    small--;
                }
            }
        }
        return max;
    }
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Find Cloest Leaf in Binary Tree ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/closest-leaf-binary-tree</id>
    <content type="html"><![CDATA[### Question

[link](www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html)

> Given a Binary Tree and a key, find distance of the closest leaf.

> Examples:

              1
            /    \    
           2       3
                 /   \  
                5     6   
               /       \
              7         8
             / \       /
            9  10     11
            
    Closest key to '8' is '11', so distance is 1 for '8'
    Closest key to '3' is '2', so distance is 2 for '3'
    Closest key to '5' is either '9' or '10', so distance is 2 for '5'
    Closest key to '2' is '2' itself, so distance is 0 for '2' 

### Solution

> traverse the given tree in preorder and keep track of ancestors (in a caching data struture, either it's List or an array with a correct pointer)

When we find our target, we do 2 things: 

1. find __closest distance on lower subtrees of current node__.

1. for every ancester, find the __closest distance on lower subtrees__, then add with __distance to ancester__. 

Finally, return the smallest value seen above. 

### Code

Inspired by the code from [G4G](www.geeksforgeeks.org/find-closest-leaf-binary-tree/index.html)

	int answer;

	public int findClosest(TreeNode root, int key) {
		answer = Integer.MAX_VALUE;
		helper(root, key, new ArrayList<TreeNode>());
		return answer;
	}

	private void helper(TreeNode node, int key, List<TreeNode> path) {
		if (node == null) {
			return;
		} else if (node.val != key) {
			path.add(node);
			helper(node.left, key, path);
			helper(node.right, key, path);
			path.remove(path.size() - 1);
		} else {
			// key matches with current node value
			answer = lenToLowerLeaf(node);
			// answer initially = cloest leaf from lower

			int len = path.size();
			for (int i = 0; i < len; i++) {
				// for every ancestor, calculate distance and compare
				int ithToLowerLeaf = lenToLowerLeaf(path.get(i));
				answer = Math.min(answer, (len - i) + ithToLowerLeaf);
			}
		}
	}

	private int lenToLowerLeaf(TreeNode node) {
		if (node == null) {
			return Integer.MAX_VALUE;
		} else if (node.left == null && node.right == null) {
			return 0;
		} else {
			return 1 + Math.min(lenToLowerLeaf(node.left), lenToLowerLeaf(node.right));
		}
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] All Strings by Placing Spaces ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space/"/>
    <updated>2015-10-07T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/10/07/all-string-placing-space</id>
    <content type="html"><![CDATA[### Question

[link](www.geeksforgeeks.org/print-possible-strings-can-made-placing-spaces/index.html)

> Given a string, print all possible strings that can be made by placing spaces (zero or one) in between them.

> Input:  str[] = "ABC"

>Output:

        ABC
        AB C
        A BC
        A B C

### Solution

recursion.

### Code 


	public void printAll(String input) {
		if (input == null || input.length() <= 1) {
			// since we insert space in-between chars, so
			return;
		}
		int len = input.length();
		// len >= 2
		helper(input, len - 1);
	}

	private void helper(String s, int p) {
		if (p == 1) {
			System.out.println(s);
			// no insertion
			System.out.println(s.substring(0, 1) + " " + s.substring(1));
			// insert at position 1
		} else {
			helper(s, p - 1);
			helper(s.substring(0, p) + " " + s.substring(p), p - 1);
		}
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Palantir] Sort Letters Given Lexicographic Order ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/05/21/sort-letters-given-lexicographic-order/"/>
    <updated>2015-05-21T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/05/21/sort-letters-given-lexicographic-order</id>
    <content type="html"><![CDATA[### Question

[link](http://quant365.com/viewtopic.php?t=11)

> Sort the letters in one word by the order they occur in another in linear time. 

### Solution

This 

text

is

used 

to

stop

you

from 

looking

at

the 

answer

immediately

The answer is __counting sort__.

### Code 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[UVa] Wooden Sticks ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/04/14/wooden-stick/"/>
    <updated>2015-04-14T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/04/14/wooden-stick</id>
    <content type="html"><![CDATA[### Question 

[link](https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=323)

<body>There is a pile of <i>n </i>wooden sticks. The length and weight of
each stick are known in advance. The sticks are
to be processed by a woodworking machine in one by one fashion. It
needs some time, called setup time, for
the machine to prepare processing a stick. The setup times are
associated with cleaning operations and
changing tools and shapes in the machine. The setup times of the
woodworking machine are given as follows:
<ul>
<li>The setup time for the first wooden
stick is 1 minute.</li>
<li>
Right after processing a stick of length <i>l </i>and weight <i>w
</i>, the machine will need no setup time for a stick
of length <i>l</i>' and weight <i>w</i>' if <i>l </i>&lt;=<i>l</i>'
and <i>w </i>&lt;=<i>w</i>' . </li>
</ul>
Otherwise, it will need 1 minute for setup.<br>
You are to find the minimum setup time to process a given pile of <i>n
</i>wooden sticks. For example, if you have
five sticks whose pairs of length and weight are (4,9), (5,2), (2,1), (3,5),
and (1,4) then the minimum setup
time should be 2 minutes since there is a sequence of pairs (1,4),
(3,5), (4,9), (2,1), (5,2).
<h2><font size="4" color="#ff0000"><a name="SECTION0001001000000000000000">Input</a> <br>
</font></h2>
The input consists of <i>T</i> test cases. The number of test cases (<i>T</i>) is given in the first line of the input file. Each
test case consists of two lines: The first line has an integer <i>n</i>,
1&lt;=<i>n&lt;=</i>5000, that represents the number of
wooden sticks in the test case, and the second line contains 2<i>n </i>positive
integers <i>l<sub>1</sub></i>, <i>w<sub>1</sub></i>, <i>l<sub>2</sub></i>,
<i>w<sub>2</sub></i>, ..., <i>l<sub>n</sub></i>, <i>w<sub>n</sub></i>,
each of magnitude at most 10000, where <i>l<sub>i</sub> </i>and <i>w<sub>i</sub>
</i>are the length and weight of the <i>i </i>th wooden stick,
respectively. The 2<i>n </i>integers are delimited by one or
more spaces.

<h2><font size="4" color="#ff0000"><a name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
The output should contain the minimum setup time in minutes, one per
line.
<h2><font size="4" color="#ff0000"><a name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>3
5
4 9 5 2 2 1 3 5 1 4
3
2 2 1 1 2 2
3
1 3 2 2 3 1
</pre>

<h2><font size="4" color="#ff0000"><a name="SECTION000
1004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>2
1
3
</pre>

</body>

### Analysis

This question is a little similar to [[CC150v5] 9.10 Stack Up the Boxes](/blog/2014/09/17/stack-up-boxes/), yet different. 

### Solution

Solution quoted from [脚本百事通](http://www.csdn123.com/html/blogs/20130823/58042.htm): 

>按长度从小到大排序, 若长度相同, 则按重量从小到大排序(先按重量再按长度也行)

>然后, 我们针对当前木棍, 与剩下的木棍比较, 满足 w1 <= w2 && l1 <= l2 的, 就更新一下当前棍, 并标记~

>当所有木棍都被编组后 输出到底设置了几次~

[ref1](http://www.android100.org/html/201502/03/109926.html), [ref2](http://blog.csdn.net/keshuai19940722/article/details/10735689)

### Code

The following Java code is written by me

    public int count(Pair[] points) {
        Arrays.sort(points, new PointComparator());
        // now the array is sorted with Point.x
        int total = 0;
        int p = 0;
        int len = points.length;

        while (p < len) {
            // find the next non-null point
            while (p < len && points[p] == null) {
                p++;
            }
            if (p == len) {
                break;
            }
            // use points[p] as the first elements in the queue
            Pair temp = copy(points[p]);
            points[p] = null;
            total++;

            // then mark all elements that follow points[p]
            for (int k = p + 1; k < len; k++) {
                if (points[k] == null || points[k].y < temp.y) {
                    continue;
                }
                temp = copy(points[k]);
                points[k] = null;
            }
            p++;
        }
        return total;
    }

    Pair copy(Pair p) {
        Pair newP = new Pair(p.x, p.y);
        return newP;
    }

    class PointComparator implements Comparator<Pair> {

        @Override
        public int compare(Pair p1, Pair p2) {
            return p1.x - p2.x;
        }
    }
]]></content>
  </entry>
  
</feed>
