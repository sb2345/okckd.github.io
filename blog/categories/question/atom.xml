<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: question | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/question/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2015-01-24T17:52:26+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Palantir] Largest basin size in matrix]]></title>
    <link href="http://okckd.github.io/blog/2015/01/20/basin-size-in-matrix/"/>
    <updated>2015-01-20T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/20/basin-size-in-matrix</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=15380670">link</a></p>

<p>A group of farmers has some elevation data, and we’re going to help them understand how rainfall flows over their farmland.</p>

<p>We’ll represent the land as a two-dimensional array of altitudes and use the following model, based on the idea that water flows downhill:</p>

<p>If a cell’s neighboring cells all have higher altitudes, we call this cell a sink; water collects in sinks. Two cells are neighbors if the rows and columns each differ by at most one. Hence an interior cell will have eight neighbors, a cell on the edge will have five neighbors, and a cell in a corner will have three neighbors.</p>

<p>Otherwise, water will flow to the neighboring cell with the lowest altitude. If a cell is not a sink, you may assume it has a unique lowest neighbor and that this neighbor will be lower than the cell.
Cells that drain into the same sink – directly or indirectly – are said to be part of the same basin.</p>

<p>Your challenge is to partition the map into basins. In particular, given a map of elevations, your code should partition the map into basins and output the sizes of the basins, in descending order.</p>

<p>Assume the elevation maps are square. Input will begin with a line with one integer, S, the height (and width) of the map. The next S lines will each contain a row of the map, each with S integers – the elevations of the S cells in the row.  Some farmers have small land plots such as the examples below, while some have larger plots.  However, in no case will the total size of the farmland exceed 1000x1000.</p>

<p>Note: The input uses unix line endings (\n). If you try to view the sample inputs on a windows machine with a program that does not convert line endings (like Notepad), you will see the input appear all on a single line.</p>

<p>Your code should output a space-separated list of the basin sizes, in descending order. (Trailing spaces are ignored.)</p>

<p>While correctness and performance are the most important parts of this problem, a human will be reading your solution, so please make an effort to submit clean, readable code. In particular, do not write code as if you were solving a problem for a competition.</p>

<p>A few examples are below.</p>

<p>Input:</p>

<pre><code>       3
       1 5 2
       2 4 7
       3 6 9
</code></pre>

<p>Output:</p>

<pre><code>            7 2
</code></pre>

<p>The basins, labeled with A’s and B’s, are:</p>

<pre><code>       A A B
       A A B
       A A A
</code></pre>

<p>Input:</p>

<pre><code>       1
       10
</code></pre>

<p>Output:</p>

<pre><code>       1
</code></pre>

<p>There is only one basin in this case.</p>

<p>Input:</p>

<pre><code>       5
       1 0 2 5 8
       2 3 4 7 9
       3 5 7 9 9
       1 2 5 5 3
       3 3 5 1 0
</code></pre>

<p>Output:</p>

<pre><code>       10 8 7
</code></pre>

<p>The basins, labeled with A’s, B’s, and C’s, are:</p>

<pre><code>       A A A A A
       A A A A A
       B B B C C
       B B C C C
       B B C C C
</code></pre>

<p>Input:</p>

<pre><code>       4
       0 3 2 3
       3 2 1 4
       3 4 3 3
       5 5 2 0
</code></pre>

<p>Output:</p>

<pre><code>       6 5 5
</code></pre>

<p>The basins, labeled with A’s, B’s, and C’s, are:</p>

<pre><code>       A A B B
       A A B B
       A B C C
       A C C C
</code></pre>

<h3>Solution</h3>

<p>I did not find a &lsquo;best&rsquo; solution online, but there&rsquo;s a good enough explanation available <a href="http://stackoverflow.com/questions/24336686/find-the-largest-basin-size-in-a-given-matrix">here</a>:</p>

<ol>
<li><p>First store index according to their heights.</p></li>
<li><p>Then iterate from smallest height to largest height.</p></li>
<li><p>If current index is not visited, make it Basin surface (where water can collect), and make all higher neighbours as Non-Basin surface.</p></li>
<li><p>Repeat step 3 till all indexes are visited.</p></li>
<li><p>DFS find each basin</p></li>
</ol>


<h3>Code</h3>

<p>I post my solution written in 2013.</p>

<pre><code>public class MeSolution2013 {

    public static void main(String args[]) {

        String inputFile;
        int testCaseNumber = 1;

        while (true) {
            inputFile = "input" + testCaseNumber + ".txt";
            BufferedReader in;
            try {
                URI uri = MeSolution2013.class.getResource(inputFile).toURI();
                in = new BufferedReader(new FileReader(new File(uri)));
            } catch (Exception e) {
                // there is not more test cases
                break;
            }

            Scanner sc = new Scanner(in);
            int length = sc.nextInt();
            int[][] elevation = new int[length][length];
            for (int i = 0; i &lt; length; i++) {
                for (int j = 0; j &lt; length; j++) {
                    elevation[i][j] = sc.nextInt();
                }
            }

            List&lt;Pair&gt; sinkList = new ArrayList&lt;Pair&gt;();

            // first find out all sink nodes
            for (int i = 0; i &lt; length; i++) {
                for (int j = 0; j &lt; length; j++) {
                    if (elevation[i][j] &lt; lowestNeighbor(i, j, elevation)) {
                        // (i,j) is a sink point
                        sinkList.add(new Pair(i, j));
                    }
                }
            }

            // then for each sink node, return the count
            int[] basinSize = new int[sinkList.size()];
            for (int i = 0; i &lt; sinkList.size(); i++) {
                basinSize[i] = count(sinkList.get(i).X, sinkList.get(i).Y,
                        elevation);
            }
            Arrays.sort(basinSize);

            for (int i = sinkList.size() - 1; i &gt;= 0; i--) {
                System.out.print(basinSize[i]);
                if (i != 0)
                    System.out.print(" ");
            }
            System.out.println();
            testCaseNumber++;
        }
    }

    static int count(int x, int y, int[][] ele) {

        int num = 1;

        // if the neighbour is higher than current, add count to current count
        // if all neighbours are lower than current, return 1

        // diagonal neighbors
        if (withinBound(x - 1, y, ele) &amp;&amp; rainFlowFrom(x, y, x - 1, y, ele)) { // upper
                                                                                // elment
            num += count(x - 1, y, ele);
        }
        if (withinBound(x + 1, y, ele) &amp;&amp; rainFlowFrom(x, y, x + 1, y, ele)) { // lower
                                                                                // element
            num += count(x + 1, y, ele);
        }
        if (withinBound(x, y - 1, ele) &amp;&amp; rainFlowFrom(x, y, x, y - 1, ele)) { // left
                                                                                // hand
                                                                                // side
            num += count(x, y - 1, ele);
        }
        if (withinBound(x, y + 1, ele) &amp;&amp; rainFlowFrom(x, y, x, y + 1, ele)) { // right
                                                                                // hand
                                                                                // side
            num += count(x, y + 1, ele);
        }

        // diagonal neighbors
        if (withinBound(x - 1, y - 1, ele)
                &amp;&amp; rainFlowFrom(x, y, x - 1, y - 1, ele)) { // upper elment
            num += count(x - 1, y - 1, ele);
        }
        if (withinBound(x + 1, y + 1, ele)
                &amp;&amp; rainFlowFrom(x, y, x + 1, y + 1, ele)) { // lower element
            num += count(x + 1, y + 1, ele);
        }
        if (withinBound(x + 1, y - 1, ele)
                &amp;&amp; rainFlowFrom(x, y, x + 1, y - 1, ele)) { // left hand side
            num += count(x + 1, y - 1, ele);
        }
        if (withinBound(x - 1, y + 1, ele)
                &amp;&amp; rainFlowFrom(x, y, x - 1, y + 1, ele)) { // right hand side
            num += count(x - 1, y + 1, ele);
        }

        return num;
    }

    static Boolean withinBound(int x, int y, int[][] ele) {
        int bound = ele.length;
        return (x &gt;= 0 &amp;&amp; x &lt; bound &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; bound);
    }

    static Boolean rainFlowFrom(int a, int b, int c, int d, int[][] ele) {
        // rain in (c,d) flows into (a,b).
        if (ele[a][b] &gt;= ele[c][d])
            // if (a,b) is higher than (c,d), impossible to flow this way
            return false;

        int lowest = lowestNeighbor(c, d, ele);

        return (ele[a][b] == lowest);
        // the question states "you may assume it has a unique lowest neighbor"
        // so if flow to (a,b), then that is the unique lowest height.
    }

    static int lowestNeighbor(int a, int b, int[][] ele) {
        int height = 9999999;

        // adjacent neighbor
        if (withinBound(a - 1, b, ele) &amp;&amp; ele[a - 1][b] &lt; height) {
            height = ele[a - 1][b];
        }
        if (withinBound(a + 1, b, ele) &amp;&amp; ele[a + 1][b] &lt; height) {
            height = ele[a + 1][b];
        }
        if (withinBound(a, b - 1, ele) &amp;&amp; ele[a][b - 1] &lt; height) {
            height = ele[a][b - 1];
        }
        if (withinBound(a, b + 1, ele) &amp;&amp; ele[a][b + 1] &lt; height) {
            height = ele[a][b + 1];
        }

        // diagonal neighbor
        if (withinBound(a - 1, b - 1, ele) &amp;&amp; ele[a - 1][b - 1] &lt; height) {
            height = ele[a - 1][b - 1];
        }
        if (withinBound(a + 1, b - 1, ele) &amp;&amp; ele[a + 1][b - 1] &lt; height) {
            height = ele[a + 1][b - 1];
        }
        if (withinBound(a - 1, b + 1, ele) &amp;&amp; ele[a - 1][b + 1] &lt; height) {
            height = ele[a - 1][b + 1];
        }
        if (withinBound(a + 1, b + 1, ele) &amp;&amp; ele[a + 1][b + 1] &lt; height) {
            height = ele[a + 1][b + 1];
        }
        return height;
    }
}

class Pair {

    public int X;
    public int Y;

    public Pair(int _x, int _y) {
        X = _x;
        Y = _y;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Check if given point inside polygon ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/19/check-if-point-inside-polygon/"/>
    <updated>2015-01-19T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/19/check-if-point-inside-polygon</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/how-to-check-if-a-given-point-lies-inside-a-polygon/">link</a></p>

<blockquote><p>Given a polygon and a point ‘p’, find if ‘p’ lies inside the polygon or not. The points lying on the border are considered inside.</p></blockquote>

<p>{% img middle /assets/images/point-in-polygon.png %}</p>

<h3>Solution</h3>

<p>Prerequisite reading: <strong>[Question] Check if two line segments intersect</strong>.</p>

<p>Suggested by G4G, this is a simple idea to check:</p>

<p>{% img middle /assets/images/polygon31-300x169.png %}</p>

<ol>
<li><p>Draw a horizontal line to the right of each point and extend it to infinity</p></li>
<li><p>Count the number of times the line intersects with polygon edges.</p></li>
<li><p>A point is inside the polygon if either count of intersections is odd or point lies on an edge of polygon.</p></li>
<li><p>Note the special case of point &lsquo;g&rsquo;.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Check if two line segments intersect ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/19/check-if-line-segment-intersect/"/>
    <updated>2015-01-19T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/19/check-if-line-segment-intersect</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/">link</a></p>

<blockquote><p>Given two line segments (p1, q1) and (p2, q2), check if 2 line segments intersect.</p></blockquote>

<h3>Orientation</h3>

<p>Considering 3 pointer, orientation can be:</p>

<ol>
<li>counterclockwise</li>
<li>clockwise</li>
<li>colinear (not considering direction)</li>
</ol>


<p>{% img middle /assets/images/line-orientation.png %}</p>

<p>Note that orientation only tells the order and sequence relationship of 3 points. <strong>It tells nothing about intersection</strong>.</p>

<h3>Intersection</h3>

<p>Considering 2 line segments: (p1,q1) and (p2,q2).</p>

<h4>Case 1: general</h4>

<p>Two line segment intersect if <strong>BOTH</strong> the 2 conditions hold:</p>

<ol>
<li>(p1, q1, p2) and (p1, q1, q2) have different orientations and</li>
<li>(p2, q2, p1) and (p2, q2, q1) have different orientations</li>
</ol>


<p>{% img middle /assets/images/GeneralCaseExamples1.png %}</p>

<p>{% img middle /assets/images/examplesGeneralCase211.png %}</p>

<h4>Case 2: special</h4>

<p>The speical case is: <strong>what if all 4 pointers (p1, q1, p2, q2) are all on the same line</strong>!!! Well, this definitely can happen.</p>

<p>If so, check if the values of x-axis and y-axis intersect. I.e. the below 2 cases:</p>

<p>{% img middle /assets/images/examplesSpecialCase1.png %}</p>

<h3>Code</h3>

<p>Translated from G4G:</p>

<pre><code>public boolean intersect(Pair p1, Pair q1, Pair p2, Pair q2) {

    int o1 = orientation(p1, q1, p2);
    int o2 = orientation(p1, q1, q2);
    int o3 = orientation(p2, q2, p1);
    int o4 = orientation(p2, q2, q1);

    // General case
    if (o1 != o2 &amp;&amp; o3 != o4) {
        // 2 lines intersect
        return true;
    }

    // Special Cases
    Segment seg1 = new Segment(p1, q1);
    Segment seg2 = new Segment(p2, q2);

    // p1, q1 and p2 are colinear and p2 lies on segment p1q1
    if (o1 == 0 &amp;&amp; onSegment(seg1, p2))
        return true;

    // p1, q1 and p2 are colinear and q2 lies on segment p1q1
    if (o2 == 0 &amp;&amp; onSegment(seg1, q2))
        return true;

    // p2, q2 and p1 are colinear and p1 lies on segment p2q2
    if (o3 == 0 &amp;&amp; onSegment(seg2, p1))
        return true;

    // p2, q2 and q1 are colinear and q1 lies on segment p2q2
    if (o4 == 0 &amp;&amp; onSegment(seg2, q1))
        return true;

    return false; // Doesn't fall in any of the above cases
}

private boolean onSegment(Segment seg, Pair q) {
    // check if q lies on line segment seg(p1, p2)
    if (q.x &lt;= Math.max(seg.p1.x, seg.p2.x)
            &amp;&amp; q.x &gt;= Math.min(seg.p1.x, seg.p2.x)
            &amp;&amp; q.y &lt;= Math.max(seg.p1.y, seg.p2.y)
            &amp;&amp; q.y &gt;= Math.min(seg.p1.y, seg.p2.y))
        return true;

    return false;
}

private int orientation(Pair first, Pair second, Pair third) {
    int val = (second.y - first.y) * (third.x - second.x)
            - (second.x - first.x) * (third.y - second.y);
    if (val == 0) {
        // colinear
        return 0;
    } else {
        // clock or counterclock wise (1 or -1)
        return val / Math.abs(val);
    }
}

class Segment {
    Pair p1;
    Pair p2;

    public Segment(Pair p1, Pair p2) {
        this.p1 = p1;
        this.p2 = p2;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Maximum square sub-matrix with all 1s ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/18/max-squre-with-all-1/"/>
    <updated>2015-01-18T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/18/max-squre-with-all-1</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/">link</a></p>

<blockquote><p>Given a binary matrix, find out the maximum size square sub-matrix with all 1s. For example, consider the below binary matrix.</p></blockquote>

<pre><code>   0  1  1  0  1 
   1  1  0  1  0 
   0  1  1  1  0
   1  1  1  1  0
   1  1  1  1  1
   0  0  0  0  0
</code></pre>

<blockquote><p>The maximum square sub-matrix with all set bits is size 9. Note we only find <strong>square</strong>, not rectangles! (this makes it much easier)</p></blockquote>

<h3>Solution</h3>

<p>Since <strong>square only</strong>, we can use DP. <a href="http://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/">Quoted answer</a> below:</p>

<blockquote><p>Let the given binary matrix be M[R][C]. The idea of the algorithm is to construct an auxiliary size matrix S[][] in which each entry S[i][j] represents size of the square sub-matrix with all 1s including M[i][j] where M[i][j] is the rightmost and bottommost entry in sub-matrix.</p>

<ol>
<li><p>Construct a sum matrix S[R][C] for the given M[R][C].</p></li>
<li><p> Copy first row and first columns as it is from M[][] to S[][]</p></li>
<li><p> For other entries, use following expressions to construct S[][]</p></li>
</ol>
</blockquote>

<pre><code>         If M[i][j] is 1 then
            S[i][j] = min(S[i][j-1], S[i-1][j], S[i-1][j-1]) + 1
         Else /*If M[i][j] is 0*/
            S[i][j] = 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Amazon] Lexicographic rank of a string ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/18/Lexicographic-rank-of-string/"/>
    <updated>2015-01-18T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/18/Lexicographic-rank-of-string</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/lexicographic-rank-of-a-string/">link</a></p>

<blockquote><p>Given a string, find its rank among all its permutations sorted lexicographically.</p>

<p>For example, rank of “abc” is 1, rank of “acb” is 2, and rank of “cba” is 6.</p></blockquote>

<h3>Solution</h3>

<p>Let the given string be “<strong>STRING</strong>”. In the input string, ‘S’ is the first character. There are total 6 characters and <strong>4 of them are smaller than ‘S’</strong>. So there can be <strong>4 * 5!</strong> smaller strings where first character is smaller than ‘S’, like following:</p>

<pre><code>R X X X X X
I X X X X X
N X X X X X
G X X X X X
</code></pre>

<p>Repeat the same process for T, and we get:</p>

<pre><code>Rank = 4*5! + 4*4! + 3*3! + 1*2! + 1*1! + 0*0! = 597
</code></pre>

<h3>Code</h3>

<pre><code>public int getRank(String input) {
    if (input == null || input.length() == 0) {
        return 0;
    }
    input = input.toUpperCase();
    return helper(input) + 1;
}

public int helper(String input) {
    if (input == null || input.length() == 0) {
        return 0;
    }
    char headChar = input.charAt(0);
    int countSmallerThanHead = 0;
    for (char ch : input.toCharArray()) {
        if (ch &lt; headChar) {
            countSmallerThanHead++;
        }
    }
    return countSmallerThanHead * Common.factorial(input.length() - 1)
            + helper(input.substring(1));
}
</code></pre>
]]></content>
  </entry>
  
</feed>
