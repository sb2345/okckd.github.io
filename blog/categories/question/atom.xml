<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Question | My Octopress Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/question/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-12T00:47:33+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Question] Maximum Circular Subarray Sum]]></title>
    <link href="http://okckd.github.io/blog/2014/08/11/max-circular-subarray/"/>
    <updated>2014-08-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/11/max-circular-subarray</id>
    <content type="html"><![CDATA[### Question 

[link](http://www.itint5.com/oj/#9)

> Given n numbers (both +ve and -ve), arranged in a circle, fnd the maximum sum of consecutive number

### Solution

First pass: find max subarray sum.

Second pass: find min subarray sum, and subtract it from total sum. 

Suggested on [G4G](http://www.geeksforgeeks.org/maximum-contiguous-circular-sum/) 

### Code

__written by me__

    public int maxConsSum2(int[] arr) {
		if (arr == null || arr.length == 0) {
			return 0;
		}
        int soFar = 0;
		int max = 0;
		int totalSum = 0;
		for (Integer i: arr) {
			totalSum += i;
			// totalSum is used in next step
			soFar += i;
			soFar = Math.max(soFar, 0);
			max = Math.max(max, soFar);
		}
		int min = 0;
		// calculate the min subarray
		for (Integer i: arr) {
			soFar += i;
			soFar = Math.min(soFar, 0);
			min = Math.min(min, soFar);
		}
		return Math.max(max, totalSum - min);
    }
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Test Command Line Copy]]></title>
    <link href="http://okckd.github.io/blog/2014/08/09/Test-command-line-copy/"/>
    <updated>2014-08-09T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/09/Test-command-line-copy</id>
    <content type="html"><![CDATA[### Question 

[link](http://stackoverflow.com/questions/6591652/how-do-i-test-the-copy-command-in-the-windows-environment)

> testing the copy command in windows environment 

### Solution

[The most important point](http://stackoverflow.com/a/6591999) is to __come up with different domains of inputs and scenarios__. 

### Copying between:

1. network share
1. A really slow network share across the Internet
1. partitions
1. disks
1. disks of different types (flash, usb, external sata, SSD, etc...)
1. directories
1. within the same directory

### Naming

1. Normal file name
1. Filename that exceeds 8.3 (verylongfilename.whatever)
1. Copying a very long file name, but referencing it by it's 8.3 name (copy verylo~1.wha d:\)
1. A full directory path that exeeds MAX_PATH (260) characters (e.g. c:\a\very\long\directory\name\that\goes\on\forever\in\length......foo.txt)
1. By absolute addressing (\\?\\c:\foo\foo.txt)
1. wildcards (e.g. *.* *.txt foo?.txt )
1. A filename with unicode characters
1. A filename with illegal characters in it (there are creative ways to get these files on disk)

### Attributes

1. Testing with different file attributes (read-only, hidden, system, archive, etc...)
1. Validate timestamp is preserved across copies
1. Validate timestamp is preserved across network file share copies when the destination machine is in another timezone
1. NTFS ACLs are preserved

### Addressing types

1. reference by absolute path (e.g. copy c:\some\directory\foo.txt c:\other\place\foo.txt)
1. reference by relative path (e.g. copy ..\..\documents\whatever\foo.txt subdirectory/foo.txt)
1. By absolute drive letter into current working directoroy of destination (with no path (e.g. copy foo.txt d:)
1. Network share mounted to a drive letter

### Failure cases, edge cases, and hack attacks

1. Try to copy a file onto itself (e.g copy c:\foo.txt c:\foo.txt)
1. Copy when the network share is down.
1. Unplug the network cable in the middle of a network file copy
1. copy to a read only directory
1. copy when the source file is locked.
1. copy the when destination file exists but the destination file exists and is read only
1. Detach the external disk right before the file copy starts
1. disk is near full (But would be full before the entire copy finishes)
1. disk is full
1. Unplug the power cable in the middle of the copy!
1. During a very long copy, start another copy with the same source file, but to another destination
1. During a very long copy, start another copy with a different source file, but the the same destination
1. During a very long copy, start another copy with the same source and destination files!

### File types

1. ascii file
1. unicode file
1. binary file

### Environments

1. RAID configurations
1. FAT and NTFS
1. Windows XP, Vista, 7, Server 2003, etc... (you can quantify this by asking the requirement of "which OS" up front)
1. Virtual Machine (VMWare, virtual PC, hypervisor, etc...)
1. Intel and AMD
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Max Sum of Non-Consecutive Elements]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Max-sum-non-consecutive/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Max-sum-non-consecutive</id>
    <content type="html"><![CDATA[### Question 

[link](http://tech-queries.blogspot.sg/2009/05/max-possible-sum-of-non-consecutive.html)

> There is an integer array consisting positive numbers only. 

> Find maximum possible sum of elements such that there are no 2 consecutive elements present in the sum.

### Solution

It's a little tricky to write the equation. Always remember the __basic principle of DP__ is to assume that solution is found for (i -1), and then we calculate solution for input (i). 

__Don't miss the (i-1) part__. 

### Code

__written by me__

	public int maxSumNonConsec(int[] input) {
		int len = input.length;
		int[] dp = new int[len];
		dp[0] = input[0];
		dp[1] = Math.max(input[0], input[1]);
		for (int i = 2; i < len; i++) {
			dp[i] = Math.max(dp[i - 1], input[i] + dp[i - 2]);
		}
		return dp[len - 1];
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Decimal to Hexadecimal]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Decimal-to-Hex/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Decimal-to-Hex</id>
    <content type="html"><![CDATA[### Question 

[link](http://stackoverflow.com/questions/13465098/decimal-to-hexadecimal-converter-in-java)

> Decimal to Hexadecimal conversion. 

### Solution

Convert binary to hex as a group of 4 bits. 

Read code. 

### Code

__written by me__

	private final char[] hexDigits = { '0', '1', '2', '3', '4', '5', '6', '7',
			'8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
	private final int flag = 0x0F;

	public String decToHex(int dec) {
		char[] hex = new char[8];
		for (int i = 7; i >= 0; i--) {
			int oneDigit = flag & dec;
			dec >>= 4;
			hex[i] = hexDigits[oneDigit];
		}
		return String.valueOf(hex);
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Question] Add Integers Without +/++]]></title>
    <link href="http://okckd.github.io/blog/2014/08/08/Add-integer-without-plus-sign/"/>
    <updated>2014-08-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/08/Add-integer-without-plus-sign</id>
    <content type="html"><![CDATA[### Question 

[link](http://javarevisited.blogspot.sg/2013/06/how-to-add-two-integer-numbers-without-plus-arithmetic-operator-java-example.html)

> Add two numbers (integers) without using + or plus arithmetic operator.

### Solution

__Bit operations__. 

We could not do this in 1 pass, because multiple rounding issues. 

So we do it in while-loop then! 2 solutions available: __iteratively and recursively__. 

### Code

__written by me__

	public int add(int x, int y) {
		// add y into x (and y results to 0)
		while (y != 0) {
			int carry = x & y;
			int sum = x ^ y;
			x = sum;
			y = carry << 1;
		}
		return x;
	}

__recursive__

	public int add2(int x, int y) {
		if (y == 0) {
			return x;
		}
		int carry = (x & y) << 1;
		return add2(x ^ y, carry);
	}
]]></content>
  </entry>
  
</feed>
