<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java oop | Shuatiblog.com]]></title>
  <link href="www.shuatiblog.com/blog/categories/java-oop/atom.xml" rel="self"/>
  <link href="www.shuatiblog.com/"/>
  <updated>2015-04-15T17:31:27+08:00</updated>
  <id>www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Can abstract class have no abstract method ]]></title>
    <link href="www.shuatiblog.com/blog/2015/02/09/abstract-class-without-abstract-method/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/02/09/abstract-class-without-abstract-method</id>
    <content type="html"><![CDATA[### Can abstract class have constructor

[Yes, it can](http://www.geeksforgeeks.org/abstract-classes-in-java/). 

In this way, we create classes that cannot be instantiated, but can only be inherited.

For example, Java template pattern.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Can abstract class have constructor ]]></title>
    <link href="www.shuatiblog.com/blog/2015/02/09/abstract-class-constructor/"/>
    <updated>2015-02-09T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/02/09/abstract-class-constructor</id>
    <content type="html"><![CDATA[### Can abstract class have constructor

[Yes, it can](http://www.mitbbs.com/article_t/JobHunting/32257933.html). However, if we create an instance using it, it's error. 

Consider [this example](http://www.geeksforgeeks.org/abstract-classes-in-java/): 

abstract class Base {
    Base() { System.out.println("Base Constructor Called"); }
    abstract void fun();
}
class Derived extends Base {
    Derived() { System.out.println("Derived Constructor Called"); }
    void fun() { System.out.println("Derived fun() called"); }
}
class Main {
    public static void main(String args[]) { 
       Derived d = new Derived();
    }
}

Output:

    Base Constructor Called
    Derived Constructor Called

### More info on constructor: 

The [constructor in an abstract class](http://stackoverflow.com/a/261159): 

1. is used when you want to perform some initialization
1. you may define more than one constructor (with different arguments)
1. if you don't define a constructor, then the compiler will automatically generate one for you.
1. your subclass constructor have to call a constructor from the abstract class
1. you can define all your constructors protected (cuz making them public is pointless)

Constructor of abstract class can be used in __[Template Pattern](http://www.tutorialspoint.com/design_pattern/template_pattern.htm)__, where the template is defined as a abstract class. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] PubSub (Publish–subscribe) pattern ]]></title>
    <link href="www.shuatiblog.com/blog/2015/02/05/pubsub-pattern/"/>
    <updated>2015-02-05T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/02/05/pubsub-pattern</id>
    <content type="html"><![CDATA[### Publish–subscribe pattern

__[The publish–subscribe pattern](http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern) is a messaging pattern__ where senders of messages, called publishers, do not send messages directly to specific subscribers. Instead, published messages are characterized into classes without knowledge of subscribers. 

Similarly, subscribers express interest in one or more classes, without knowledge of what publishers there are. 

1. greater network scalability
1. a more dynamic network topology
1. decreased flexibility to modify the Publisher and its structure of the data published.

Pub/sub is typically a part of a larger __message-oriented middleware system__. e.g. Java Message Service (JMS). 

### Difference w/ observer pattern

Refer to __[Java OOP] Observer pattern__ or [this link](http://stackoverflow.com/questions/15594905/difference-between-observer-pub-sub-and-data-binding): 

#### Observer, or Observable/Observer:

> A design pattern by which an object is imbued with the ability to notify others of specific events - typically done using actual events, which are kind of like slots in the object with the shape of a specific function/method. The observable is the one who provides notifications, and the observer receives those notifications. In .net, the observable can expose an event and the observer subscribes to that event with an "event handler"shaped hook. No assumptions are made about the specific mechanism which notifications occur, nor about the number of observers one observable can notify.

#### Pub/Sub:

> Another name (perhaps with more "broadcast" semantics) of the Observable/Observer pattern, which usually implies a more "dynamic" flavor - observers can subscribe or unsubscribe to notifications and one observable can "shout out" to multiple observers. In .net, one can use the standard events for this, since events are a form of MulticastDelegate, and so can support delivery of events to multiple subscribers, and also support unsubscription. Pub/sub has a slightly different meaning in certain contexts, usually involving more "anonymity" between event and eventer, which can be facilitated by any number of abstractions, usually involving some "middle man" (such as a message queue) who knows all parties, but the individual parties don't know about each other.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Java Vector and ArrayList ]]></title>
    <link href="www.shuatiblog.com/blog/2015/01/20/java-vector-arraylist/"/>
    <updated>2015-01-20T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/01/20/java-vector-arraylist</id>
    <content type="html"><![CDATA[### Difference

1. Vectors are synchronized, ArrayLists are not.

1. Data Growth Methods

    [A Vector defaults to](http://stackoverflow.com/a/2986307) doubling the size of its array, while the ArrayList increases its array size by 50 percent.

### Similarities

1. Both Vector and ArrayList use __growable array__ data structure.

1. They both are __ordered collection classes__ as they maintain the elements insertion order.

1. Vector & ArrayList both allows duplicate and null values.

1. They both grows and shrinks automatically when overflow and deletion happens.

[source](http://beginnersbook.com/2013/12/difference-between-arraylist-and-vector-in-java/)

### History

The vector was not the part of collection framework - it has been included in collections later. It can be considered as __Legacy code__. 

__There is nothing about Vector which List collection cannot do__. Therefore Vector should be avoided. If there is a need of thread-safe operation, make ArrayList synchronized. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Interface and Abstract classes ]]></title>
    <link href="www.shuatiblog.com/blog/2015/01/20/java-abstract-class-interface/"/>
    <updated>2015-01-20T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/01/20/java-abstract-class-interface</id>
    <content type="html"><![CDATA[### Overview

[source](http://www.programmerinterview.com/index.php/java-questions/interface-vs-abstract-class/)

__A class__ must be declared abstract when it has one or more __abstract methods__.

__An interface__ differs from an abstract class because an interface is not a class. An interface is essentially a type that __can be satisfied by any class__ that implements the interface. 

### Abstract classes: strong relationship

__Abstract classes__ are meant to be inherited from, and often __indicates a strong relationship__.

For instance, if we have an abstract base class called "Canine", any deriving class should be an animal that belongs to the Canine family (like a Dog or a Wolf). 

__With an interface on the other hand__, the relationship is __not necessarily strong__. 

For example, if we have a class called "House", that class could also implement an interface called "AirConditioning". Having air conditioning not an essential part of a House. 

__A TownHouse__ is a type of House, that relationship is very strong, and would be more appropriately defined __through inheritance__ instead of interfaces.

### What's more

1. Multiple inheritance

    Java class can inherit from only one abstract class, but can implement multiple interfaces.

1. Abstract method 

    Abstract class can have non-abstract methods with actual implementation details. 

### When to use which

__Use abstract class when__: 

1. You want to __[share code](http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html)__ among several closely related classes.

1. you want to be able to declare __non-public members__. In an interface, all methods must be public.

1. you think you will need to __add methods__ in the future. 

    Because if you add new method headings to an interface, then all of the classes that already implement that interface will have to be changed to implement the new methods. That can be quite a hassle.

__Use interface when__: 

1. You expect that __unrelated classes__ would implement your interface. For example, the interfaces __Comparable and Cloneable__ are implemented by many unrelated classes. 

1. you think that the API will not change for a while.

1. you want to have something similar to multiple inheritance.
]]></content>
  </entry>
  
</feed>
