<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java oop | Shuatiblog.com]]></title>
  <link href="http://www.shuatiblog.com/blog/categories/java-oop/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-10-14T22:25:36-05:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Three Properties of Class/Object ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/08/24/three-property-object/"/>
    <updated>2015-08-24T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/08/24/three-property-object</id>
    <content type="html"><![CDATA[# Objects

Much of the power and flexibility of modern software analysis and design derives from its use of objects.

# Classes

Classes create an abstract representation of the world, letting you discard unnecessary details.

# The 3 properties

## Class

1. properties

1. __behavior__

1. relationships to other objects

## Object

1. state

1. __behavior__

1. identity

Ref: http://javadevwannabe.blogspot.sg/2012/02/state-behavior-and-identity.html?m=1
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Overload, Override, Compile, Runtime (Static/Dynamic Polymph) ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/05/24/overload-override-compile-runtime/"/>
    <updated>2015-05-24T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/05/24/overload-override-compile-runtime</id>
    <content type="html"><![CDATA[# The master statement

Overloading is Compile Time and Overriding is Runtime. 

# Examples

## Overloading 

    public static class test
    {
        static void Main(string[] args)
        {
            Foo();
            Foo("test");
        }

        public static void Foo()
        {
            Console.WriteLine("No message supplied");
        }

        public static void Foo(string message)
        {
            Console.WriteLine(message);
        }
    }

This is called __static (compile-time) polymorphism__ because the compiler is aware of exactly which method you are calling. 

## Overriding

When the PrintMessage() function is call, it determines which version of GetMessage() to use at runtime, __based on the type of IMessage__ that is passed in.

    public static class MessagePrinter
    {
        public static void PrintMessage(IMessage message)
        {
            Console.WriteLine(message.GetMessage());
        }
    }

    public interface IMessage
    {
        public string GetMessage();
    }

    public class XMLMessage : IMessage
    {
        public string GetMessage()
        {
            return "This is an XML Message";
        }
    }

    public class SOAPMessage : IMessage
    {
        public string GetMessage()
        {
            return "This is a SOAP Message";
        }
    }

This is __dynamic (runtime) polymorphism__. This is due to the fact that the compiler doesn't necessarily know what type of object is being passed in at compile-time.  

# Conclusion

## Overloading

Compile time Polymorphism = Static Polymorphism = Early binding

## Overriding

Runtime Polymorphism = Dynamic Polymorphism = Late binding = 

Reference: [How Overloading is Compile Time and Overriding is Runtime from stackoverflow.com](http://stackoverflow.com/questions/10915828/how-overloading-is-compile-time-and-overriding-is-runtime)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Can abstract class have no abstract method ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/02/09/abstract-class-without-abstract-method/"/>
    <updated>2015-02-09T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/02/09/abstract-class-without-abstract-method</id>
    <content type="html"><![CDATA[### Can abstract class have constructor

[Yes, it can](http://www.geeksforgeeks.org/abstract-classes-in-java/). 

In this way, we create classes that cannot be instantiated, but can only be inherited.

For example, Java template pattern.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] Can abstract class have constructor ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/02/09/abstract-class-constructor/"/>
    <updated>2015-02-09T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/02/09/abstract-class-constructor</id>
    <content type="html"><![CDATA[### Can abstract class have constructor

[Yes, it can](http://www.mitbbs.com/article_t/JobHunting/32257933.html). However, if we create an instance using it, it's error. 

Consider [this example](http://www.geeksforgeeks.org/abstract-classes-in-java/): 

abstract class Base {
    Base() { System.out.println("Base Constructor Called"); }
    abstract void fun();
}
class Derived extends Base {
    Derived() { System.out.println("Derived Constructor Called"); }
    void fun() { System.out.println("Derived fun() called"); }
}
class Main {
    public static void main(String args[]) { 
       Derived d = new Derived();
    }
}

Output:

    Base Constructor Called
    Derived Constructor Called

### More info on constructor: 

The [constructor in an abstract class](http://stackoverflow.com/a/261159): 

1. is used when you want to perform some initialization
1. you may define more than one constructor (with different arguments)
1. if you don't define a constructor, then the compiler will automatically generate one for you.
1. your subclass constructor have to call a constructor from the abstract class
1. you can define all your constructors protected (cuz making them public is pointless)

Constructor of abstract class can be used in __[Template Pattern](http://www.tutorialspoint.com/design_pattern/template_pattern.htm)__, where the template is defined as a abstract class. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Java OOP] PubSub (Publish–subscribe) pattern ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/02/05/pubsub-pattern/"/>
    <updated>2015-02-05T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/02/05/pubsub-pattern</id>
    <content type="html"><![CDATA[### Publish–subscribe pattern

__[The publish–subscribe pattern](http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern) is a messaging pattern__ where senders of messages, called publishers, do not send messages directly to specific subscribers. Instead, published messages are characterized into classes without knowledge of subscribers. 

Similarly, subscribers express interest in one or more classes, without knowledge of what publishers there are. 

1. greater network scalability
1. a more dynamic network topology
1. decreased flexibility to modify the Publisher and its structure of the data published.

Pub/sub is typically a part of a larger __message-oriented middleware system__. e.g. Java Message Service (JMS). 

### Difference w/ observer pattern

Refer to __[Java OOP] Observer pattern__ or [this link](http://stackoverflow.com/questions/15594905/difference-between-observer-pub-sub-and-data-binding): 

#### Observer, or Observable/Observer:

> A design pattern by which an object is imbued with the ability to notify others of specific events - typically done using actual events, which are kind of like slots in the object with the shape of a specific function/method. The observable is the one who provides notifications, and the observer receives those notifications. In .net, the observable can expose an event and the observer subscribes to that event with an "event handler"shaped hook. No assumptions are made about the specific mechanism which notifications occur, nor about the number of observers one observable can notify.

#### Pub/Sub:

> Another name (perhaps with more "broadcast" semantics) of the Observable/Observer pattern, which usually implies a more "dynamic" flavor - observers can subscribe or unsubscribe to notifications and one observable can "shout out" to multiple observers. In .net, one can use the standard events for this, since events are a form of MulticastDelegate, and so can support delivery of events to multiple subscribers, and also support unsubscription. Pub/sub has a slightly different meaning in certain contexts, usually involving more "anonymity" between event and eventer, which can be facilitated by any number of abstractions, usually involving some "middle man" (such as a message queue) who knows all parties, but the individual parties don't know about each other.
]]></content>
  </entry>
  
</feed>
