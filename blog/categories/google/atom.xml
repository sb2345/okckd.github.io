<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: google | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/google/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2015-01-24T18:46:38+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Google] Top n values from Sum of 2 arrays ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/20/top-n-from-sum-2-array/"/>
    <updated>2015-01-20T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/20/top-n-from-sum-2-array</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=3213705">link</a></p>

<blockquote><p>给定两个数组A，B，长度均为n，求A[0]+B[0],…,A[0]+B[n-1],…,A[n-1]+B[0],…,A[n-1]+B[n]总共n<sup>2</sup>个数的最大的n个值。</p></blockquote>

<h3>Solution</h3>

<p>Use a Heap and then iteratively pop 1 and push 2 elements. Until n values has been filled.</p>

<h3>Code</h3>

<pre><code>public int[] topN(int[] arr1, int[] arr2, int n) {
    int[] ans = new int[n];
    int index = n - 1;

    PriorityQueue&lt;Pair&gt; heap = new PriorityQueue&lt;Pair&gt;(n,
            new SpecialComparator(arr1, arr2));
    Arrays.sort(arr1);
    Arrays.sort(arr2);

    Pair maxPair = new Pair(n - 1, n - 1);
    heap.add(maxPair);

    for (int i = 0; i &lt; n; i++) {
        Pair next = heap.poll();
        ans[index--] = arr1[next.x] + arr2[next.y];
        if (next.y - 1 &gt;= 0) {
            heap.add(new Pair(next.x, next.y - 1));
        }
        if (next.x - 1 &gt;= 0) {
            heap.add(new Pair(next.x - 1, next.y));
        }
    }
    return ans;
}

class SpecialComparator implements Comparator&lt;Pair&gt; {

    int[] arr1, arr2;

    public SpecialComparator(int[] a1, int[] a2) {
        arr1 = a1;
        arr2 = a2;
    }

    @Override
    public int compare(Pair p1, Pair p2) {
        // note that larger value shall go up top of the heap, so -1 * ...
        return -1 * (arr1[p1.x] + arr2[p1.y] - arr1[p2.x] - arr2[p2.y]);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Lexicographic order from dictionary ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/18/lexicographic-order-from-dict/"/>
    <updated>2015-01-18T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/18/lexicographic-order-from-dict</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=13394663">link</a></p>

<blockquote><p>Given set of words that are lexicographically sorted, return lexicographic order. E.g:</p></blockquote>

<pre><code>abc
acd
bcc
bed
bdc
dab
</code></pre>

<blockquote><p>The order of letters for the given example would be</p></blockquote>

<pre><code>a-&gt;b-&gt;c-&gt;e-&gt;d
</code></pre>

<h3>Solution</h3>

<blockquote><p>Just form a graph(DAG) and do a topological sort.</p></blockquote>

<p>Start from the first pair in the dictionary. Compare two strings in this pair <strong>till first mismatch</strong>.</p>

<p>Eg: <strong>aad &amp; aab</strong>, in this case create an edge <strong>d &ndash;> b</strong>.</p>

<p>More details is available <a href="http://codereview.stackexchange.com/questions/48292/return-the-lexicographic-order">here</a>.</p>

<h3>Code</h3>

<pre><code>public String lexicoOrder(String[] dict) {
    String ans = "";

    // for each pair, maintain 2 HashMap
    HashMap&lt;Character, Integer&gt; incount = new HashMap&lt;Character, Integer&gt;();
    HashMap&lt;Character, List&lt;Character&gt;&gt; connection = new HashMap&lt;Character, List&lt;Character&gt;&gt;();
    for (String str : dict) {
        for (char c : str.toCharArray()) {
            incount.put(c, 0);
            connection.put(c, new ArrayList&lt;Character&gt;());
        }
    }
    buildGraph(dict, incount, connection);

    // start topology sorting
    Queue&lt;Character&gt; temp = new LinkedList&lt;Character&gt;();
    for (char c : incount.keySet()) {
        if (incount.get(c) == 0) {
            temp.offer(c);
            incount.remove(c);
            // remove any node whose incount is 0
        }
    }
    while (!temp.isEmpty()) {
        char top = temp.poll();
        ans += top;
        // 'top' is next char in line. remove it and delete connections
        List&lt;Character&gt; inNodes = connection.get(top);
        for (char c : inNodes) {
            // remove incount for all nodes from inNodes
            incount.put(c, incount.get(c) - 1);
            if (incount.get(c) == 0) {
                incount.remove(c);
                temp.offer(c);
            }
        }
    }
    if (incount.size() == 0)
        return ans;
    else
        return "unable to find a valid char sequence.";
}

public void buildGraph(String[] dict, HashMap&lt;Character, Integer&gt; incount,
        HashMap&lt;Character, List&lt;Character&gt;&gt; connection) {
    // build the graph map
    // abc
    // acd
    // bcc
    // bed
    // bdc
    // dab
    for (int i = 0; i &lt; dict.length - 1; i++) {
        // compare dict[i] and dict[i+1]
        String str1 = dict[i];
        String str2 = dict[i + 1];
        int p = 0;
        while (p &lt; str1.length() &amp;&amp; p &lt; str2.length()) {
            if (str1.charAt(p) == str2.charAt(p)) {
                p++;
            } else {
                break;
            }
        }
        if (p == str1.length()) {
            // this is special case eg. "ab" &amp; "abc"
            // this will not give up any information about lexico order
            continue;
        }
        char from = str1.charAt(p);
        char to = str2.charAt(p);
        // update incount
        incount.put(to, incount.get(to) + 1);
        // update connection
        connection.get(from).add(to);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Crazy Distance Between Strings ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/crazy-distance-string/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/crazy-distance-string</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://stackoverflow.com/questions/15061908/google-interview-find-crazy-distance-between-strings">link</a></p>

<blockquote><p>X and Y are strings formed by 0 or 1. Distance is define as:</p></blockquote>

<pre><code>D(X,Y) = Remove chars common at the start from both X &amp; Y. 
Then add the remaining lengths from both the strings.
</code></pre>

<blockquote><p>For e.g.</p></blockquote>

<pre><code>D(1111, 1000) = Only First alphabet is common. So the remaining string is 111 &amp; 000. Therefore the result length("111") &amp; length("000") = 3 + 3 = 6
</code></pre>

<blockquote><p>For e.g.</p></blockquote>

<pre><code>D(0101, 01100) = Only First two alphabets are common. So the remaining string is 01 &amp; 100. Therefore the result length("01") &amp; length("100") = 2 + 3 = 5
</code></pre>

<blockquote><p>Now given n input, say like</p></blockquote>

<pre><code>1111
1000
101
1100
</code></pre>

<blockquote><p>Find out the maximum crazy distance between 2 strings.</p>

<p><strong>n is</strong> the number of input strings. <strong>m is</strong> the max length of any input string.</p></blockquote>

<h3>Solution</h3>

<p>This is the <a href="http://stackoverflow.com/a/15062640">source</a>.</p>

<blockquote><p>Put the strings into a tree, where 0 means go left and 1 means go right. <strong>O(m*n) time</strong>.</p></blockquote>

<p>Example:</p>

<pre><code>            Root
             1
          0      1
         0 1*   0  1
        0*     0*    1*
</code></pre>

<blockquote><p>where the * means that an element ends there. Constructing this tree clearly takes O(n m).</p>

<p>Now we have to find <strong>the diameter of the tree</strong> (the longest path between two nodes).</p></blockquote>

<p>How to find out longest path between 2 leaf nodes? Please refer to <strong>[Google] Diameter of a Binary Tree</strong> for explanation.</p>

<p>Total time complexity is <strong>O(m*n) time</strong>.</p>

<h3>Code</h3>

<pre><code>public int crazyDist(String[] input) {
    TreeNode root = this.buildTree(input);
    return this.findMaxPath(root).path - 1;
}

private Result findMaxPath(TreeNode node) {
    if (node == null) {
        return new Result(Integer.MIN_VALUE, 0);
    }
    Result lr = this.findMaxPath(node.left);
    Result rr = this.findMaxPath(node.right);
    int path = Math.max(lr.path, rr.path);
    if (lr.depth != 0 &amp;&amp; rr.depth != 0) {
        // this check is important, because if any of the child node is
        // NULL, this root will not be eligible for computing the path
        path = Math.max(path, lr.depth + rr.depth + 1);
        // Why? cuz diameter must go from one leaf, thru root, and reach
        // another leaf. This is different from "Maximum Path Sum" leetcode
    }
    return new Result(path, 1 + Math.max(lr.depth, rr.depth));
}

private TreeNode buildTree(String[] input) {
    TreeNode root = new TreeNode(123);
    // share a common root. this root is deducted from the final calculation
    for (String str : input) {
        // insert str under the root
        TreeNode p = root;
        for (char c : str.toCharArray()) {
            if (c == '0') {
                if (p.left == null) {
                    p.left = new TreeNode(124);
                    // if 0, go to left; otherwise go to right
                    // thus value of TreeNodes does not really matter
                }
                p = p.left;
            } else {
                if (p.right == null) {
                    p.right = new TreeNode(125);
                }
                p = p.right;
            }
        }
    }
    return root;
}

class Result {
    int path;
    int depth;

    public Result(int a, int b) {
        path = a;
        depth = b;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Check if repeating subsequence exists ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/check-if-repeating-subsequence-exist/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/check-if-repeating-subsequence-exist</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.careercup.com/question?id=5931067269709824">link</a></p>

<blockquote><p>Given a string, find if there is any sub-sequence that repeats itself. Do not reuse any char.</p>

<p>Eg:</p></blockquote>

<pre><code>1. abab &lt;------yes, ab is repeated
2. abba &lt;---- No, a and b follow different order 
3. acbdaghfb &lt;-------- yes, a followed by b twice 
4. abcdacb &lt;----- yes, a followed by b twice 
</code></pre>

<blockquote><p>Note that no char should be reused. I.e. &ldquo;aab&rdquo; is a false.</p></blockquote>

<h3>Solution</h3>

<p>This looks like a question without any clue. However, this actually is a modified version of <strong>[LintCode] Longest Common Subsequence</strong>.</p>

<p>Look at that question: there&rsquo;s 2 input string, and they match char-by-char. For this question, we are simply <strong>matching input string with input string itself</strong>. And chars should be match <strong>ONLY</strong> at different positions, that&rsquo;s the key. As pointed out by the <a href="http://www.careercup.com/question?id=5931067269709824">top comment</a>:</p>

<blockquote><p>Now we can modify the longest_common_subsequence(a, a) to find the value of the longest repeated subsequence in a by excluding the cases when i == j</p></blockquote>

<h3>Code</h3>

<pre><code>public boolean checkRepeatSubseq(String input) {
    int len = input.length();
    int[][] dp = new int[len + 1][len + 1];
    // dp[i][j] denotes the length of subseq between 2 strings:
    // 1. first i chars of input
    // 2. first j chars of input
    for (int i = 1; i &lt;= len; i++) {
        for (int j = i; j &lt;= len; j++) {
            if (i != j &amp;&amp; input.charAt(i - 1) == input.charAt(j - 1)) {
                int temp = Math.max(dp[i - 1][j], dp[i][j - 1]);
                dp[i][j] = Math.max(temp, dp[i - 1][j - 1] + 1);
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    return dp[len][len] &gt;= 2;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Google] Diameter of a Binary Tree ]]></title>
    <link href="http://okckd.github.io/blog/2015/01/11/Diameter-of-Binary-Tree/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2015/01/11/Diameter-of-Binary-Tree</id>
    <content type="html"><![CDATA[<h3>Question</h3>

<p><a href="http://www.geeksforgeeks.org/diameter-of-a-binary-tree/">link</a></p>

<blockquote><p>The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two leaves in the tree.</p></blockquote>

<p>{% img middle /assets/images/tree-diameter-1.gif %}</p>

<h3>Solution</h3>

<p>This is a similar question to <strong>[LeetCode 124] Binary Tree Maximum Path Sum</strong>. <strong>However there&rsquo;s a significant difference</strong> which might be overlooked while coding.</p>

<p>Look at this example:</p>

<pre><code>     0
       1
        1
       0  1
           1
</code></pre>

<p>If we only want to find the max path, that would return result of 5, which is root-to-rightmost-leaf. However, the diameter should be 4, which is the distance between 2 leaf nodes.</p>

<p>A solution is available for reading <a href="http://stackoverflow.com/a/3124575">here</a>.</p>

<p>For <strong>[Google] Crazy Distance Between Strings</strong>, there is another special case: {&ldquo;1&rdquo;, &ldquo;11&rdquo;, &ldquo;10&rdquo;}. The program will not output correct result (1), because this is not really the diameter of a tree, but instead, a max path from a non-leaf to a leaf. I leave this part for you to finish.</p>

<h3>Code</h3>

<p>Refer to <strong>[Google] Crazy Distance Between Strings</strong> for complete code.</p>
]]></content>
  </entry>
  
</feed>
