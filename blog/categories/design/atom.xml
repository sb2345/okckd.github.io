<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | My Octopress Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-06T11:43:16+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Application Server vs. Web Server]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/Web-server-application-server/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/Web-server-application-server</id>
    <content type="html"><![CDATA[## Overview

A Web server __exclusively handles HTTP requests__, whereas an application server __serves business logic__ to application programs through any number of protocols. 

### Web server

A [Web server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __handles the HTTP protocol__. When the Web server receives an HTTP request, it responds with an HTTP response, such as sending back an HTML page. 

To process a request, a Web server may __respond with a static HTML page__, or delegate the __dynamic response__ such as CGI scripts, JSPs (JavaServer Pages), servlets, ASPs (Active Server Pages), server-side JavaScripts, or some other server-side technology. 

### Application server

An [Application server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __exposes business logic to client applications__ through various protocols, possibly including HTTP. The clients can include GUIs (graphical user interface) running on a PC, a Web server, or even other application servers. 

In most cases, the server exposes this business logic through a component API, such as __the EJB (Enterprise JavaBean) component model__ found on J2EE (Java 2 Platform, Enterprise Edition) application servers. 

Moreover, the application server manages its own resources. Such gate-keeping duties include security, transaction processing, resource pooling, and messaging. 

There's [a nice example](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) as well. 

### Another explanation

Web server on the left. 

<table>
    <tbody><tr id="row1" title="Application Server vs Web Server comparison - What is it?"><td class="acol bg-color bg-img font-color">What is it?</td>                <td id="valtd1_1" class="vcol bg-color bg-img font-color">A server that exposes business logic to client applications through various protocols including HTTP.</td>
                <td id="valtd1_2" class="vcol bg-color bg-img font-color">A server that handles HTTP protocol.</td>
                </tr><tr id="row2" title="Application Server vs Web Server comparison - Job"><td class="acol bg-color bg-img font-color">Job</td>                <td id="valtd2_1" class="vcol bg-color bg-img font-color">Application server is used to serve web based applications and enterprise based applications(i.e servlets, jsps and ejbs...). Application servers may contain a web server internally.</td>
                <td id="valtd2_2" class="vcol bg-color bg-img font-color">Web server is used to serve web based applications.(i.e servlets and jsps)</td>
                </tr><tr id="row3" title="Application Server vs Web Server comparison - Functions"><td class="acol bg-color bg-img font-color">Functions</td>                <td id="valtd3_1" class="vcol bg-color bg-img font-color">To deliver various applications to another device, it allows everyone in the network to run software off of the same machine.</td>
                <td id="valtd3_2" class="vcol bg-color bg-img font-color">Keeping HTML, PHP, ASP etc  files available for the web browsers to view when a user accesses the site on the web, handles HTTP requests from clients.</td>
                </tr><tr id="row4" title="Application Server vs Web Server comparison - Supports"><td class="acol bg-color bg-img font-color">Supports</td>                <td id="valtd4_1" class="vcol bg-color bg-img font-color">distributed transaction and EJB's</td>
                <td id="valtd4_2" class="vcol bg-color bg-img font-color">Servlets and JSP</td>
                </tr><tr class="comparisonRow diff lastRow" id="row5" title="Application Server vs Web Server comparison - Resource utilization"><td class="acol bg-color bg-img font-color">Resource utilization</td>                <td id="valtd5_1" class="vcol bg-color bg-img font-color">High</td>
    <td id="valtd5_2" class="vcol bg-color bg-img font-color">Low</td>
</tr></tbody></table>
<br />

#### Miscellaneous

For [J2EE](http://www.geekinterview.com/question_details/17043), Web server is used only for __Jsp and Servlets__ and static functionality. It doesn't support __EJB and JMS and JAAS__.

Application server is basically: 

> AppServer = WebServer + EJB container. 

__Tomcat is web container__ where as Apache is web server.

An Application Server may include a Web Server inside it.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Upcasting, Downcasting and Object Slicing]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/Upcasting-and-Object-Slicing/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/Upcasting-and-Object-Slicing</id>
    <content type="html"><![CDATA[### Upcasting and Downcasting

Java permits an object of a __subclass type to be treated as an object of any superclass type__. This is [called upcasting](http://forum.codecall.net/topic/50451-upcasting-downcasting/). Upcasting is done automatically, while downcasting must be manually done. 

[Example](http://forum.codecall.net/topic/50451-upcasting-downcasting/):

<img class="middle" src="/assets/images/java-upcasting-downcasting.jpg">

	Cat c1 = new Cat();
	Animal a = c1; //automatic upcasting to Animal
	Cat c2 = (Cat) a; //manual downcasting back to a Cat

Upcasting is always typesafe but can cause the so called ["slicing" problem](http://forums.codeguru.com/showthread.php?321676-What-are-upcasting-and-downcasting-dangers). 

### Object Slicing

[Object slicing](https://www.java.net/also-in-java/object-slicing-and-component-design-java) is defined as the conversion of an object into something with less information (typically a superclass)

### More detail

If you upcast an object, it will __lose all it's properties__, which were inherited. For example, if you cast a Cat to an Animal, it will lose properties inherited from Mammal and Cat. Note, that __data will not be lost, you just can't use it__, until you downcast the object to the right level. 

### Example 

	class Base {
		void doSomething() {
			System.out.println("Base");
		}
	}

	class Derived extends Base {
		void doSomething() {
			System.out.println("Derived");
		}
	}

	public class JavaUpcasting {
		public static void main(String[] args) {
			Base instance = new Derived();
			instance.doSomething();
		}
	}

This will output "Derived". 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] MapReduce Intro]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/MapReduce-Intro/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/MapReduce-Intro</id>
    <content type="html"><![CDATA[### An Overview

__[MapReduce](http://searchcloudcomputing.techtarget.com/definition/MapReduce) is a software framework__, or a __[distributed programming model](http://www.theserverside.com/news/1321219/Why-Should-You-Care-About-MapReduce)__ intended for processing massive amounts of data in large clusters. 

1. __Map__, a function that parcels out work to different nodes in the distributed cluster.

1. __Reduce__, another function that collates the work and resolves the results into a single value.

### More Info

__MapReduce isn't intended to replace relational databases__: it's intended to provide a lightweight way of programming things so that they can run fast by running in parallel on a lot of machines. Google uses MapReduce for __indexing every Web page__ they crawl. 

MapReduce framework is __fault-tolerant__ because each node in the cluster is expected to report back periodically with completed work and status updates. If a node remains silent for longer than the expected interval, a master node makes note and re-assigns the work to other nodes.

__From a Senior Software Engineer at Google__: 

> The key to how MapReduce works is to take input as, conceptually, a list of records. The records are split among the different computers in the cluster by Map. The result of the Map computation is a list of key/value pairs. Reduce then takes each set of values that has the same key and combines them into a single value. So Map takes a set of data chunks and produces key/value pairs and Reduce merges things, so that instead of a set of key/value pair sets, you get one result. You can't tell whether the job was split into 100 pieces or 2 pieces...

### Why MapReduce

MapReduce is important because it allows ordinary developers to use MapReduce library routines to create parallel programs without having to worry about programming for intra-cluster communication, task monitoring or failure handling.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] MapReduce Common Friends Example]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/MapReduce-Common-Friends/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/MapReduce-Common-Friends</id>
    <content type="html"><![CDATA[### Question

[link](http://stackoverflow.com/a/12375878)

> Facebook's "You and Joe have 230 friends in common" feature. Sure you could use a decent caching strategy, but for now, use MapReduce. 

### Analysis

This list doesn't change frequently so it'd be wasteful to recalculate it every time. We're going to use mapreduce to calculate everyone's common friends once a day and store those results.

Note that friends are __bi-directional__. If I'm your friend, you're mine. (follow-up: how to do it for follower system?)

#### Input

Assume the friends are stored as Person->[List of Friends], our friends list is then:

    A -> B C D
    B -> A C D E
    C -> A B D E
    D -> A B C E
    E -> B C D

#### Map

The mapper will output a key-value pair. The key will be a friend along with the person. The value will be the list of friends. The key will be sorted so that the friends are in order, causing all pairs of friends to go to the same reducer. 

For map(A -> B C D) :

    (A B) -> B C D
    (A C) -> B C D
    (A D) -> B C D

For map(B -> A C D E) : (Note that A comes before B in the key)

    (A B) -> A C D E
    (B C) -> A C D E
    (B D) -> A C D E
    (B E) -> A C D E

For map(C -> A B D E) :

    (A C) -> A B D E
    (B C) -> A B D E
    (C D) -> A B D E
    (C E) -> A B D E

For map(D -> A B C E) :

    (A D) -> A B C E
    (B D) -> A B C E
    (C D) -> A B C E
    (D E) -> A B C E

And finally for map(E -> B C D):

    (B E) -> B C D
    (C E) -> B C D
    (D E) -> B C D

Before we send these key-value pairs to the reducers, we group them by their keys and get:

    (A B) -> (A C D E) (B C D)
    (A C) -> (A B D E) (B C D)
    (A D) -> (A B C E) (B C D)
    (B C) -> (A B D E) (A C D E)
    (B D) -> (A B C E) (A C D E)
    (B E) -> (A C D E) (B C D)
    (C D) -> (A B C E) (A B D E)
    (C E) -> (A B D E) (B C D)
    (D E) -> (A B C E) (B C D)

Each line will be passed as an argument to a reducer.

#### Reduce

The reduce function will simply intersect the lists of values and output the same key with the result of the intersection. After reduction:

    (A B) -> (C D)
    (A C) -> (B D)
    (A D) -> (B C)
    (B C) -> (A D E)
    (B D) -> (A C E)
    (B E) -> (C D)
    (C D) -> (A B E)
    (C E) -> (B D)
    (D E) -> (B C)

#### Result

Now when D visits B's profile, we can quickly look up (B D) and see that they have three friends in common, (A C E). 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Amazon Web Services]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/AWS-explained/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/AWS-explained</id>
    <content type="html"><![CDATA[## Overview

__[Amazon Web Services](http://en.wikipedia.org/wiki/Amazon_Web_Services)__ (AWS) is a collection of __remote computing services__ that together make up a cloud computing platform. AWS provides a large computing capacity much faster and cheaper than building a physical server farm. 

The most well-known is Amazon EC2 and Amazon S3. 

[Amazon is an example of](http://practicalcloudcomputing.com/post/311045887/cloudexplained) an __IAAS (Infrastructure as a Service) provider__. 

### Terminologies

#### AWS

Amazon Web Services, a division of Amazon focusing on hosting our applications and data

#### SimpleDB

AWS’s always-available replacement for RDBMSs. Specifically SimpleDB is their hosted, replicated key-value store that is always available and accessible as a web service

#### S3

(a.k.a Simple Storage Service) AWS’s always-available file storage solution accessible as a web service

#### SQS

(a.k.a Simple Queue Service) AWS’s always-available queueing service accessible as a web service

#### ELB

(a.k.a Elastic Load Balancer) AWS’s always-available load balancing service accessible as a web service

#### EC2

(a.k.a Elastic Compute Cloud) AWS’s on-demand server offering accessible as a web service

#### CloudFront

AWS’s CDN (a.k.a Content Delivery Network) offering accessible as a web service

### Benefits

Basically, by moving these services out of your data center and into the cloud, you:

1. __No longer need to run and maintain a data center__. You no longer need the associated staff

1. Get a __more scalable and available infrastructure__ without trying to build it yourself
]]></content>
  </entry>
  
</feed>
