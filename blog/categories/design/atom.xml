<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-09-02T21:56:08+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Listener / Observer Pattern]]></title>
    <link href="http://okckd.github.io/blog/2014/09/02/Listener-Observer-pattern/"/>
    <updated>2014-09-02T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/02/Listener-Observer-pattern</id>
    <content type="html"><![CDATA[### Observer pattern

__[The observer pattern](http://en.wikipedia.org/wiki/Observer_pattern)__ is a software design pattern in which an object(subject) maintains a list of dependents(observers), and notifies them automatically of any state changes (usually by calling one of their methods). 

The Observer pattern is mainly used to implement distributed event handling systems. It's also a key part in MVC architectural. 

### Example

A mailing list example. 

Each student in the mailing list would be a listener/observer, and teacher would be announcer/subject. 

So in the code, there's a Listener Interface that all students implement. There's a update() method in the interface, where each student define their own implementation. 

Teacher would keep a list of Listeners. When there's any news, teacher would call update() on each object. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Multithreading - Deadlock Prevention]]></title>
    <link href="http://okckd.github.io/blog/2014/09/01/Multithreading-deadlock-prevention/"/>
    <updated>2014-09-01T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/01/Multithreading-deadlock-prevention</id>
    <content type="html"><![CDATA[### Question

> How to prevent deadlock? (question from MIT handouts 1)

### Analysis

Preventing one of the 4 conditions will prevent deadlock: 

1. Removing the __mutual exclusion condition__, but not very possible. 

1. The __hold and wait__ conditions may be removed by requiring processes to request all the resources they will need before starting up. 

1. The __no preemption condition__ may also be difficult or impossible to avoid as a process has to be able to have a resource for a certain amount of time, or the processing outcome may be inconsistent or thrashing may occur. 

1. The final condition is the __circular wait condition__. Approaches that avoid circular waits include disabling interrupts during critical sections and using a hierarchy to determine a partial ordering of resources. 

### Answer

__Assign an order to our locks__ (require that the locks always acquired in order). 

This prevent 2 thread waiting to get the resource in each other's hand. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] HTTP Cookie]]></title>
    <link href="http://okckd.github.io/blog/2014/08/28/Http-cookie/"/>
    <updated>2014-08-28T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/28/Http-cookie</id>
    <content type="html"><![CDATA[### First Word

A cookie is __a small text file__ that is stored by a browser on the user’s machine. Cookies are plain text; they contain no executable code. 

Every time the user loads the website, the __browser sends the cookie back to the server__ to notify the website of the user's previous activity. 

1. Stateful information

	Such as shopping cart

1. browsing activity

	Such as log in, which button is clicked, and which page is visited

### Security

A secure cookie will only be sent to the server when a request is made using SSL and the HTTPS protocol. However, the entire mechanism is inherently insecure. 

The cookie just contains data and __isn’t harmful__ in and of itself. However, tracking cookies and especially third-party tracking cookies are commonly used as ways to compile long-term records of individuals' browsing history, which is a potential privacy concern. 

### Types of HTTP Cookie

Common cookie types: 

#### Session cookie

It's __while browsing__. (Normally) deleted by browser when the user closes the browser.
	
#### Persistent cookie

Max-age 1 year. The value set in that cookie would be sent back to the server every time the user visited the server. Also called __tracking cookies__

#### Secure cookie

The secure attribute is enabled, and is only used via HTTPS. 

#### Third-party cookie

__First-party cookies__ are cookies that belong to the same domain that is shown in the browser's address bar. __Third-party cookies__ are cookies that belong to domains different from the one shown in the address bar. 

It opens up the potential for __tracking the user's browsing history__. An example of 3rd-party: 

> As an example, suppose a user visits www.example1.com. This web site contains an advert from ad.foxytracking.com, which, when downloaded, sets a cookie belonging to the advert's domain (ad.foxytracking.com). Then, the user visits another website, www.example2.com, which also contains an advert from ad.foxytracking.com, and which also sets a cookie belonging to that domain (ad.foxytracking.com). Eventually, both of these cookies will be sent to the advertiser when loading their ads or visiting their website. The advertiser can then use these cookies to build up a browsing history of the user across all the websites that have ads from this advertiser.

#### One more thing

Nowadays ther'e a new kind of __HttpOnly cookie__ (used only when transmitting HTTP (or HTTPS) requests, thus restricting access from other, non-HTTP APIs such as JavaScript). 

[source1](http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/)

[source2](http://en.wikipedia.org/wiki/HTTP_cookie)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Virtual Memory, Page Fault and Thrashing]]></title>
    <link href="http://okckd.github.io/blog/2014/08/26/Virtual-memory-page-fault-thrashing/"/>
    <updated>2014-08-26T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/26/Virtual-memory-page-fault-thrashing</id>
    <content type="html"><![CDATA[### Terminologies

#### Paging

[Paging](http://whatis.techtarget.com/definition/paging) is a method of writing data to, and reading it from, __secondary storage__ for use in __primary storage__, also known as main memory. Paging plays a role in memory management for a operating system.

#### Page table

[A page table](http://en.wikipedia.org/wiki/Page_table) is the data structure used by a virtual memory system to store the mapping between __virtual addresses__ and __physical addresses__. 

#### Page fault

Page fault is an __interrupt__ that occurs when a program requests data that is __not currently in real memory__. The interrupt triggers the operating system to fetch the data from a virtual memory and load it into RAM.

An __invalid page fault__ or __page fault error__ occurs when the operating system cannot find the data in virtual memory. This usually happens when the virtual memory area, or the table that maps virtual addresses to real addresses, becomes corrupt.

#### Logical address

[Logical address](http://en.wikipedia.org/wiki/Logical_address) is the address at which an item (memory cell, storage element, network host) appears to reside from the perspective of an executing application program. 

#### Physical address

[Physical address](http://en.wikipedia.org/wiki/Physical_address) (also real address, or binary address), is a memory address that is represented in the form of a binary number for accessing main memory. 

[In general](http://www.geekinterview.com/question_details/3186), Logical address is the address generated __by the CPU__. Where as physical address is the __actual address of the process in the memory__. The CPU generates the logical address that is added with the __offset value__ to get the actual address of the process inthe memory. 

#### Thrashing

[Thrashing](http://www.computerhope.com/jargon/t/thrash.htm) or disk thrashing is a term used to describe when the hard drive is __being overworked by moving information__ between the system memory and virtual memory excessively. 

### Demand Paging 

Virtual memory is implemented (mostly) using demand paging. __[Demand Paging](http://www.webopedia.com/TERM/D/demand_paging.html)__ is a type of swapping in which pages of data are not copied from disk to RAM until they are needed. This is an example of a [lazy loading technique](http://en.wikipedia.org/wiki/Demand_paging).

Pros:

1. less RAM needed
1. more users
1. less I/O

When a pages is needed, if __invalid referernce__, abort the process. else __if valid__, it's called page fault. 

Page fault time:

1. servicing the page fault interrupt
1. read in new page (major part)
1. restart the process

### Page Replacement

1. FIFO
2. Optimal Algorithm
3. LRU
4. LRU Approximation
	1. Additional-Reference-Bits algorithm
	2. Second-Chance (Clock) algorithm

Refer to another post __"Cache and Page Replacement Algorithms"__. 

### Solution to Thrashing

1. More RAM
1. Less program running together
1. Assign working priorities
1. Improve [spatial locality](http://en.wikipedia.org/wiki/Thrashing_(computer_science)#Solutions) by replacing loops, i.e.

Replace 

	// recall that in C, arrays use Row-major order
	int m[256][256]; 
	for (k=0; k<256; k++) { 
		for (i=0; i<256; i++) { 
			m[i][k] = something(); 
		}
	}

with

	int m[256][256]; 
	for (i=0; i<256; i++) { 
		for (k=0; k<256; k++) {
			// consecutive values of k reside in adjacent memory locations 
			m[i][k] = something(); 
		}
	}

So that the use of data elements is within relatively [close storage locations](http://en.wikipedia.org/wiki/Locality_of_reference). 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] OOD Design of Elevator]]></title>
    <link href="http://okckd.github.io/blog/2014/08/26/Design-OOD-elevator/"/>
    <updated>2014-08-26T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/26/Design-OOD-elevator</id>
    <content type="html"><![CDATA[### Question 

[link](http://thought-works.blogspot.sg/2012/11/object-oriented-design-for-elevator-in.html)

> Object Oriented design for Elevator in a multi-storied apartment 

### A Single Elevator

Use Case: 

1. User
    1. press a button to summon the lift
    1. press a button to get to a specific floor
1. Button
    1. floor button and level button
    1. illuminates when pressed
    1. place an 'elevator request' when pressed
1. Elevator
    1. moves up/down
    1. open/close the door

<img class="middle" src="/assets/images/elevator-class-diagram.png">

__ElevatorRequests Class__

Each button press results in an elevator request which has to be served. Each of these requests is tracked at a global place. ElevatorRequests, the class which stores elevator requests can use different strategies to schedule the elevator requests. 

__ElevatorController__

The elevator is controlled by a controller class which we call ElevatorController. The elevator controller instructs the elevator what to do and also can shutdown/start up the elevator of the building. The elevator controller reads the next elevator request to be processed and serves it. 

__Button (Abstract) Class__

Button is abstract class defining common behavior like illuminate, doNotIlluminate. FloorButton, ElevatorButton extend Button type and define placeRequest() which is invoked when the button is pressed. 

In conclusion, __ElevatorController__ runs the show by reading the __ElevatorRequests__ to process and instructing the __Elevator__ what to do. User send request by pressing __Buttons__. 

### Extend the answer to multiple elevators

1. Each elevator have 1 controller. 

1. Floor based requests can be served by any elevator, thus these requests are added to a common area accessible by all controllers. 

1. Each elevator controller runs as a separate thread and checks if it can process a floor request. Mind synchronization issues. 
]]></content>
  </entry>
  
</feed>
