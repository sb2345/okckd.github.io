<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-12-23T15:10:24+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Override/overload Java Main Method]]></title>
    <link href="http://okckd.github.io/blog/2014/12/22/overload-override-java-main-method/"/>
    <updated>2014-12-22T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/12/22/overload-override-java-main-method</id>
    <content type="html"><![CDATA[### Can we overload main method in Java?

Can. But only __public static void main(String[] args)__ will be used when [your class is launched by the JVM](http://stackoverflow.com/questions/3759315/can-we-overload-the-main-method-in-java). 

You can call other __main() method__ yourself from code. 

Eg.

    class Simple{  
      public static void main(int a){  
      System.out.println(a);  
      }  

      public static void main(String args[]){  
      System.out.println("main() method invoked");  
      main(10);  
      }  
    }

output: 

    main() method invoked
    10

### Can we override main method in Java?

No.

[MAIN is a class method](http://stackoverflow.com/questions/9083876/override-main-method). Hence, it does not makes sense to "override" it (or any static method). The concept of "overriding" is only for instance methods.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Common Root of Java Classes]]></title>
    <link href="http://okckd.github.io/blog/2014/12/22/common-root-java-class/"/>
    <updated>2014-12-22T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/12/22/common-root-java-class</id>
    <content type="html"><![CDATA[### Common Root Class

__java.lang.Object__, [link](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)

All Java classes are derived from this [common root class](http://www.ntu.edu.sg/home/ehchua/programming/java/J3b_OOPInheritancePolymorphism.html), that defines common behaviors.

Common behaviors include multi-threading and garbage collector etc.

#### Some methods

[ref](http://docs.oracle.com/javase/tutorial/java/IandI/objectclass.html)

protected Object clone() throws CloneNotSupportedException
> Creates and returns a copy of this object.

public boolean equals(Object obj)
> Indicates whether some other object is "equal to" this one.

protected void finalize() throws Throwable
> Called by the garbage collector on an object when garbage collection determines that there are no more references to the object

public final Class getClass()
> Returns the runtime class of an object.

public int hashCode()
> Returns a hash code value for the object.

public String toString()
> Returns a string representation of the object.

### Sync-related methods

The notify, notifyAll, and wait methods of Object all play a part in synchronizing the activities of independently running threads in a program. 

    public final void notify()
    public final void notifyAll()
    public final void wait()
    public final void wait(long timeout)
    public final void wait(long timeout, int nanos)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Interface Extend Another Interface]]></title>
    <link href="http://okckd.github.io/blog/2014/12/22/can-interface-extend-interface/"/>
    <updated>2014-12-22T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/12/22/can-interface-extend-interface</id>
    <content type="html"><![CDATA[### Can an interface extend another interface in Java?

Yes. Just remember that you should implement the methods in [both interfaces](http://www.programmerinterview.com/index.php/java-questions/java-can-an-interface-extend-another-interface/). 

Example in Java source code [link1](http://docs.oracle.com/javase/7/docs/api/java/util/List.html), [link2](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html): 

    public interface List<E> extends Collection<E> {
    
    }

    public interface Collection<E> extends Iterable<E> {
    
    }

In conclusion, [ref](http://stackoverflow.com/questions/19546357/can-an-interface-extend-multiple-interfaces-in-java)

An interface can extend multiple interfaces.

A class can implement multiple interfaces.

However, a class can only extend a single class.

#### a special case

    interface A
    {
        void test();
    }

    interface B 
    {
        void test();
    }

    class C implements A, B
    {
        @Override
        public void test() {

        }
    }

Well, a single implementation works for the both methods. This implementation works no problem. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Discussion of Polymorphism (Undone)]]></title>
    <link href="http://okckd.github.io/blog/2014/12/22/Discussion-of-Polymorphism/"/>
    <updated>2014-12-22T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/12/22/Discussion-of-Polymorphism</id>
    <content type="html"><![CDATA[### Polymorphism

Polymorphism is to use common interface instead of concrete implementation while coding. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.

http://www.ntu.edu.sg/home/ehchua/programming/java/J3b_OOPInheritancePolymorphism.html

http://javarevisited.blogspot.sg/2011/08/what-is-polymorphism-in-java-example.html

### Example 

Example of Bicycle class given on [official oracle website](http://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html): 

    public class Bicycle{
        public void printDescription(){
            System.out.println("\nBike is " + "in gear " + this.gear
                + " with a cadence of " + this.cadence +
                " and travelling at a speed of " + this.speed + ". ");
        }
    }

    public class MountainBike extends Bicycle {
        private String suspension;

        public void printDescription() {
            super.printDescription();
            System.out.println("The " + "MountainBike has a" +
                getSuspension() + " suspension.");
        }
    }

    public class RoadBike extends Bicycle{
        private int tireWidth;

        public void printDescription(){
            super.printDescription();
            System.out.println("The RoadBike" + " has " + getTireWidth() +
                " MM tires.");
        }
    }

    public class TestBikes {
        public static void main(String[] args){
            Bicycle bike01, bike02, bike03;

            bike01 = new Bicycle(20, 10, 1);
            bike02 = new MountainBike(20, 10, 5, "Dual");
            bike03 = new RoadBike(40, 20, 8, 23);

            bike01.printDescription();
            bike02.printDescription();
            bike03.printDescription();
        }
    }

The output: 

    Bike is in gear 1 with a cadence of 20 and travelling at a speed of 10. 

    Bike is in gear 5 with a cadence of 20 and travelling at a speed of 10. 
    The MountainBike has a Dual suspension.

    Bike is in gear 8 with a cadence of 40 and travelling at a speed of 20. 
    The RoadBike has 23 MM tires.

Referring to the same page, __JVM calls the appropriate method for the object that is referred to in each variable__. It does not call the method that is defined by the variable's type. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] DNS Communication Protocol]]></title>
    <link href="http://okckd.github.io/blog/2014/09/12/DNS-communication-protocol/"/>
    <updated>2014-09-12T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/12/DNS-communication-protocol</id>
    <content type="html"><![CDATA[### Question 

> What protocol is used for communicating with a DNS? 

### Answer

[Domain Name System](http://en.wikipedia.org/wiki/Domain_Name_System) (DNS) is a hierarchical distributed naming system for computers, services, or any resource connected to the Internet or a private network. It associates various information with domain names assigned to each of the participating entities. Most prominently, it translates easily memorized domain names to the numerical IP addresses needed for the purpose of locating computer services and devices worldwide. The Domain Name System is an essential component of the functionality of the Internet. 

[DNS primarily uses](http://en.wikipedia.org/wiki/Domain_Name_System#Protocol_transport) __User Datagram Protocol (UDP)__ on port number 53 to serve requests. 

DNS queries consist of a single UDP request from the client followed by a single UDP reply from the server. 
]]></content>
  </entry>
  
</feed>
