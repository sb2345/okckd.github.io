<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | My Octopress Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-08T12:20:56+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Distributed Network Bottleneck]]></title>
    <link href="http://okckd.github.io/blog/2014/08/07/Distributed-network-bottleneck/"/>
    <updated>2014-08-07T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/07/Distributed-network-bottleneck</id>
    <content type="html"><![CDATA[## Question

[link](http://www.mitbbs.com/article_t/JobHunting/32702821.html)

> 一个distributed的环境，有很多机器，现在你发现性能有问题，可能是网络带宽造成的，你怎么解决？ (你不能更换网络设备的前提下)

### Answer

1. Identify problem 

首先得判定是否真的是网络造成的，就算是网络问题，哪些机器之间的网络问题？ 这个得先大概了解high level component dependency relationship，

看看是不是cpu memory disk都没有问题。 可以profile几个机器看看是不是 a lot of time spent waiting for network calls.

2. Locate the faulty component

判定是网络问题之后看是哪些components之间，或是某个component里面有很多网络通讯。

3. Improvement

不能更换设备的话，能不能改network topology来让critical path machine之间的带宽有改善。

要是不能改topology就只能改程序了。还是先identify top offender,然后就只能慢慢改了

4. What's more

要还有时间的话就可以聊聊问啥不能换设备，是资金问题还是用的已经是top of the line了？

或者是在public cloud上？

Answer suggested by user __remus__. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Networks and TCP/IP]]></title>
    <link href="http://okckd.github.io/blog/2014/08/06/Networks-and-TCP-IP/"/>
    <updated>2014-08-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/06/Networks-and-TCP-IP</id>
    <content type="html"><![CDATA[## Overview

__[Internet protocol suite](http://en.wikipedia.org/wiki/Internet_protocol_suite)__ is a networking model and communications protocols used by the Internet. It is commonly known as __TCP/IP__. 

Four abstraction layers:

1. Application layer
1. Transport layer
1. Internet layer
1. Link layer

<img class="middle" src="/assets/images/network-layers-connected.png">

The protocols are maintained by the __Internet Engineering Task Force__ (IETF). 

### A summary of four-layer model

1. Application: authentication, compression, and end user services
1. Transport: handles the flow of data between systems and provides access to the network for applications via the BSD socket library
1. Network: packet routing
1. Link: Kernel OS/device driver interface to the network interface on the computer. 

[source](http://searchnetworking.techtarget.com/news/851291/TCP-Internet-Protocol-and-OSI)

### More details

__The Application layer__: 

1. where applications create user data and communicate with other applications on another host (make use of Transport Layer to provide reliable or unreliable pipes to other processes). 
1. different application architecture, such as the client-server model and peer-to-peer. 
1. SMTP, FTP, SSH, HTTP all operate above this layer. 
1. processes are addressed via ports. 

<img class="middle" src="/assets/images/network-ports.gif">

> Well-known official port numbers are in the range of 0 - 255. Port 256 - 1023 are reserved for other well-known services. 1024 - 65535 are neither in-use nor reserved. They are used when TCP/IP automatically assigns port numbers to client programs. 

__The Transport Layer__:

1. performs host-to-host communications.
1. "UDP" provides unreliable datagram service. 
1. "__Transmission Control Protocol__" provides flow-control, connection establishment, and reliable transmission of data.

__The Internet layer__:

1. exchange datagrams across network boundaries. 
1. establishes internetworking thus establishes the Internet.
1. "__Internet Protocol__", defines IP addresses and the routing structures used for the TCP/IP protocol suite. 
1. routing: transport datagrams to the next IP router that has the connectivity to a network closer to the final data destination.

__The Link layer__:

1. defines the networking methods within local network link without intervening routers. 
1. describe local network topology and the interfaces needed to effect transmission of Internet layer datagrams to next-neighbor hosts.

### Difference from OSI

The Internet protocol suite was in use __before the OSI model__, and is well established worldwide. 

[The OSI model](http://electronicdesign.com/what-s-difference-between/what-s-difference-between-osi-seven-layer-network-model-and-tcpip), however, is a proven concept that is used in all other data communications protocols. It will continue to be used as a guideline for all other communications applications.

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] HTTP Headers]]></title>
    <link href="http://okckd.github.io/blog/2014/08/06/HTTP-headers/"/>
    <updated>2014-08-06T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/06/HTTP-headers</id>
    <content type="html"><![CDATA[## Overview

__HTTP is an Application Layer protocol__ which stands for "Hypertext Transfer Protocol". The entire World Wide Web uses it. 

There're __[a series of sessions](http://www.differencebetween.net/technology/internet/difference-between-tcp-and-http/)__ in HTTP where client sends a request and server sends a reply message back to client including the request, an error message, or another piece of information. 

[HTTP headers](http://code.tutsplus.com/tutorials/http-headers-for-dummies--net-8039) are the core part of these HTTP requests and responses, and they carry information about the client browser, the requested page, the server and more. 

### Example HTTP request

    GET /tutorials/other/top-20-mysql-best-practices/ HTTP/1.1
    Host: net.tutsplus.com
    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us,en;q=0.5
    Accept-Encoding: gzip,deflate
    Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
    Keep-Alive: 300
    Connection: keep-alive
    Cookie: PHPSESSID=r2t5uvjq435r4q7ib3vtdjq120
    Pragma: no-cache
    Cache-Control: no-cache

### Example HTTP response

    HTTP/1.x 200 OK
    Transfer-Encoding: chunked
    Date: Sat, 28 Nov 2009 04:36:25 GMT
    Server: LiteSpeed
    Connection: close
    X-Powered-By: W3 Total Cache/0.8
    Pragma: public
    Expires: Sat, 28 Nov 2009 05:36:25 GMT
    Etag: "pub1259380237;gz"
    Cache-Control: max-age=3600, public
    Content-Type: text/html; charset=UTF-8
    Last-Modified: Sat, 28 Nov 2009 03:50:37 GMT
    X-Pingback: http://net.tutsplus.com/xmlrpc.php
    Content-Encoding: gzip
    Vary: Accept-Encoding, Cookie, User-Agent

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Top 20+ MySQL Best Practices - Nettuts+</title>
    <!-- ... rest of the html ... -->

These HTTP requests are also sent and received for other things, such as images, CSS files, JavaScript files etc. That is why browser may send 40 or more HTTP requests for 1 article page. 

### Request Methods

The three most commonly used request methods are: GET, POST and HEAD. 

#### GET: Retrieve a Document

Get an article site: 

    GET /tutorials/other/top-20-mysql-best-practices/ HTTP/1.1

Submit a form information: 

    GET /foo.php?first_name=John&last_name=Doe&action=Submit HTTP/1.1

Each input is added in the __query string__. 

#### POST: Send Data to the Server 

Even though you can send data to the server using GET and the query string, __in many cases POST will be preferable__. Sending large amounts of data using GET is not practical and has limitations.

    POST /foo.php HTTP/1.1
    Host: localhost
    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-us,en;q=0.5
    Accept-Encoding: gzip,deflate
    Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
    Keep-Alive: 300
    Connection: keep-alive
    Referer: http://localhost/test.php
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 43

    first_name=John&last_name=Doe&action=Submit

The header contains no query string no more. The last line (data) is the query string. 

#### HEAD: Retrieve Header Information 

HEAD is identical to GET, except the server does not return the content in the HTTP response. It's faster than GET. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Application Server vs. Web Server]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/Web-server-application-server/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/Web-server-application-server</id>
    <content type="html"><![CDATA[## Overview

A Web server __exclusively handles HTTP requests__, whereas an application server __serves business logic__ to application programs through any number of protocols. 

### Web server

A [Web server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __handles the HTTP protocol__. When the Web server receives an HTTP request, it responds with an HTTP response, such as sending back an HTML page. 

To process a request, a Web server may __respond with a static HTML page__, or delegate the __dynamic response__ such as CGI scripts, JSPs (JavaServer Pages), servlets, ASPs (Active Server Pages), server-side JavaScripts, or some other server-side technology. 

### Application server

An [Application server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __exposes business logic to client applications__ through various protocols, possibly including HTTP. The clients can include GUIs (graphical user interface) running on a PC, a Web server, or even other application servers. 

In most cases, the server exposes this business logic through a component API, such as __the EJB (Enterprise JavaBean) component model__ found on J2EE (Java 2 Platform, Enterprise Edition) application servers. 

Moreover, the application server manages its own resources. Such gate-keeping duties include security, transaction processing, resource pooling, and messaging. 

There's [a nice example](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) as well. 

### Another explanation

Web server on the left. 

<table>
    <tbody><tr id="row1" title="Application Server vs Web Server comparison - What is it?"><td class="acol bg-color bg-img font-color">What is it?</td>                <td id="valtd1_1" class="vcol bg-color bg-img font-color">A server that exposes business logic to client applications through various protocols including HTTP.</td>
                <td id="valtd1_2" class="vcol bg-color bg-img font-color">A server that handles HTTP protocol.</td>
                </tr><tr id="row2" title="Application Server vs Web Server comparison - Job"><td class="acol bg-color bg-img font-color">Job</td>                <td id="valtd2_1" class="vcol bg-color bg-img font-color">Application server is used to serve web based applications and enterprise based applications(i.e servlets, jsps and ejbs...). Application servers may contain a web server internally.</td>
                <td id="valtd2_2" class="vcol bg-color bg-img font-color">Web server is used to serve web based applications.(i.e servlets and jsps)</td>
                </tr><tr id="row3" title="Application Server vs Web Server comparison - Functions"><td class="acol bg-color bg-img font-color">Functions</td>                <td id="valtd3_1" class="vcol bg-color bg-img font-color">To deliver various applications to another device, it allows everyone in the network to run software off of the same machine.</td>
                <td id="valtd3_2" class="vcol bg-color bg-img font-color">Keeping HTML, PHP, ASP etc  files available for the web browsers to view when a user accesses the site on the web, handles HTTP requests from clients.</td>
                </tr><tr id="row4" title="Application Server vs Web Server comparison - Supports"><td class="acol bg-color bg-img font-color">Supports</td>                <td id="valtd4_1" class="vcol bg-color bg-img font-color">distributed transaction and EJB's</td>
                <td id="valtd4_2" class="vcol bg-color bg-img font-color">Servlets and JSP</td>
                </tr><tr class="comparisonRow diff lastRow" id="row5" title="Application Server vs Web Server comparison - Resource utilization"><td class="acol bg-color bg-img font-color">Resource utilization</td>                <td id="valtd5_1" class="vcol bg-color bg-img font-color">High</td>
    <td id="valtd5_2" class="vcol bg-color bg-img font-color">Low</td>
</tr></tbody></table>
<br />

#### Miscellaneous

For [J2EE](http://www.geekinterview.com/question_details/17043), Web server is used only for __Jsp and Servlets__ and static functionality. It doesn't support __EJB and JMS and JAAS__.

Application server is basically: 

> AppServer = WebServer + EJB container. 

__Tomcat is web container__ where as Apache is web server.

An Application Server may include a Web Server inside it.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Upcasting, Downcasting and Object Slicing]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/Upcasting-and-Object-Slicing/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/Upcasting-and-Object-Slicing</id>
    <content type="html"><![CDATA[### Upcasting and Downcasting

Java permits an object of a __subclass type to be treated as an object of any superclass type__. This is [called upcasting](http://forum.codecall.net/topic/50451-upcasting-downcasting/). Upcasting is done automatically, while downcasting must be manually done. 

[Example](http://forum.codecall.net/topic/50451-upcasting-downcasting/):

<img class="middle" src="/assets/images/java-upcasting-downcasting.jpg">

	Cat c1 = new Cat();
	Animal a = c1; //automatic upcasting to Animal
	Cat c2 = (Cat) a; //manual downcasting back to a Cat

Upcasting is always typesafe but can cause the so called ["slicing" problem](http://forums.codeguru.com/showthread.php?321676-What-are-upcasting-and-downcasting-dangers). 

### Object Slicing

[Object slicing](https://www.java.net/also-in-java/object-slicing-and-component-design-java) is defined as the conversion of an object into something with less information (typically a superclass)

### More detail

If you upcast an object, it will __lose all it's properties__, which were inherited. For example, if you cast a Cat to an Animal, it will lose properties inherited from Mammal and Cat. Note, that __data will not be lost, you just can't use it__, until you downcast the object to the right level. 

### Example 

	class Base {
		void doSomething() {
			System.out.println("Base");
		}
	}

	class Derived extends Base {
		void doSomething() {
			System.out.println("Derived");
		}
	}

	public class JavaUpcasting {
		public static void main(String[] args) {
			Base instance = new Derived();
			instance.doSomething();
		}
	}

This will output "Derived". 
]]></content>
  </entry>
  
</feed>
