<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | My Octopress Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-08-05T12:54:51+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[General] Application Server vs. Web Server]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/Web-server-application-server/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/Web-server-application-server</id>
    <content type="html"><![CDATA[## Overview

A Web server __exclusively handles HTTP requests__, whereas an application server __serves business logic__ to application programs through any number of protocols. 

### Web server

A [Web server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __handles the HTTP protocol__. When the Web server receives an HTTP request, it responds with an HTTP response, such as sending back an HTML page. 

To process a request, a Web server may __respond with a static HTML page__, or delegate the __dynamic response__ such as CGI scripts, JSPs (JavaServer Pages), servlets, ASPs (Active Server Pages), server-side JavaScripts, or some other server-side technology. 

### Application server

An [Application server](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) __exposes business logic to client applications__ through various protocols, possibly including HTTP. The clients can include GUIs (graphical user interface) running on a PC, a Web server, or even other application servers. 

In most cases, the server exposes this business logic through a component API, such as __the EJB (Enterprise JavaBean) component model__ found on J2EE (Java 2 Platform, Enterprise Edition) application servers. 

Moreover, the application server manages its own resources. Such gate-keeping duties include security, transaction processing, resource pooling, and messaging. 

There's [a nice example](http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html) as well. 

### Another explanation

Web server on the left. 

<table>
    <tbody><tr id="row1" title="Application Server vs Web Server comparison - What is it?"><td class="acol bg-color bg-img font-color">What is it?</td>                <td id="valtd1_1" class="vcol bg-color bg-img font-color">A server that exposes business logic to client applications through various protocols including HTTP.</td>
                <td id="valtd1_2" class="vcol bg-color bg-img font-color">A server that handles HTTP protocol.</td>
                </tr><tr id="row2" title="Application Server vs Web Server comparison - Job"><td class="acol bg-color bg-img font-color">Job</td>                <td id="valtd2_1" class="vcol bg-color bg-img font-color">Application server is used to serve web based applications and enterprise based applications(i.e servlets, jsps and ejbs...). Application servers may contain a web server internally.</td>
                <td id="valtd2_2" class="vcol bg-color bg-img font-color">Web server is used to serve web based applications.(i.e servlets and jsps)</td>
                </tr><tr id="row3" title="Application Server vs Web Server comparison - Functions"><td class="acol bg-color bg-img font-color">Functions</td>                <td id="valtd3_1" class="vcol bg-color bg-img font-color">To deliver various applications to another device, it allows everyone in the network to run software off of the same machine.</td>
                <td id="valtd3_2" class="vcol bg-color bg-img font-color">Keeping HTML, PHP, ASP etc  files available for the web browsers to view when a user accesses the site on the web, handles HTTP requests from clients.</td>
                </tr><tr id="row4" title="Application Server vs Web Server comparison - Supports"><td class="acol bg-color bg-img font-color">Supports</td>                <td id="valtd4_1" class="vcol bg-color bg-img font-color">distributed transaction and EJB's</td>
                <td id="valtd4_2" class="vcol bg-color bg-img font-color">Servlets and JSP</td>
                </tr><tr class="comparisonRow diff lastRow" id="row5" title="Application Server vs Web Server comparison - Resource utilization"><td class="acol bg-color bg-img font-color">Resource utilization</td>                <td id="valtd5_1" class="vcol bg-color bg-img font-color">High</td>
    <td id="valtd5_2" class="vcol bg-color bg-img font-color">Low</td>
</tr></tbody></table>
<br />

#### Miscellaneous

For [J2EE](http://www.geekinterview.com/question_details/17043), Web server is used only for __Jsp and Servlets__ and static functionality. It doesn't support __EJB and JMS and JAAS__.

Application server is basically: 

> AppServer = WebServer + EJB container. 

__Tomcat is web container__ where as Apache is web server.

An Application Server may include a Web Server inside it.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] MapReduce]]></title>
    <link href="http://okckd.github.io/blog/2014/08/05/Map-Reduce/"/>
    <updated>2014-08-05T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/05/Map-Reduce</id>
    <content type="html"><![CDATA[### An Overview

__[MapReduce](http://searchcloudcomputing.techtarget.com/definition/MapReduce) is a software framework__, or a __[distributed programming model](http://www.theserverside.com/news/1321219/Why-Should-You-Care-About-MapReduce)__ intended for processing massive amounts of data in large clusters. 

Google uses MapReduce for __indexing every Web page__ they crawl

1. __Map__, a function that parcels out work to different nodes in the distributed cluster.

1. __Reduce__, another function that collates the work and resolves the results into a single value.

### 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Overview of Big Data Technology]]></title>
    <link href="http://okckd.github.io/blog/2014/08/04/Overview-Big-Data-Tech/"/>
    <updated>2014-08-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/04/Overview-Big-Data-Tech</id>
    <content type="html"><![CDATA[[link](https://datajobs.com/what-is-hadoop-and-nosql)

### Traditional RDBMS

Data is organized in a highly-structured manner, following the relational model. 

The need for the data to be well-structured actually becomes a substantial burden at extremely large volumes.

### NoSQL

A completely different framework of databases that allows for high-performance, agile processing of information at massive scale. 

NoSQL centers around the concept of distributed databases. 

It's horizontally scalable; as data continues to explode, just add more hardware to keep up.

### Hadoop

Hadoop is not a type of database, but rather a software ecosystem that allows for massively parallel computing.

Hadoop is [an open source implementation](http://www.javaworld.com/article/2077907/open-source-tools/mapreduce-programming-with-apache-hadoop.html?page=3) of the MapReduce programming model. Hadoop relies not on Google File System (GFS), but on its own Hadoop Distributed File System (HDFS). 

### MapReduce

An example of the Hadoop ecosystem is MapReduce. 

It's a computational model that basically takes intensive data processes and spreads the computation across a potentially endless number of servers. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[General] Model–view–controller]]></title>
    <link href="http://okckd.github.io/blog/2014/08/04/MVC/"/>
    <updated>2014-08-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/04/MVC</id>
    <content type="html"><![CDATA[### Overview

[Model–view–controller]((http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) (MVC) is a software architectural pattern for implementing __user interfaces__. 

### Components 

The central component of MVC, __the model__, captures the application's behavior in terms of its problem domain, independent of the user interface. The model directly manages the application's data, logic and rules. 

__A view__ can be any output representation of information, such as a chart or a diagram; multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants. 

The third part, __the controller__, accepts input and converts it to commands for the model or view.

Early web MVC frameworks took a thin client approach that placed almost the entire MVC on server. As client technologies have matured, MVC components can be executed partly on the client(AJAX). 

### Other good explanation

MVC is a [user interface design pattern](http://geekswithblogs.net/gregorymalcolm/archive/2009/07/14/user-interface-patterns.aspx). 

1. Controller – Represents interactions, typically with the mouse or keyboard, or in the case of web applications, in the form of HTTP requests.
 
1. View – Renders the graphical output of the application
 
1. Model – Everything else. In particular this includes __the data and business logic__. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Hadoop Cluster]]></title>
    <link href="http://okckd.github.io/blog/2014/08/04/Hadoop-cluster/"/>
    <updated>2014-08-04T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/08/04/Hadoop-cluster</id>
    <content type="html"><![CDATA[[link](http://searchbusinessanalytics.techtarget.com/definition/Hadoop-cluster)

### 

A Hadoop cluster is __a special type of computational cluster__ designed specifically for storing and analyzing huge amounts of unstructured data in a distributed computing environment. 

Such clusters __run Hadoop's open source distributed processing software__ on low-cost commodity computers. 

Typically one machine in the cluster is designated as the __NameNode__ and another machine the as __JobTracker__; these are the masters. The rest of the machines in the cluster act as both __DataNode and TaskTracker__; these are the slaves.

Hadoop clusters are known for boosting the speed of data analysis applications. They also are highly scalable.

As of early 2013, Facebook was recognized as having the largest Hadoop cluster in the world. 
]]></content>
  </entry>
  
</feed>
