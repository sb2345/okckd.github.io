<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | Shuatiblog.com]]></title>
  <link href="www.shuatiblog.com/blog/categories/design/atom.xml" rel="self"/>
  <link href="www.shuatiblog.com/"/>
  <updated>2015-06-10T10:29:06+08:00</updated>
  <id>www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Design] Cryptographic standard, AES and RSA ]]></title>
    <link href="www.shuatiblog.com/blog/2015/06/09/Cryptographic-standards-AES-RSA/"/>
    <updated>2015-06-09T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/06/09/Cryptographic-standards-AES-RSA</id>
    <content type="html"><![CDATA[# Overview

## 3 areas of cryptographic standard:

1. encryption standard

    1. Data Encryption Standard (obsolete)
    1. Triple DES
    1. __Advanced Encryption Standard (AES)__
    1. __RSA__
    1. OpenPGP
    1. CipherSaber

1. hash standard

    1. __MD5__
    1. __SHA-1__
    1. SHA-2
    1. HMAC
    1. PBKDF2

1. digital signature standard

    1. Digital Signature Algorithm (DSA)
    1. RSA
    1. Elliptic

## Symmetric-key algorithm 

[Use the same cryptographic keys](http://en.wikipedia.org/wiki/Symmetric-key_algorithm) for both encryption and decryption. 

The keys represent a shared secret between two parties, and maintain a private information link. 

This requirement that both parties have access to the secret key is one of the main drawbacks. 

## Public-key cryptography 

The public key is used: 

1. encrypt plaintext 
1. verify a digital signature

private key is used: 

1. decrypt ciphertext 
1. create a digital signature.

# Encryption standard

## RSA Vs. AES

__RSA is very computationally expensive__ by comparison with AES. It involves mathematics with very large numbers, whilst AES can be implemented with relatively simple bit operations. 

[RSA is a public-key encryption algorithm](http://security.stackexchange.com/questions/10949/encryption-should-i-be-using-rsa-or-aes) (asymmetric), while AES is a symmetric key algorithm. Often a cryptosystem will use both algorithms. 

[A good compromise is to](http://stackoverflow.com/questions/13238674/aes-vs-rsa-to-encrypt-large-size-of-data) use RSA to encrypt the symmetric key that is then used in AES encryption of the larger data.

## GitHub

uses RSA encryption.

# hash standard

## MD5

The MD5 message-digest algorithm is a widely used cryptographic hash function producing a 128-bit (16-byte) hash value, or 32 digit Hex.

> d -> 8277e0910d750195b448797616e091ad
>
> good morning -> 2b849500e4585dab4196ec9a415edf8f

## SHA-1

SHA-1 produces a 160-bit (20-byte) hash value, or 40 digit Hex.

## For more

About MD5, SHA-1 and other, refer to __[Design] Cryptographic Hash, MD5 and Digital Signature__

# digital signature standard

A valid digital signature gives a recipient confidence that the message was created by a known sender.

commonly used for software distribution, financial transactions 

<img class="middle" src="/assets/images/digital_signature.png">

[To create a digital signature](http://searchsecurity.techtarget.com/definition/digital-signature), signing software (such as an email program) creates a one-way hash of the data to be signed. The private key is then used to encrypt the hash. 

> The reason for encrypting the hash instead of entire message is that a hash function can convert an arbitrary input into a fixed length value, which is usually much shorter. 

Other party validate the integrity of the data by using the signer's public key to decrypt the hash.

> Note: you can choose to '__ Add digital signature to this message __' in Microsoft Office. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Linux and TCP ports ]]></title>
    <link href="www.shuatiblog.com/blog/2015/06/08/linux-and-tcp-ports/"/>
    <updated>2015-06-08T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/06/08/linux-and-tcp-ports</id>
    <content type="html"><![CDATA[# Overview 

[a port](http://en.wikipedia.org/wiki/Port_%28computer_networking%29) is __a software construct serving as a communications endpoint__ in a computer's host operating system.

purpose of ports is to uniquely identify different applications or processes running on a single computer and thereby __enable them to share a single physical connection to a packet-switched network__ like the Internet.

The protocols that __primarily use ports__ are the Transport Layer protocols, such as TCP and UDP. 

__Port info can be viewed on Linux /etc/services files__.

## there're only 65536 ports

In TCP/IP stack, port number field is just 16bit size unsigned integer. Port number thus ranging from 0 to 65535.

## well-known ports 

__Well-known ports__ (or Privileged Ports) are those from 0 through 1023. 

+ 20 & 21: File Transfer Protocol (FTP)
+ 22: Secure Shell (SSH)
+ 23: Telnet remote login service
+ 25: Simple Mail Transfer Protocol (SMTP)
+ 53: Domain Name System (DNS) service
+ 80: Hypertext Transfer Protocol (HTTP) used in the World Wide Web
+ 110: Post Office Protocol (POP3)
+ 119: Network News Transfer Protocol (NNTP)
+ 143: Internet Message Access Protocol (IMAP)
+ 161: Simple Network Management Protocol (SNMP)
+ 194: Internet Relay Chat (IRC)
+ 443: HTTP Secure (HTTPS)
+ 465: SMTP Secure (SMTPS)

## Socket

[Socket is combination of](http://www.linuxnix.com/2011/05/important-port-numbers-linux-system-administrator.html) software Port and IP address.

## Protocol number

In an IP header, [the Protocol field identifies the service](https://technet.microsoft.com/en-us/library/cc959827.aspx) in the next higher level in the protocol stack to which data is passed. __Do not confuse this with port number, which is used for communication by TCP/UDP__. 

<table>
<tbody><tr><th>
<p>
Service</p>
</th><th>
<p>
Protocol Number</p>
</th></tr>
<tr><td>
<p>
Internet Control Message Protocol (ICMP)</p>
</td><td>
<p>
1</p>
</td></tr>
<tr><td>
<p>
Transmission Control Protocol (TCP)</p>
</td><td>
<p>
6</p>
</td></tr>
<tr><td>
<p>
User Datagram Protocol (UDP)</p>
</td><td>
<p>
17</p>
</td></tr>
<tr><td>
<p>
General Routing Encapsulation (PPTP data over GRE)</p>
</td><td>
<p>
47</p>
</td></tr>
<tr><td>
<p>
Authentication Header (AH) IPSec</p>
</td><td>
<p>
51</p>
</td></tr>
<tr><td>
<p>
Encapsulation Security Payload (ESP) IPSec</p>
</td><td>
<p>
50</p>
</td></tr>
<tr><td>
<p>
Exterior Gateway Protocol (EGP)</p>
</td><td>
<p>
8</p>
</td></tr>
<tr><td>
<p>
Gateway-Gateway Protocol (GGP)</p>
</td><td>
<p>
3</p>
</td></tr>
<tr><td>
<p>
Host Monitoring Protocol (HMP)</p>
</td><td>
<p>
20</p>
</td></tr>
<tr><td>
<p>
Internet Group Management Protocol (IGMP)</p>
</td><td>
<p>
88</p>
</td></tr>
<tr><td>
<p>
MIT Remote Virtual Disk (RVD)</p>
</td><td>
<p>
66</p>
</td></tr>
<tr><td>
<p>
OSPF Open Shortest Path First</p>
</td><td>
<p>
89</p>
</td></tr>
<tr><td>
<p>
PARC Universal Packet Protocol (PUP)</p>
</td><td>
<p>
12</p>
</td></tr>
<tr><td>
<p>
Reliable Datagram Protocol (RDP)</p>
</td><td>
<p>
27</p>
</td></tr>
<tr><td>
<p>
Reservation Protocol (RSVP) QoS</p>
</td><td>
<p>
46</p>
</td></tr>
</tbody></table>

> [When the IP packet contain TCP data](https://learningnetwork.cisco.com/thread/61029) the protocol number field will have the value 6 in it, so the payload will be sent to the TCP stack, TCP would then use the port numbers to send the data to the correct application. The same is for UDP with protocol number 17.
 
> Another way to look at the IP protocol number field is, if we didn't have this field in the IP packet header, IP would only be capable of carrying one type of data, while adding this field allowed the IP to carry multiple types of data differentiated by the protocol number, the same goes for TCP/UDP using TCP/UDP ports to serve multiple applications and Ethernet using the Ethertype, and so on.

## can multiple app bind to (or listen to) the same port?

Can't. [Because You can only have one application](http://stackoverflow.com/questions/1694144/can-two-applications-listen-to-the-same-port) listening on a single port at one time. 

> the app opens a port, gets a handle to it, and the OS notifies it (via that handle) when a client connection (or a packet in UDP case) arrives.
>
> If the OS allowed two apps to open the same port, how would it know which one to notify?


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] HBase and HDFS]]></title>
    <link href="www.shuatiblog.com/blog/2015/02/15/HBase-and-HDFS/"/>
    <updated>2015-02-15T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/02/15/HBase-and-HDFS</id>
    <content type="html"><![CDATA[### Overview 

[Hadoop Distributed File System](http://hortonworks.com/hadoop/hdfs/) (HDFS) is a __Java-based file system__ that provides scalable and reliable data storage that is designed to span large clusters of commodity servers. __HDFS, MapReduce__, and YARN form the core of Apache™ Hadoop®.

[Apache HBase](http://hbase.apache.org/) is the Hadoop database, a distributed, scalable, big data store.

#### Hadoop

Hadoop is [basically 2 things](http://stackoverflow.com/a/16930049), a FS (Hadoop Distributed File System) and a computation framework (MapReduce). 

HDFS allows you store huge amounts of data in a distributed (provides faster read/write access) and redundant (provides better availability) manner. And MapReduce allows you to process this huge data in a distributed and parallel manner. 

But MapReduce is not limited to just HDFS. 

#### HDFS and HBase

Being a FS, HDFS lacks the random read/write capability. It is good for sequential data access. And this is where HBase comes into picture. It is a NoSQL database that runs on top your Hadoop cluster and provides you random real-time read/write access to your data.

### Now, the Comparison

__HDFS is a distributed file system__. [ref](http://qr.ae/BqrVU)

1. It is optimized for streaming access of large files. You would typically store files that are in the 100s of MB upwards on HDFS and access them through MapReduce to process them in batch mode. 
2. HDFS files are write once files. You can append to files in some of the recent versions but that is not a feature that is very commonly used. Consider HDFS files as write-once and read-many files. There is no concept of random writes.
3. HDFS doesn't do random reads very well.

__HBase is a database that stores it's data in a distributed filesystem__. 

The filesystem of choice typically is HDFS owing to the tight integration between HBase and HDFS. It doesn't mean that HBase can't work on any other filesystem.

1. Low latency access to small amounts of data from within a large data set. You can access single rows quickly from a billion row table.
2. Flexible data model to work with and data is indexed by the row key.
3. Fast scans across tables.
4. Scale in terms of writes as well as total volume of data.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (4) ]]></title>
    <link href="www.shuatiblog.com/blog/2015/02/14/speed-up-web-page-4/"/>
    <updated>2015-02-14T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/02/14/speed-up-web-page-4</id>
    <content type="html"><![CDATA[### What hijacks your load time

#### 1. Too Many HTTP Requests

This is the single biggest contributor to performance problems in most web pages. 

1. Concatenate scripts and stylesheets

1. Combine images with sprites (put common images into a single large image file, then use CSS to position and selectively display the appropriate portion of the sprite image)

1. Use fewer images, more CSS. 

#### 2. Minimal Client-side Processing

1. Validation on client. (eg. form input)

1. Use web standards and MVC separation, making a maintainable, accessible, future-proof and max-performance website. 

    Think of the HTML as the model, the CSS as the view, and the JavaScript as the controller. This separation tends to make code more efficient and maintainable, and makes many optimization techniques much more practical to apply.

1. Push presentation code into the client tier (eg. Charts and graphs — push raw data to the client in JSON format, and use JavaScript and CSS to create pretty graphs.)

1. Leverage Ajax techniques (only requiring small parts of the page to change in response to user actions)

#### 3. Low Number of Parallel Requests

Fetch a script, parse and execute it, then fetch another one... this will use up all the available connections. There are things you can do to your HTML to allow virtually any browser to make many requests at once, which has a huge impact on latency.

1. Use browser-appropriate domain sharding

1. Use intelligent script loading

1. Leverage Keep-Alive (reuse the same TCP connection for multiple HTTP request/response cycles)

#### 4. Failure to leverage browser cache / local storage

1. [HTTP cache overview](http://www.mnot.net/cache_docs/)

1. Leverage local storage

#### 5. Third-party widgets

1. Avoid third-party widgets!
1. Try to use widgets that provide asynchronous implementations, so their inevitably terrible performance impacts their widget without dragging down your entire UX with it.

#### 7. Failure to Use a Global Network

Amazon S3. 

Ref: http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Design] Speed Up Webpage for Slow Connection (3) ]]></title>
    <link href="www.shuatiblog.com/blog/2015/02/14/speed-up-web-page-3/"/>
    <updated>2015-02-14T00:00:00+08:00</updated>
    <id>www.shuatiblog.com/blog/2015/02/14/speed-up-web-page-3</id>
    <content type="html"><![CDATA[### Website KPI

There are [3 interesting phases](https://community.compuwareapm.com/community/display/PUB/Best+Practices+on+Web+Site+Performance+Optimization) of a web site from an end-user performance perspective. 

1. First Impression
1. OnLoad 
1. Fully Loaded Time.

### Loading Time

__Question: what percentage of the time a user spends waiting for your page to load is spent after the HTML comes back to their browser__? 

It is typically __[over 90%](http://www.sitepoint.com/seven-mistakes-that-make-websites-slow/)__. 

Most of the time users spend waiting on your website is spent after the HTML page has been retrieved by their browser. 

#### Fetching the HTML is just the beginning

__In a nutshell, browsers parse your page’s HTML, sequentially discovering its assets__ (such as scripts, stylesheets, and images), requesting and then either parsing and executing them or displaying them as appropriate. 

But these assets are not simply fetched all at once. Instead, the __browser opens a limited number of connections to the server(s)__ referenced by the page. There is __overhead involved in establishing TCP and HTTP connections__, and some __unavoidable latency__ in pushing the request and response bytes back and forth across the network.

So, in general, round trips between the browser and server are expensive. The structure of the HTML markup, the number and the ordering of its assets, are absolutely critical factors in its performance.
]]></content>
  </entry>
  
</feed>
