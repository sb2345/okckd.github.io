<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cc150v4 | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/cc150v4/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-09-11T01:23:37+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 15.5 SQL Students Grade Database (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/30/sql-design-students-grade-database/"/>
    <updated>2014-09-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/30/sql-design-students-grade-database</id>
    <content type="html"><![CDATA[### Question

> Imagine a simple database storing information for students' grades. Design what this database might look like, and provide a SQL query to return a list of the honor roll students (top 10%), sorted by their grade point average. 

### Answer 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 15.4 SQL Design Company Database (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/30/sql-design-company-database/"/>
    <updated>2014-09-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/30/sql-design-company-database</id>
    <content type="html"><![CDATA[### Question

> Draw an entity-relationship diagram for a database with companies, people, and professionals (people who work for companies). 

### Answer 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 15.3 SQL Denormalization (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/30/sql-denormalization/"/>
    <updated>2014-09-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/30/sql-denormalization</id>
    <content type="html"><![CDATA[### Question

> What is denormalization? Explain the pros and cons. 

### Answer 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.6 Top Million From Billion]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/top-million-from-billion/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/top-million-from-billion</id>
    <content type="html"><![CDATA[### Question

> Describe an algorithm to find the largest 1 million numbers in 1 billion numbers. 

> Assume that the computer memory can hold all one billion numbers. 

### Solution

There're enough discussion on __Top K problems__ so far in this blog. The suggest solutions is: 

1. Sort

1. Min Heap, O(n logm) time. 

1. Quick select algorithm. O(n) time. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.3 Generate M Int From Array of Size N]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/generate-m-from-array-of-n/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/generate-m-from-array-of-n</id>
    <content type="html"><![CDATA[### Question

> Write a method to randomly generate a set of m integers from an array of size n. Each element must have equal probability of being chosen. 

### Solution

This is very similar to another post I wrote: __[Question] Shuffle An Array (Fisher–Yates)__.

The basic idea is to choose element one by one using RNG. After choosing an int, swap it to top and __then mark this element as 'dead'__. Next time, the RNG will not touch on the 'dead' elements. 

__Very similar to Fisher–Yates Shuffle__, and the code below is written by me. 

### Code

	public static int[] pickMRandomly(int[] original, int m) {
		int[] ans = new int[m];
		for (int i = 0; i < m; i++) {
			int rand = Question.listRand.get(i);
			// note: rand is RN in the range [i, max]
			ans[i] = original[rand];
			original[rand] = original[i];
			// now (i)th position in original is dead
			// no one cares what value is at original[i]
		}
		return ans;
	}
]]></content>
  </entry>
  
</feed>
