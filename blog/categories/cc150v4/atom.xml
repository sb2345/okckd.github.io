<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cc150v4 | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/cc150v4/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-12-03T17:49:26+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.6 Top Million From Billion]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/top-million-from-billion/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/top-million-from-billion</id>
    <content type="html"><![CDATA[### Question

> Describe an algorithm to find the largest 1 million numbers in 1 billion numbers. 

> Assume that the computer memory can hold all one billion numbers. 

### Solution

There're enough discussion on __Top K problems__ so far in this blog. The suggest solutions is: 

1. Sort

1. Min Heap, O(n logm) time. 

1. Quick select algorithm. O(n) time. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.12 Sub-matrix With Largest Sum]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/submatrix-with-largest-sum/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/submatrix-with-largest-sum</id>
    <content type="html"><![CDATA[### Question

> Given an NxN matrix of positive and negative integers, write code to find the sub-matrix with the largest possible sum. 

### Solution

I wrote about this question before: __[Question] Max Sum In A 2D Array (sub-matrix)__, and the solution gave a better time complexity (O(n^3)) than in the book (O(n^4)). 

1. locate a row - O(n)
1. locate another row - O(n)
1. compute sub value of that column - O(n), and then find largest subarray in array - also O(n)
1. The above 3 steps each take O(n) time, total time is O(n^3). 

Please refer to the other post for more detail. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.3 Generate M Int From Array of Size N]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/generate-m-from-array-of-n/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/generate-m-from-array-of-n</id>
    <content type="html"><![CDATA[### Question

> Write a method to randomly generate a set of m integers from an array of size n. Each element must have equal probability of being chosen. 

### Solution

This is very similar to another post I wrote: __[Question] Shuffle An Array (Fisher–Yates)__.

The basic idea is to choose element one by one using RNG. After choosing an int, swap it to top and __then mark this element as 'dead'__. Next time, the RNG will not touch on the 'dead' elements. 

__Very similar to Fisher–Yates Shuffle__, and the code below is written by me. 

### Code

	public static int[] pickMRandomly(int[] original, int m) {
		int[] ans = new int[m];
		for (int i = 0; i < m; i++) {
			int rand = Question.listRand.get(i);
			// note: rand is RN in the range [i, max]
			ans[i] = original[rand];
			original[rand] = original[i];
			// now (i)th position in original is dead
			// no one cares what value is at original[i]
		}
		return ans;
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.8 Full Text Search]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/full-text-search/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/full-text-search</id>
    <content type="html"><![CDATA[### Question

> Given a string s and an array of smaller strings T, design a method to search s for each small string in T. 

### Solution

__This is a very classic questio of string__, especially favored by Google. 

The solution is __suffix tree__. For example, using "bibs" to build a suffix tree like this: 

<img class="middle" src="/assets/images/suffix-tree-example-bibs.png">

The building of suffix tree and searching is not a very lengthy code. It's posted below and it's not written by me. 

### Code

Main method:

	public static void main(String[] args) {
		String testString = "mississippi";
		String[] stringList = { "is", "sip", "hi", "sis" };
		SuffixTree tree = new SuffixTree(testString);
		for (String s : stringList) {
			ArrayList<Integer> list = tree.getIndexes(s);
			if (list != null) {
				System.out.println(s + ": " + list.toString());
			} else {
				System.out.println(s + ": does not exist.");
			}
		}
	}

SuffixTree.java

	public class SuffixTree {
		SuffixTreeNode root = new SuffixTreeNode();
		
		public SuffixTree(String s) {
			// create a suffix tree with input string s
			for (int i = 0; i < s.length(); i++) {
				String suffix = s.substring(i);
				root.insertString(suffix, i);
			}
		}
		
		public ArrayList<Integer> getIndexes(String s) {
			return root.getIndexes(s);
		}
	}

SuffixTreeNode.java

	public class SuffixTreeNode {

		char value;
		HashMap<Character, SuffixTreeNode> children;
		ArrayList<Integer> indexes = new ArrayList<Integer>();

		public SuffixTreeNode() {
			children = new HashMap<Character, SuffixTreeNode>();
		}

		public void insertString(String s, int index) {
			indexes.add(index);
			if (s != null && s.length() > 0) {
				value = s.charAt(0);
				SuffixTreeNode child = null;
				if (children.containsKey(value)) {
					child = children.get(value);
				} else {
					child = new SuffixTreeNode();
					children.put(value, child);
				}
				String remainder = s.substring(1);
				child.insertString(remainder, index);
			}
		}

		public ArrayList<Integer> getIndexes(String s) {
			if (s == null || s.length() == 0) {
				return indexes;
			} else {
				char first = s.charAt(0);
				if (children.containsKey(first)) {
					String remainder = s.substring(1);
					return children.get(first).getIndexes(remainder);
				}
			}
			return null;
		}
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.11 Find Subsquare With Black Border]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/find-subsquare-with-black-border/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/find-subsquare-with-black-border</id>
    <content type="html"><![CDATA[### Question

> Imagine you have a square matrix, where each cell is filled with either black or white. 

> Design an algorithm to find the maximum subsquare such that all four borders are filled with black pixels. 

### Solution

There is no better way to solve this except Brute Force. First find a point (as the top-left corner), and then test square size from large to small. 

The code below is from the book. 

### Code

	public static Subsquare findMaxSquareInMatrix(int[][] matrix) {
		assert (matrix.length > 0);
		for (int row = 0; row < matrix.length; row++) {
			assert (matrix[row].length == matrix.length);
		}

		int N = matrix.length;
		int currentMaxSize = 0;
		Subsquare sq = null;
		int col = 0;

		// Iterate through each column from left to right
		while (N - col > currentMaxSize) { // See step 4 above
			for (int row = 0; row < matrix.length; row++) {
				// starting from the biggest
				int size = N - Math.max(row, col);
				while (size > currentMaxSize) {
					if (checkSquareBorders(matrix, row, col, size)) {
						currentMaxSize = size;
						sq = new Subsquare(row, col, size);
						break; // go to next (full) column
					}
					size--;
				}
			}
			col++;
		}
		return sq;
	}

	private static boolean checkSquareBorders(int[][] matrix, int row, int col,
			int size) {
		// Check top and bottom border.
		for (int j = 0; j < size; j++) {
			if (matrix[row][col + j] == 1) {
				return false;
			}
			if (matrix[row + size - 1][col + j] == 1) {
				return false;
			}
		}

		// Check left and right border.
		for (int i = 1; i < size - 1; i++) {
			if (matrix[row + i][col] == 1) {
				return false;
			}
			if (matrix[row + i][col + size - 1] == 1) {
				return false;
			}
		}
		return true;
	}
]]></content>
  </entry>
  
</feed>
