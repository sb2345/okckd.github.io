<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cc150v4 | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/cc150v4/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-09-11T15:48:26+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 15.5 SQL Students Grade Database (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/30/sql-design-students-grade-database/"/>
    <updated>2014-09-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/30/sql-design-students-grade-database</id>
    <content type="html"><![CDATA[### Question

> Imagine a simple database storing information for students' grades. Design what this database might look like, and provide a SQL query to return a list of the honor roll students (top 10%), sorted by their grade point average. 

### Answer 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 15.4 SQL Design Company Database (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/30/sql-design-company-database/"/>
    <updated>2014-09-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/30/sql-design-company-database</id>
    <content type="html"><![CDATA[### Question

> Draw an entity-relationship diagram for a database with companies, people, and professionals (people who work for companies). 

### Answer 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 15.3 SQL Denormalization (`)]]></title>
    <link href="http://okckd.github.io/blog/2014/09/30/sql-denormalization/"/>
    <updated>2014-09-30T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/30/sql-denormalization</id>
    <content type="html"><![CDATA[### Question

> What is denormalization? Explain the pros and cons. 

### Answer 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.6 Top Million From Billion]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/top-million-from-billion/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/top-million-from-billion</id>
    <content type="html"><![CDATA[### Question

> Describe an algorithm to find the largest 1 million numbers in 1 billion numbers. 

> Assume that the computer memory can hold all one billion numbers. 

### Solution

There're enough discussion on __Top K problems__ so far in this blog. The suggest solutions is: 

1. Sort

1. Min Heap, O(n logm) time. 

1. Quick select algorithm. O(n) time. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 20.12 Sub-matrix With Largest Sum]]></title>
    <link href="http://okckd.github.io/blog/2014/09/10/submatrix-with-largest-sum/"/>
    <updated>2014-09-10T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/10/submatrix-with-largest-sum</id>
    <content type="html"><![CDATA[### Question

> Given an NxN matrix of positive and negative integers, write code to find the sub-matrix with the largest possible sum. 

### Solution

I wrote about this question before: __[Question] Max Sum In A 2D Array (sub-matrix)__, and the solution gave a better time complexity (O(n^3)) than in the book (O(n^4)). 

1. locate a row - O(n)
1. locate another row - O(n)
1. compute sub value of that column - O(n), and then find largest subarray in array - also O(n)
1. The above 3 steps each take O(n) time, total time is O(n^3). 

Please refer to the other post for more detail. 
]]></content>
  </entry>
  
</feed>
