<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cc150v4 | Woodstock Blog]]></title>
  <link href="http://okckd.github.io/blog/categories/cc150v4/atom.xml" rel="self"/>
  <link href="http://okckd.github.io/"/>
  <updated>2014-09-08T17:34:26+08:00</updated>
  <id>http://okckd.github.io/</id>
  <author>
    <name><![CDATA[Charlie Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 11.4 Test Webpage Without Tools]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/test-webpage-without-tool/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/test-webpage-without-tool</id>
    <content type="html"><![CDATA[### Question

> How would you load test a webpage without using any test tools?

### Solution

#### Load testing

__[Load testing](http://en.wikipedia.org/wiki/Load_testing)__ is testing under normal and peak load condition. It's also called software performance testing, reliability testing, and volume testing.

#### Steps

__First identify the performance-critical scenarios__, which might include: 

1. response time
1. throughput
1. resource utilization
1. max load that system can bear

__Then, design tests to simulate the load__: we can create virtual users by a multi-threaded program with 1000 thread, each acting as a user loading the page. We measure response time of each user. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 11.2 Random Error Debugging 2]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/random-error-debugging-2/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/random-error-debugging-2</id>
    <content type="html"><![CDATA[### Question

> You are given the source to an application which crashes when it is run After running it ten times in a debugger, you find it never crashes in the same place The application is single threaded, and uses only the C standard library What programming errors could be causing this crash? How would you test each one? 

### Solution

This question is from CC150v4, but my previous post __[Testing] Random error debugging 1__ already covered this question. 

Again, the answer is very similar: 

1. Depends on random variable
	1. RNG
	1. depends on user input
	1. depends on system date/time
1. Memory Leak
	1. out of RAM
	1. heap overflow
	1. stack data corruption
1. System Dependency
	1. depends on external module
	1. depends on some system attributed that's being modified by another application (this is especially for hardware-facing applications)

In general, __Web server is more prone to Memory Leak__, and program that runs __close to system level__ is more prone to system dependency errors. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.5 Java Reflection]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-reflection/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-reflection</id>
    <content type="html"><![CDATA[### Question

> Explain what object reflection is in Java and why it is useful. 

### Solution

__[Java Reflection](http://tutorials.jenkov.com/java-reflection/index.html) makes it possible to inspect classes, interfaces, fields and methods at runtime__, without knowing the names of the classes, methods etc. at compile time. It is also possible to instantiate new objects, invoke methods and get/set field values using reflection.

For example, say you have an object of [an unknown type in Java](http://stackoverflow.com/a/37632), and __you would like to call a 'doSomething' method on it if one exists__. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, __but using reflection__, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to. Like this:

	Method method = foo.getClass().getMethod("doSomething", null);
	method.invoke(foo, null);

#### Usage in Junit

One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to __look through your classes for methods tagged with the @Test annotation__, and will then call them when running the unit test. 

### Code

The following example code is covered in [this post](http://tutorials.jenkov.com/java-reflection/index.html): 

	public class JavaReflection {

		public static void main(String[] args) {
			Method[] methods;

			methods = ListNode.class.getMethods();

			for (Method method : methods) {
				System.out.println(formatMethodName(method.getName() + "()")
						+ method.getDeclaringClass());
			}
		}

		private static String formatMethodName(String methodName) {
			for (int i = methodName.length(); i < 30; i++) {
				methodName += ".";
			}
			return methodName;
		}
	}
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.1 Java Private Constructor]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-private-constructor/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-private-constructor</id>
    <content type="html"><![CDATA[### Question

> In terms of inheritance, what is the effect of keeping a constructor private? 

### Solution

[If the programmer](http://www.javapractices.com/topic/TopicAction.do?Id=40) does not provide a constructor for a class, __the system will always provide a default, public no-argument constructor__. 

To disable this default constructor, simply add a private no-argument constructor to the class. 

Two categories of usage: 

1. Object construction is entirely forbidden
	
	1. class offers only static members (sometimes called __[utility class](http://stackoverflow.com/a/17342889)__) 

1. Object construction is private only

	1. a class needs to prevent the caller from creating objects, like Singleton
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CC150v4] 14.6 Java HashMap Counter]]></title>
    <link href="http://okckd.github.io/blog/2014/09/08/java-hashmap-counter/"/>
    <updated>2014-09-08T00:00:00+08:00</updated>
    <id>http://okckd.github.io/blog/2014/09/08/java-hashmap-counter</id>
    <content type="html"><![CDATA[### Question

> Suppose you are using a map in your program, how would you count the number of times the program calls the put() and get() functions? 

### Solution

__Write a wrapper class upon the HashMap Class__, and override the ger() and put() methods. 

However, what if we have multiple instance of hashmap? __Solution is to use a static variable to count__. Some answers are found [here](http://stackoverflow.com/a/20027116). 

Good question this is! 

### Code 

	public static class MyHashMap<K, V> extends HashMap<K, V> {

		private static final long serialVersionUID = 1L;
		private static int count = 0;

		public V put(K key, V value) {
			count++;
			return super.put(key, value);
		}

		public V get(Object key) {
			count++;
			return super.get(key);
		}

		public static int getCount() {
			return count;
		}
	}
]]></content>
  </entry>
  
</feed>
