<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ninechap | Shuatiblog.com]]></title>
  <link href="http://www.shuatiblog.com/blog/categories/ninechap/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-08-27T18:14:38+08:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[NineChap Sys] System Design Class 2 ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/08/26/design-class-2/"/>
    <updated>2015-08-26T00:00:00+08:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/08/26/design-class-2</id>
    <content type="html"><![CDATA[# Overview

This class covers database design: 

1. design data with class and inheritance
1. design a user system (Netflix 2015)
1. design a payment system (Yelp, BigCommerce 2015)

# Example One

__design account (login/out) system__ for our radio. 

## Step one, scenario

1. register, update, remove account
1. login/out
1. user balance, VIP services

## Step Two, necessary

1. Ask
	
	1. total user: 100 million
	1. daily user: 1 million
	
1. predict

	1. daily active user in 3 month: 10 million
	1. register percentage: 1%
	1. daily new register: 100 thousand

1. more predict

	1. login percentage: 15%
	1. average login frequency: 1.2 (ppl may input wrong password 20% of time)
	1. daily login attempts: 10 million * 15% * 1.2 = 1.8 million
	1. average login frequency: 1.8 million / 24hr = 21 login/sec
	1. normal login frequency: 21 * 2 = 42 login/sec
	1. peak login frequency: 42 * 3 = 126 login/sec

## Step Three, Application

<img class="middle" src="/assets/images/design-class2-app-design.png">

## Step Four, Kilobit

Data - User table should contain name and password. What else? 

    class User {
        int userId; (primary key)
        String name;
        String password;
    }

Data - User Table

    class UserTable {
        list<User> table;

        public insert(){}
        public delete(User){}
        public update(User){}
        public User select(){}
    }

> __[CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete)__, (Sometimes called SCRUD with an "S" for Search) are the four basic functions of persistent storage.

# Step Five, Evolve

## advanced 2: __verification and forbidden accounts__

We have to know the concept of __Account State Lifecycle Graph__:

<img class="middle" src="/assets/images/design-class2-account-life-cycle.png">

1. ban: fake user, advertising users... bannned by the management

1. inactive: user choose to suspend his own account, voluntarily.

1. delete account: normally we won't remove all related data (just make userId as "deleted"). Otherwise a lot of data can be violated. All your chatting history __actually remains__. 软删除。

### redesign User Table

Old User table:

    class User {
        int userId; (primary key)
        String name;
        String password;
    }

Modified User table:

    class User {
        int userId;
        char name[10];
        char hiddenPassword[10];
        int state;
    }

1. We added state, to support Account life cycle. 

1. We changed username to fixed size, for better performance on searching and storing. Can prevent certain attacks, too. 

1. save encrypted password. 

## advanced 3: login/out process

1. User account auto logged out after a certain period of time.
1. multiple account logged in at same time.

<img class="middle" src="/assets/images/design-class2-session-life-cycle.png">

### Session

__Session is a conversation__ between user and server. 

1. User can have >1 session, if he log in from different devices.
1. Session must be verified, thus we have to keep __sessionId__.

Session status: "iPad online", "PC online"...

Modify User table: 

    class User {
        int userId;
        char name[10];
        char hiddenPassword[10];
        int state;
        List<session> sessionList;
    }

Important in Session table:

1. device ID
1. time-out period

    class Session {
        private sessionId;
        int userId;
        
        int deviceCode;
        long timeOut;
    }

User table would include a __session list__. 

### further improvement: session

1. we update sessionList very frequently.
1. size of sessionList is dynamic.

Solution: seperate the table. 

<img class="middle" src="/assets/images/design-class2-user-session-table.png">

Question: When to clean up the session data (considering huge amount of data and frequent calculation)?

> Answer: every end of day. Or store sessions in-memory, so it lose all the data when machine restarts (it is used in Gaming platforms). Or we can clean up one user's session list whenever the user did a new log-in. 
>
> We do not remove session whenever it expires. It's too much calculation. 

### further improvement: inheritance

Apply inheritance to UserTable and SessionTable: 

    class Table {
        list<Row*> table;

        public insert(){}
        public delete(){}
        public update(){}
        public User select(){}
    }

    class UserTable extends Table {
    }
    
    class SessionTable extends Table {
    }

As for the Row class:

    class Row {
        List<Attributes> row;
    }
    
    class User extends Row {
    }
    
    class Session extends Row {
    }

## advanced 4: search in table

1. find my userId
1. find my userId range

Solution 1: add __HashMap__ in the table. Can do search in O(1), but can't find range. 

Solution 2: __BST data structure__. Can do search range and search in O(log2 n) time. 

### Best solution: B+ tree

__[B+ tree](https://en.wikipedia.org/wiki/B%2B_tree)__ - everything in O(logb n) which is __close to constant time__. 

Plus, B+ tree is hard disk friendly. Read more on a future post. 

## advanced 5: VIP services

User could buy VIP services using his acccount balance. 

    class ProService {
        int userId;
        double money;
        long endTime;

        public addMoney(){}
        public buyPro(){}
    }

### Problem 1: System crashes before adding time

Solution: __transaction with log__

    WriteLOG
    Transaction_1123: BEGIN
    money=20; endTime=16_07_2016

If system crash happens here, system will read the log, recover and roll back all original data. Try not to complete the transaction - just fail it. 

    WriteLOG
    Transaction_1123: BEGIN
    money=20; endTime=16_07_2016
    WriteLOG
    Transaction_1123: END
    money=10; endTime=16_08_2016

> What happens if system crash during writing the log? or during the rollback?

### Problem 2: check list

1. one user id have 2 corresponding pro-services information.
1. Shallow user: a pro-services info does not have corresponding user. 

Solution: have a checker class.

### Problem 3:  ]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap Sys] System Design Class 1 ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/08/23/design-class-1/"/>
    <updated>2015-08-23T00:00:00+08:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/08/23/design-class-1</id>
    <content type="html"><![CDATA[# System Design

## defination 

the process of defining the __architecture, components, modules, interfaces and data__ to satisfy specified __requirements__. 

1. conceptual design (macro)
2. logical design
3. physical design (micro)

### Top-down design

Eg. MS Office, Huawei Security System

### Bottom-up design

Most start-up use, MVP first using Medetor + MongoDb. 

## 5 steps (SNAKE Principle):

1. __Scenario__: case/interface - input
1. __Necessary__: constrain/hypothesis - input
1. __Application__: service/algorithm - output
1. __Kilobit__: data - output
1. __Evolve__ - solution

# A top-down example

Example one: __design a radio__

## Step One, Scenario

1. brain storm

    1. register/log in
    1. play music
    1. recommendation

1. prioritize

    1. play music
        1. Get channel
        1. select a channel
        1. play

## Step Two, Necessary

1. ask

    1. total user - 100,000,000
    1. __daily users - 1,000,000__

1. predict

    1. user analysis
    1. Traffic analysis
    1. Memory analysis
    1. QPS

Details:

1. user analysis

    > Avg Concurrent users = daily users __/ 5__ = 200,000
    >
    > Peak Concurrent users = concurrent user __\* 3__ = 600,000

    considering your product may grow in the next 3 month:
    
    > Max Peak users in 3 month = Peak users __\* 10__ = 6,000,000

1. Traffic analysis

	> Request of new music per user: 1 music/min
	>
	> Music size = 3MB
	>
	> Max peak traffic (in 3 months) = 6,000,000 \* 3MB / 60 = 300GB/s

1. Memory analysis

	> Memory per user (metadata) = 10KB
	>
	> Max daily memory = 1,000,000 \* 10 \* 10 = 100 million KB = 100GB
    >
    > (10 times of avg daily user)

## Step Three, Application

1. Replay the case, one service for each
1. Merge the services

<img class="middle" src="/assets/images/design-class1-basic-receptionist.png">

## Step Four, Kilobit: data

1. Append 1 dataset for each service

    Eg. User service: stability, more addition, less modify and deletion.

    Eg. Channel Service: high concurrency, MongoDB

    Eg. Music Service: MP3 File Systems

<img class="middle" src="/assets/images/design-class1-reco-5.png">

## Last Step, Evolve

1. Better: constrains 

    eg. able to handle 300GB/s traffic?

1. Broader: new cases

    share music? delete user account?

1. Deeper: details design

From views of __Performance, Scalability and Robustness__.

<img class="middle" src="/assets/images/design-class1-snake.jpg">

# A bottom-up example

Example two: __design a recommendation module__

## A simple algo: 

    u1={m3,m5,m7,m11}
    u2={m1,m2,m3,m4,m5,m6,m7,m8,m9}
    Similarity( u1, u2 ) = 3
    
m - music

u - user

Similarity = # of same music for different users

## Adv algo: 

find his __top-1 similar user__. Stay tuned for future posts. 

## Use the 5 Steps (SNAKE)

1. Step One, Scenario
1. Step Two, Necessary
1. Step Three, Application
1. Step Four, Kilobit: data
1. Last Step, Evolve

Because this question is relatively easy, we will not do case-analysis (Macro). 

__Instead, we do micro design__ by starting at the interface. 

## Step One, Scenario

Interface 

    class Recommender {
        public int findSimilarUser(int userId) {
            //
        }
    }

## Step Two, Necessary

1. ask
    1. total users = 100,000,000
    1. total music = 10,000,000
    1. peak users in 3 month = 6,000,000
    
    However, not everyone is logged in. Thus we won't need to recommend for everybody. On average, the logged-in ratio is 1% - 30%. Let's assume 5%. 
    
    1. participation percentage = 5%
    
    And user's interest won't change every minute. Let's recalculate only after 10 minutes.
    
    1. calculation frequency = 1 update/10min/user

1. predict

    1. user analysis (skip)
    1. Traffic analysis (skip)
    1. Memory analysis (skip)
    1. QPS
    
    Peak QPS = 6,000,000 \* 5% / (10 \* 60) = 500/s

## Step Three, Application

__The simpliest algorithm: BF compare__. The complexity is O(m n) for each user, where m is # of music a person likes, and n is # of total users. For k users, it takes O(k m n) time (k can be = peak concurrent users). 

This is roughly 0.2s per user. Thus __Max QPS = 5__. 

> One word about complexity-to-seconds estimation. 
>
> O(n ^ 3) -> 1s
>
> O(n ^ 2) -> 0.2s
>
> O(n) -> 20ms
>
> O(k) -> k ms

## Step Four, Kilobit: data

Very simple:

<img class="middle" src="/assets/images/design-class1-reco-1.png">

## Last Step, Evolve

Read on. 

# How to go from Level 0 to Level 1

Refer to the previous question. How can we improve???

1. performance
1. scalability
1. robustness

## performance

A better algo: Inverted Index

<img class="middle" src="/assets/images/design-class1-reco-2.png">

Avg performance increase to ~ 20ns (with some optimization of MapReduce procedure, discuss later). 

__Max QPS increase to 50__. 

## scalability

Use a __dispatcher__ to re-direct the requests to multiple machines. 

<img class="middle" src="/assets/images/design-class1-reco-3.png">

### How many machines do we need then? 

Well we need 500 QPS. The algo above achieves ~ 50 QPS. __Should we need 10 machines__?

The answer is NO. A machine with 8 (or 16) core CPU could be able to handle. 

We can also have a __hot-standby__, to be safe. 

> hot standby is used as a failover mechanism to provide reliability in system configurations. 
>
> When a key component fails, the hot spare is switched into operation. 

## robustness

Tips about system design for senior engineers: 

> __Draw 1 machine first__. This machine can contains multiple datasets and run multiple processes. 
>
> On top of this machine, the interface layer is __one single Manager process__. The Manager is in charge of almost everything: handling data lost, handle high concurrency, copy multiple instance of itself... 
>
> Like this: 

<img class="middle" src="/assets/images/design-class1-reco-6.png">

### Back-end

Now we need __a cluster of datasets__ (which has Manager on top of it), and __a cluster of Recommenders__. Manager is in charge of copying multiple instances. 

Dataset can be put in different physical locations. Recommender don't really need, cuz it's only do calculation job. 

### Receiving requests

Just now we used __Receptionist (or Dispatcher)__ to handle request. Now we use a __Web service__ (eg. Apache). It's not necessary to make it a cluster. 

### Big Brother

We need a __monitor system__ to oversee everything. 

Also, Big Brother is in charge of heart-beat. If not received, Big Brother have some double-check machanism. 

<img class="middle" src="/assets/images/design-class1-reco-4.png">

### Connecting the dots

__Dispatcher__ is used to connect the 4 components. It's like a messaging queue that collects and distributes jobs among everybody (eg. control and distributed info). 

It can be stateful or stateless. 

Keep in mind __the connection between Dataset and Recommender__ remains. It's slow going thru Dispatcher. 

### Distribute it

During development, the 5 components can be put on same machine. When we deploy distributely, we use __Socket connection (keep alive)__ to connect them. 

Notice the Web Service is __connection heavy__, which consume large CPU and RAM resource. It's better to seperate to one machine. 

Big brother is read/write heavy, so it's OKAY to put on same machine with Dispatcher. 

Since Dataset and Recommender have data exchange, it's a good idea to put on same machine. 

### Additional questions

Implement Dispatcher with __consumer-producer__ model. 
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap 10] Additional Questions]]></title>
    <link href="http://www.shuatiblog.com/blog/2014/07/07/NineChap-additional/"/>
    <updated>2014-07-07T00:00:00+08:00</updated>
    <id>http://www.shuatiblog.com/blog/2014/07/07/NineChap-additional</id>
    <content type="html"><![CDATA[The following questions does not appear in NineChap, but they all worth reading. 

### Question List 

1. __[Longest Substring Without Repeating Characters ](/blog/2014/04/27/longest-substring-without-repeating/)__

1. __[Minimum Window Substring ](/blog/2014/05/21/Minimum-Window-Substring/)__ - very difficult

1. __[Scramble String ](/blog/2014/05/23/Scramble-String/)__

1. __[Recover Binary Search Tree ](/blog/2014/05/25/Recover-Binary-Search-Tree/)__

1. __[Median of Two Sorted Arrays ](/blog/2014/04/26/Median-of-Two-Sorted-Arrays/)__ - difficult

1. __[Sudoku Solver ](/blog/2014/05/14/Sudoku-Solver/)__ - difficult

1. __[Word Search ](/blog/2014/05/21/Word-Search/)__

1. __[Simplify Path](/blog/2014/05/21/Simplify-Path/)__

1. __[Regular Expression Matching](/blog/2014/04/29/Regular-Expression-Matching/)__ - very difficult

1. __[Wildcard Matching](/blog/2014/05/15/Wildcard-Matching/)__ - difficult
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap 9] Big Date, System Design and Resume (`)]]></title>
    <link href="http://www.shuatiblog.com/blog/2014/06/30/NineChap-Big-date-system-design-resume/"/>
    <updated>2014-06-30T00:00:00+08:00</updated>
    <id>http://www.shuatiblog.com/blog/2014/06/30/NineChap-Big-date-system-design-resume</id>
    <content type="html"><![CDATA[## Resume

1. Do not write anything unrelated to CS. 
1. Do not write too long - 1 or 2 pages are fine. Senior engineer 3 pages. 
1. Do not write low GPA
1. Never ever write "proficient in anything"

## Big Data

Most classic question is "Frequent items" (refer to July's blog). 

### Find top k hot queries in a daily access log of Google. 

Variation:

1. k = 1 vs k = 100000 - majority numbers
1. low RAM vs sufficient RAM
1. single machine vs multiple machines
1. accurate vs inaccurate

Sufficient RAM

1. HashTable + Heap (min-heap)
1. Time O(n * logk), Space O(n)

Low RAM

1. Split into 1000 (i.e. LOG/M) files by hash(query) % 1000
1. Using HashTable + Heap to get top k for each files
1. Collect 1000 top k queries and get global top k
1. This method requires a lot of disk access and r/w, still slow. 

Inaccurate (reduce memory from O(n) to O(k))

1. Hash Count (only need to know this one)
    Limit the size of HashMap. The bigger the RAM, the more accurate is the result. 
1. Space Saving
1. Lossy Counting
1. Sticky Sampling
1. Count Sketch

Bloom Filter

1. Regular bloom filter - use 4 线性无关 formula
1. Counting bloom filter - support delete
1. Better DS than HashMap, but can loose some accuracy

Trie

Bitmap

Find all unique queries - use bigmap to store 3 types of states

## System Design

### Design a short url system

1. Cache 

> to store hot urls

1. Load Balance 

> Too many click in short time

1. Storage balance

> Hash value of an url and then store in 
individual machine
>
> Expansibility?

1. Consistent Hash

> Node, can increase # of machines to store information

> Migration process

1. Router

> check which machine response my query
>
> light-weight calculations
>
> what is router is down?

1. Locale

> url frequently access by China, then put the url storage in Beijing

### Need-to-know Design patterns

1. Singleton
1. Factory
1. Master-slave (esp. for relational DB)

[MapReduce: Simplified Data Processing on Large Clusters](http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf)

[The Google File System](http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf)

[BigTable: A Distributed Storage System for Structured Data](http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NineChap 8] High Frequency Questions]]></title>
    <link href="http://www.shuatiblog.com/blog/2014/06/28/NineChap-High-frequency/"/>
    <updated>2014-06-28T00:00:00+08:00</updated>
    <id>http://www.shuatiblog.com/blog/2014/06/28/NineChap-High-frequency</id>
    <content type="html"><![CDATA[## Number & Bit questions

1. __[Single Number](/blog/2014/06/01/Single-Number/)__
1. __[Single Number II](/blog/2014/06/01/Single-Number-II/)__
1. __[Single Number III](/blog/2014/06/28/Single-Number-III/)__
1. __[Single Number IV](/blog/2014/06/28/Single-Number-IV/)__
1. __[Majority Number](/blog/2014/06/28/Majority-Number/)__
1. __[Majority Number II](/blog/2014/06/28/Majority-Number-II/)__
1. __[Majority Number III](/blog/2014/06/28/Majority-Number-III/)__

## Subarray questions

Always using the idea of 前缀和. 

1. __[Best Time to Buy and Sell Stock](/blog/2014/05/28/Best-Time-to-Buy-and-Sell-Stock/)__ - 贪心法
1. __[Best Time to Buy and Sell Stock II](/blog/2014/05/28/Best-Time-to-Buy-and-Sell-Stock-II/)__
1. __[Best Time to Buy and Sell Stock III](/blog/2014/05/28/Best-Time-to-Buy-and-Sell-Stock-III/)__
1. __[Maximum Subarray](/blog/2014/05/20/Maximum-Subarray/)__
1. __[Minimum Subarray ](/blog/2014/06/28/Minimum-subarray/)__
1. __[Maximum Subarray II](/blog/2014/06/28/Maximum-subarray-II/)__
1. __[Subarray with 0 Sum](/blog/2014/07/04/Subarray-with-0-Sum/)__
1. __[Subarray with Particular Sum](/blog/2014/07/04/Subarray-with-Particular-Sum/)__
1. __[Subarray with Sum Closest](/blog/2014/07/04/Subarray-with-Sum-Closest/)__

## N Sum questions

1. __[Two Sum](/blog/2014/04/26/two-sum/)__ - difficult
1. __[3 Sum](/blog/2014/05/02/3Sum/)__
1. __[3 Sum Closest](/blog/2014/05/02/3Sum-Closest/)__
1. __[4 Sum](/blog/2014/05/03/4Sum/)__ - doing a O(n^3) solution is good enough.
1. __k sum questions__ are basically solved with O(n^(k-1)) time. Faster solution is available but too complex. 

## L 家最爱

1. __[Pow(x,n)](/blog/2014/05/15/PowXN/)__
1. __[Sqrt(x)](/blog/2014/05/21/SqrtX/)__
1. __[Trailing Zeros of Factorial](/blog/2014/07/02/Trailing-Zero-of-Factorial/)__
1. __[Check Power of 2](/blog/2014/07/04/Check-Power-of-2/)__

## Additional questions

1. __[Partition Array](/blog/2014/06/28/Partition-array/)__
1. __[Sort Color](/blog/2014/05/21/Sort-Colors/)__

## Code

#### Number questions

__Single Number__

    public int singleNumber(int[] A) {
        int x = 0;
        for (Integer a: A) {
            x = x ^ a;
        }
        return x;
    }

__Single Number II__

Last time, I used an array of size 32 to store count, but it's actually not necessary. 

    public int singleNumber(int[] A) {
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int count = 0;
            for (Integer a: A) {
                count += ((a >> i) & 1);
            }
            ans |= (count % 3) << i;
        }
        return ans;
    }

#### Subarray questions

__Best Time to Buy and Sell Stock__

    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }
        int min = prices[0];
        int profit = 0;
        for (Integer p: prices) {
            min = Math.min(min, p);
            profit = Math.max(profit, p - min);
        }
        return profit;
    }

__Best Time to Buy and Sell Stock II__

    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }
        int pre = prices[0];
        int profit = 0;
        for (Integer p: prices) {
            if (p > pre) {
                profit += p - pre;
            }
            pre = p;
        }
        return profit;
    }

__Best Time to Buy and Sell Stock III__

It's important to note the 2nd last line of the code, where we consider the corner case of doing only 1 transaction. 

It's always best to list a simple test case and walk it thru before submitting the code. 

    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }
        int len = prices.length;
        int[] dpLeft = new int[len];
        int leftMin = prices[0];
        for (int i = 1; i < len; i++) {
            dpLeft[i] = Math.max(dpLeft[i - 1], prices[i] - leftMin);
            leftMin = Math.min(leftMin, prices[i]);
        }
        int[] dpRight = new int[len];
        int rightMax = prices[len - 1];
        for (int i = len - 2; i >= 0; i--) {
            dpRight[i] = Math.max(dpRight[i + 1], rightMax - prices[i]);
            rightMax = Math.max(rightMax, prices[i]);
        }
        // now iterate the 2 DP array and find out the largest possible profit
        int profit = 0;
        for (int i = 0; i < len - 1; i++) {
            profit = Math.max(profit, dpLeft[i] + dpRight[i + 1]);
        }
        int oneTransaction = Math.max(dpLeft[len - 1], dpRight[0]);
        return Math.max(profit, oneTransaction);
    }

__Maximum Subarray__

    public int maxSubArray(int[] A) {
        if (A == null || A.length == 0) {
            return 0;
        }
        int max = Integer.MIN_VALUE;
        int pre = 0;
        // the largest sum ending at previous position in the array
        for (Integer a: A) {
            max = Math.max(max, pre + a);
            pre = Math.max(0, pre + a);
        }
        return max;
    }

#### 3Sum questions

__Two Sum__

This solution is O(nlgn) time. 

Alternatively, we can use HashMap to solve this problem with O(n) time. 

    public int[] twoSum(int[] numbers, int target) {
        // write your code here
        int[] ans = new int[2];
        if (numbers == null || numbers.length == 0) {
            return ans;
        }
        int len = numbers.length;
        Pair[] pairs = new Pair[len];
        for (int i = 0; i < len; i++) {
            pairs[i] = new Pair(numbers[i], i + 1);
        }
        Arrays.sort(pairs);
        int left = 0;
        int right = len - 1;
        while (left < right) {
            if (pairs[left].num + pairs[right].num == target) {
                ans[0] = pairs[left].index;
                ans[1] = pairs[right].index;
                Arrays.sort(ans);
                break;
            } else if (pairs[left].num + pairs[right].num > target) {
                right--;
            } else {
                left++;
            }
        }
        return ans;
    }
	
    class Pair implements Comparable<Pair> {
        int num;
        int index;
        
        public Pair(int a, int b) {
            num = a;
            index = b;
        }
        
        public int compareTo(Pair another) {
            return this.num - another.num;
        }
    }

__3 Sum__

    public ArrayList<ArrayList<Integer>> threeSum(int[] numbers) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if (numbers == null || numbers.length == 0) {
            return ans;
        }
        Arrays.sort(numbers);
        int len = numbers.length;
        for (int i = 0; i < len; i++) {
            if (i > 0 && numbers[i - 1] == numbers[i]) {
                continue;
            }
            int left = i + 1;
            int right = len - 1;
            // find 2 numbers that sums to - number[i]
            while (left < right) {
                int diff = numbers[left] + numbers[right] + numbers[i];
                if (diff == 0) {
                    ArrayList<Integer> triplet = new ArrayList<Integer>();
                    triplet.add(numbers[i]);
                    triplet.add(numbers[left]);
                    triplet.add(numbers[right]);
                    ans.add(triplet);
                }
                if (diff <= 0) {
                    left++;
                    while (left < len && numbers[left - 1] == numbers[left]) {
                        left++;
                    }
                }
                if (diff >= 0) {
                    right--;
                    while (right >= 0 && numbers[right + 1] == numbers[right]) {
                        right--;
                    }
                }
            }
        }
        return ans;
    }

__3 Sum Closest__

    public int threeSumClosest(int[] numbers, int target) {
        if (numbers == null || numbers.length == 0) {
            return 0;
        }
        Arrays.sort(numbers);
        int sum = 0;
        int diff = Integer.MAX_VALUE;
        int len = numbers.length;
        for (int i = 0; i < len; i++) {
            int left = i + 1;
            int right = len - 1;
            while (left < right) {
                int triple = numbers[left] + numbers[right] + numbers[i];
                if (triple == target) {
                    return target;
                } else if (triple < target) {
                    left++;
                } else {
                    right--;
                }
                if (Math.abs(target - triple) < diff) {
                    diff = Math.abs(target - triple);
                    sum = triple;
                }
            }
        }
        return sum;
    }

__4 Sum__

    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if (numbers == null || numbers.length == 0) {
            return ans;
        }
        Arrays.sort(numbers);
        int len = numbers.length;
        for (int i = 0; i < len - 3; i++) {
            if (i > 0 && numbers[i - 1] == numbers[i]) {
                continue;
            }
            for (int j = i + 1; j < len - 2; j++) {
                if (j > i + 1 && numbers[j - 1] == numbers[j]) {
                    continue;
                }
                int left = j + 1;
                int right = len - 1;
                while (left < right) {
                    int diff = numbers[left] + numbers[right] + numbers[i] + numbers[j] - target;
                    if (diff == 0) {
                        ArrayList<Integer> triplet = new ArrayList<Integer>();
                        triplet.add(numbers[i]);
                        triplet.add(numbers[j]);
                        triplet.add(numbers[left]);
                        triplet.add(numbers[right]);
                        ans.add(triplet);
                    }
                    if (diff <= 0) {
                        left++;
                        while (left < len && numbers[left - 1] == numbers[left]) {
                            left++;
                        }
                    }
                    if (diff >= 0) {
                        right--;
                        while (right >= 0 && numbers[right + 1] == numbers[right]) {
                            right--;
                        }
                    }
                }
            }
        }
        return ans;
    }

#### L 家最爱

__Pow(x,n)__

It's important to note that in Line 16, wrting 'while (pow * 2 <= y)' would not work (because of overflow). It took me a long time to find this bug. 

    public double pow(double x, int n) {
        if (n < 0) {
            return 1.0 / helper (x, 0 - n);
        } else {
            return helper(x, n);
        }
    }
    
    private double helper(double x, int y) {
        if (y == 0) {
            return 1.0;
        }
        int pow = 1;
        double num = x;
        while (pow <= y / 2) {
            num *= num;
            pow <<= 1;
        }
        return num * helper(x, y - pow);
    }

__Sqrt(x)__

Note that in Line 8, we must declare left and right as 'long', not 'int', otherwise there will be overflow problems. It took me a long time to find this bug. 

    public int sqrt(int x) {
        if (x < 0) {
            return -1;
        } else if (x < 2) {
            return x;
        }
        long left = 1;
        long right = x;
        while (left + 1 < right) {
            long mid = left + (right - left) / 2;
            if (mid * mid < x) {
                left = mid;
            } else if (mid * mid > x) {
                right = mid;
            } else {
                return (int) mid;
            }
        }
        return (int) left;
    }

#### Additional

__Sort Color__

    public void sortColors(int[] A) {
        if (A == null || A.length == 0) {
			return;
		}
		int len = A.length;
		partition(A, 0, len - 1, 0);
		int p = 0;
		while (p < len && A[p] == 0) {
			p++;
		}
		partition(A, p, len - 1, 1);
    }
	
	private void partition(int[] A, int start, int end, int target) {
		// find the target and put it on the left side of the array
		while (start < end) {
			while (start < A.length && A[start] == target) {
				start++;
			}
			while (end >= 0 && A[end] != target) {
				end--;
			}
			if (start > end) {
				break;
			} else {
				int temp = A[start];
				A[start] = A[end];
				A[end] = temp;
			}
		}
	}
]]></content>
  </entry>
  
</feed>
