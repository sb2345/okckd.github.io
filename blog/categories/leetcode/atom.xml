<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: leetcode | Shuatiblog.com]]></title>
  <link href="http://www.shuatiblog.com/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://www.shuatiblog.com/"/>
  <updated>2015-11-15T19:27:58-06:00</updated>
  <id>http://www.shuatiblog.com/</id>
  <author>
    <name><![CDATA[CodeMonkey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[LeetCode 188] Best Time to Buy and Sell Stock IV ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/11/04/Best-Time-to-Buy-and-Sell-Stock-IV/"/>
    <updated>2015-11-04T00:00:00-06:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/11/04/Best-Time-to-Buy-and-Sell-Stock-IV</id>
    <content type="html"><![CDATA[### Question 

[link](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/)

<div class="question-content">
              <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>

<p>Design an algorithm to find the maximum profit. You may complete at most <b>k</b> transactions.</p>

<p><b>Note:</b><br>
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/Freezen">@Freezen</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/dynamic-programming/">Dynamic Programming</a>
                  
                </span>
              
            </div>

### Solution

This question is very difficult. We need to do __DP with 2 DP arrays__, available to read [here](http://blog.csdn.net/linhuanmars/article/details/23236995). 

The 2 arrays' definition as follow:

> global[i][j]=max(local[i][j],global[i-1][j])

> 当前到达第i天可以最多进行j次交易，最好的利润是多少（global[i][j]）
>
> 当前到达第i天，最多可进行j次交易，并且最后一次交易在当天卖出的最好的利润是多少（local[i][j]）

And the formula for calculating local[] is:

> local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)，

> 第一个是全局到i-1天进行j-1次交易，然后加上今天的交易，如果今天是赚钱的话（也就是前面只要j-1次交易，最后一次交易取当前天），
>
> 第二个量则是取local第i-1天j次交易，然后加上今天的差值。

And the final code (by blogger __Code_Ganker__ from the same link) would look like this:

    public int maxProfit(int[] prices) {
        if(prices==null || prices.length==0)
            return 0;
        int[] local = new int[3];
        int[] global = new int[3];
        for(int i=0;i<prices.length-1;i++)
        {
            int diff = prices[i+1]-prices[i];
            for(int j=2;j>=1;j--)
            {
                local[j] = Math.max(global[j-1]+(diff>0?diff:0), local[j]+diff);
                global[j] = Math.max(local[j],global[j]);
            }
        }
        return global[2];
    }
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 189] Rotate Array ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/05/10/Rotate-Array/"/>
    <updated>2015-05-10T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/05/10/Rotate-Array</id>
    <content type="html"><![CDATA[### Question 

[link](https://leetcode.com/problems/rotate-array/)

<div class="question-content">
              <p></p><p>Rotate an array of <i>n</i> elements to the right by <i>k</i> steps.</p>
<p>For example, with <i>n</i> = 7 and <i>k</i> = 3, the array <code>[1,2,3,4,5,6,7]</code> is rotated to <code>[5,6,7,1,2,3,4]</code>. </p>

<p><b>Note:</b><br>
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
</p>

<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">[show hint]</a></p>
<div class="spoilers" style="display: none;"><b>Hint:</b><br>
Could you do it in-place with O(1) extra space?
</div>

<p>Related problem: <a href="http://www.shuatiblog.com/problems/reverse-words-in-a-string-ii/">Reverse Words in a String II</a></p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/Freezen">@Freezen</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/array/">Array</a>
                  
                </span>
              
            </div>

### Solution

This question is very standard "rotate 3 times" solution. 

### Code

    public class Solution {
        public void rotate(int[] nums, int k) {
            if (nums == null || nums.length == 0) {
                return;
            }
            int len = nums.length;
            k = k % len;

            reverse(nums, 0, len - k - 1);
            reverse(nums, len - k, len - 1);
            reverse(nums, 0, len - 1);
        }

        void reverse(int[] nums, int start, int end) {
            while (start < end) {
                int temp = nums[start];
                nums[start] = nums[end];
                nums[end] = temp;
                start++;
                end--;
            }
        }
    }

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 190] Reverse Bits ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/05/10/Reverse-Bits/"/>
    <updated>2015-05-10T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/05/10/Reverse-Bits</id>
    <content type="html"><![CDATA[### Question 

[link](https://leetcode.com/problems/reverse-bits/)

<div class="question-content">
              <p></p><p>Reverse bits of a given 32 bits unsigned integer.</p>

<p>For example, given input 43261596 (represented in binary as <b>00000010100101000001111010011100</b>), return 964176192 (represented in binary as <b>00111001011110000010100101000000</b>).</p>

<p>
<b>Follow up</b>:<br>
If this function is called many times, how would you optimize it?
</p>

<p>Related problem: <a href="http://www.shuatiblog.com/problems/reverse-integer/">Reverse Integer</a></p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/bit-manipulation/">Bit Manipulation</a>
                  
                </span>
              
            </div>

### Analysis

This question is standard bit manipulation. We essentially get bits one by one from n, and append it to the result. 

However, the question ask how to optimize it, to improve its performance. Em, that's interesting. 

### Solution

First code is the standard solution. 

I found another interesting solution from [programcreek](http://www.programcreek.com/2014/03/leetcode-reverse-bits-java/), which uses "swap bits" method. I've never seen this before, so I posted his solution below. 

But is it really a faster solution? 

Finally, I found something in [书影 博客](http://bookshadow.com/weblog/2015/03/08/leetcode-reverse-bits/), quoted as below: 

> 以4位为单位执行反转，将0x0至0xF的反转结果预存在一个长度为16的数组中，反转时直接查询即可。

Thus this is the best solution for performance. 

### Code

My code

    public class Solution {
        // you need treat n as an unsigned value
        public int reverseBits(int n) {
            int result = 0;
            for (int i = 0; i < 32; i++) {
                int last = n & 1;
                n >>= 1;
                result <<= 1;
                result = result | last;
            }
            return result;
        }
    }

"swap bits"

    public int reverseBits(int n) {
        for (int i = 0; i < 16; i++) {
            n = swapBits(n, i, 32 - i - 1);
        }

        return n;
    }

    public int swapBits(int n, int i, int j) {
        int a = (n >> i) & 1;
        int b = (n >> j) & 1;

        if ((a ^ b) != 0) {
            return n ^= (1 << i) | (1 << j);
        }

        return n;
    }

Best solution: 

    char tb[16] = {0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15};

    uint32_t reverseBits(uint32_t n) {
            int curr = 0;
            uint32_t ret = 0;
            uint32_t msk = 0xF;
            for(int i = 0; i < 8; i++) {
                ret = ret << 4;
                curr = msk&n;
                ret |= tb[curr];
                n = n >> 4;
            }
            return ret;
    }
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 200] Number of Islands ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/05/10/Number-of-Islands/"/>
    <updated>2015-05-10T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/05/10/Number-of-Islands</id>
    <content type="html"><![CDATA[### Question 

[link](https://leetcode.com/problems/number-of-islands/)

<div class="question-content">
              <p></p><p>Given a 2d grid map of <code>'1'</code>s (land) and <code>'0'</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>

<p><i><b>Example 1:</b></i></p>
<pre>11110<br>11010<br>11000<br>00000</pre>
<p>Answer: 1</p>
<p><i><b>Example 2:</b></i></p>
<pre>11000<br>11000<br>00100<br>00011</pre>
<p>Answer: 3</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://leetcode.com/discuss/user/mithmatt">@mithmatt</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/depth-first-search/">Depth-first Search</a>
                  
                  <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/breadth-first-search/">Breadth-first Search</a>
                  
                </span>
              
            </div>

### Analysis

At every '1' position, do DFS.

### Solution

I post my code below. Note that we do not actually have to have the method "findLand" -  we can simply read through the grid and mark all '1's in one run. 

You might want to come up with your own code. Mine is just for reference. This is not an very interesting question, I assume. 

### Code

    public class Solution {
        public int numIslands(char[][] grid) {
            if (grid == null || grid.length == 0 || grid[0].length == 0) {
                return 0;
            }
            int m = grid.length;
            int n = grid[0].length;
            int count = 0;

            Pair firstPiece = findLand(grid, m, n);
            while (firstPiece != null) {
                // mark all neighbors, and count increment
                mark(grid, m, n, firstPiece);
                firstPiece = findLand(grid, m, n);
                count++;
            }

            return count;
        }

        void mark(char[][] grid, int m, int n, Pair p) {
            if (p.x < 0 || p.x == m || p.y < 0 || p.y == n) {
                return;
            } else if (grid[p.x][p.y] != '1') {
                return;
            }
            // mark current and then dfs
            grid[p.x][p.y] = '2';
            mark(grid, m, n, new Pair(p.x - 1, p.y));
            mark(grid, m, n, new Pair(p.x + 1, p.y));
            mark(grid, m, n, new Pair(p.x, p.y - 1));
            mark(grid, m, n, new Pair(p.x, p.y + 1));
        }

        Pair findLand(char[][] grid, int m, int n) {
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] == '1') {
                        return new Pair(i, j);
                    }
                }
            }
            return null;
        }

        class Pair {
            int x;
            int y;

            public Pair(int a, int b) {
                x = a;
                y = b;
            }
        }
    }

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[LeetCode 191] Number of 1 Bits ]]></title>
    <link href="http://www.shuatiblog.com/blog/2015/05/10/Number-of-1-Bits/"/>
    <updated>2015-05-10T00:00:00-05:00</updated>
    <id>http://www.shuatiblog.com/blog/2015/05/10/Number-of-1-Bits</id>
    <content type="html"><![CDATA[### Question 

[link](https://leetcode.com/problems/number-of-1-bits/)

<div class="question-content">
              <p></p><p>Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the <a href="http://en.wikipedia.org/wiki/Hamming_weight">Hamming weight</a>).</p>

<p>For example, the 32-bit integer ’11' has binary representation <code>00000000000000000000000000001011</code>, so the function should return 3.</p>

<p><b>Credits:</b><br>Special thanks to <a href="https://oj.leetcode.com/discuss/user/ts">@ts</a> for adding this problem and creating all test cases.</p><p></p>
              
                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>
                <span class="hide">
                  
                  <a class="btn btn-xs btn-primary" href="http://www.shuatiblog.com/tag/bit-manipulation/">Bit Manipulation</a>
                  
                </span>
              
            </div>

### Analysis

In order to remove the last '1' bit, we use this operation: 

    n = n & (n - 1);

### Solution

Just remove all the '1' bits. 

### Code

    public class Solution {
        public int hammingWeight(int n) {
            int count = 0;
            while (n != 0) {
                n = n & (n - 1);
                count++;
            }
            return count;
        }
    }
]]></content>
  </entry>
  
</feed>
